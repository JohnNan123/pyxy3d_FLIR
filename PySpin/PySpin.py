# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PySpin
else:
    import _PySpin

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class MJPGOption(object):
    r"""


    Options for saving MJPG files.

    C++ includes: SpinVideoDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frameRate = property(_PySpin.MJPGOption_frameRate_get, _PySpin.MJPGOption_frameRate_set, doc=r"""frameRate""")
    quality = property(_PySpin.MJPGOption_quality_get, _PySpin.MJPGOption_quality_set, doc=r"""quality""")
    width = property(_PySpin.MJPGOption_width_get, _PySpin.MJPGOption_width_set, doc=r"""width""")
    height = property(_PySpin.MJPGOption_height_get, _PySpin.MJPGOption_height_set, doc=r"""height""")
    reserved = property(_PySpin.MJPGOption_reserved_get, _PySpin.MJPGOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> MJPGOption
        Spinnaker::Video::MJPGOption::MJPGOption() 
        """
        _PySpin.MJPGOption_swiginit(self, _PySpin.new_MJPGOption())
    __swig_destroy__ = _PySpin.delete_MJPGOption

# Register MJPGOption in _PySpin:
_PySpin.MJPGOption_swigregister(MJPGOption)

class H264Option(object):
    r"""


    Options for saving H264 files.

    C++ includes: SpinVideoDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frameRate = property(_PySpin.H264Option_frameRate_get, _PySpin.H264Option_frameRate_set, doc=r"""frameRate""")
    width = property(_PySpin.H264Option_width_get, _PySpin.H264Option_width_set, doc=r"""width""")
    height = property(_PySpin.H264Option_height_get, _PySpin.H264Option_height_set, doc=r"""height""")
    bitrate = property(_PySpin.H264Option_bitrate_get, _PySpin.H264Option_bitrate_set, doc=r"""bitrate""")
    reserved = property(_PySpin.H264Option_reserved_get, _PySpin.H264Option_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> H264Option
        Spinnaker::Video::H264Option::H264Option() 
        """
        _PySpin.H264Option_swiginit(self, _PySpin.new_H264Option())
    __swig_destroy__ = _PySpin.delete_H264Option

# Register H264Option in _PySpin:
_PySpin.H264Option_swigregister(H264Option)

class AVIOption(object):
    r"""


    Options for saving AVI files.

    C++ includes: SpinVideoDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frameRate = property(_PySpin.AVIOption_frameRate_get, _PySpin.AVIOption_frameRate_set, doc=r"""frameRate""")
    width = property(_PySpin.AVIOption_width_get, _PySpin.AVIOption_width_set, doc=r"""width""")
    height = property(_PySpin.AVIOption_height_get, _PySpin.AVIOption_height_set, doc=r"""height""")
    reserved = property(_PySpin.AVIOption_reserved_get, _PySpin.AVIOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> AVIOption
        Spinnaker::Video::AVIOption::AVIOption() 
        """
        _PySpin.AVIOption_swiginit(self, _PySpin.new_AVIOption())
    __swig_destroy__ = _PySpin.delete_AVIOption

# Register AVIOption in _PySpin:
_PySpin.AVIOption_swigregister(AVIOption)

SPINNAKER_ERR_SUCCESS = _PySpin.SPINNAKER_ERR_SUCCESS

SPINNAKER_ERR_ERROR = _PySpin.SPINNAKER_ERR_ERROR

SPINNAKER_ERR_NOT_INITIALIZED = _PySpin.SPINNAKER_ERR_NOT_INITIALIZED

SPINNAKER_ERR_NOT_IMPLEMENTED = _PySpin.SPINNAKER_ERR_NOT_IMPLEMENTED

SPINNAKER_ERR_RESOURCE_IN_USE = _PySpin.SPINNAKER_ERR_RESOURCE_IN_USE

SPINNAKER_ERR_ACCESS_DENIED = _PySpin.SPINNAKER_ERR_ACCESS_DENIED

SPINNAKER_ERR_INVALID_HANDLE = _PySpin.SPINNAKER_ERR_INVALID_HANDLE

SPINNAKER_ERR_INVALID_ID = _PySpin.SPINNAKER_ERR_INVALID_ID

SPINNAKER_ERR_NO_DATA = _PySpin.SPINNAKER_ERR_NO_DATA

SPINNAKER_ERR_INVALID_PARAMETER = _PySpin.SPINNAKER_ERR_INVALID_PARAMETER

SPINNAKER_ERR_IO = _PySpin.SPINNAKER_ERR_IO

SPINNAKER_ERR_TIMEOUT = _PySpin.SPINNAKER_ERR_TIMEOUT

SPINNAKER_ERR_ABORT = _PySpin.SPINNAKER_ERR_ABORT

SPINNAKER_ERR_INVALID_BUFFER = _PySpin.SPINNAKER_ERR_INVALID_BUFFER

SPINNAKER_ERR_NOT_AVAILABLE = _PySpin.SPINNAKER_ERR_NOT_AVAILABLE

SPINNAKER_ERR_INVALID_ADDRESS = _PySpin.SPINNAKER_ERR_INVALID_ADDRESS

SPINNAKER_ERR_BUFFER_TOO_SMALL = _PySpin.SPINNAKER_ERR_BUFFER_TOO_SMALL

SPINNAKER_ERR_INVALID_INDEX = _PySpin.SPINNAKER_ERR_INVALID_INDEX

SPINNAKER_ERR_PARSING_CHUNK_DATA = _PySpin.SPINNAKER_ERR_PARSING_CHUNK_DATA

SPINNAKER_ERR_INVALID_VALUE = _PySpin.SPINNAKER_ERR_INVALID_VALUE

SPINNAKER_ERR_RESOURCE_EXHAUSTED = _PySpin.SPINNAKER_ERR_RESOURCE_EXHAUSTED

SPINNAKER_ERR_OUT_OF_MEMORY = _PySpin.SPINNAKER_ERR_OUT_OF_MEMORY

SPINNAKER_ERR_BUSY = _PySpin.SPINNAKER_ERR_BUSY

SPINNAKER_ERR_GENICAM_INVALID_ARGUMENT = _PySpin.SPINNAKER_ERR_GENICAM_INVALID_ARGUMENT

SPINNAKER_ERR_GENICAM_OUT_OF_RANGE = _PySpin.SPINNAKER_ERR_GENICAM_OUT_OF_RANGE

SPINNAKER_ERR_GENICAM_PROPERTY = _PySpin.SPINNAKER_ERR_GENICAM_PROPERTY

SPINNAKER_ERR_GENICAM_RUN_TIME = _PySpin.SPINNAKER_ERR_GENICAM_RUN_TIME

SPINNAKER_ERR_GENICAM_LOGICAL = _PySpin.SPINNAKER_ERR_GENICAM_LOGICAL

SPINNAKER_ERR_GENICAM_ACCESS = _PySpin.SPINNAKER_ERR_GENICAM_ACCESS

SPINNAKER_ERR_GENICAM_TIMEOUT = _PySpin.SPINNAKER_ERR_GENICAM_TIMEOUT

SPINNAKER_ERR_GENICAM_DYNAMIC_CAST = _PySpin.SPINNAKER_ERR_GENICAM_DYNAMIC_CAST

SPINNAKER_ERR_GENICAM_GENERIC = _PySpin.SPINNAKER_ERR_GENICAM_GENERIC

SPINNAKER_ERR_GENICAM_BAD_ALLOCATION = _PySpin.SPINNAKER_ERR_GENICAM_BAD_ALLOCATION

SPINNAKER_ERR_IM_CONVERT = _PySpin.SPINNAKER_ERR_IM_CONVERT

SPINNAKER_ERR_IM_COPY = _PySpin.SPINNAKER_ERR_IM_COPY

SPINNAKER_ERR_IM_MALLOC = _PySpin.SPINNAKER_ERR_IM_MALLOC

SPINNAKER_ERR_IM_NOT_SUPPORTED = _PySpin.SPINNAKER_ERR_IM_NOT_SUPPORTED

SPINNAKER_ERR_IM_HISTOGRAM_RANGE = _PySpin.SPINNAKER_ERR_IM_HISTOGRAM_RANGE

SPINNAKER_ERR_IM_HISTOGRAM_MEAN = _PySpin.SPINNAKER_ERR_IM_HISTOGRAM_MEAN

SPINNAKER_ERR_IM_MIN_MAX = _PySpin.SPINNAKER_ERR_IM_MIN_MAX

SPINNAKER_ERR_IM_COLOR_CONVERSION = _PySpin.SPINNAKER_ERR_IM_COLOR_CONVERSION

SPINNAKER_ERR_IM_DECOMPRESSION = _PySpin.SPINNAKER_ERR_IM_DECOMPRESSION

SPINNAKER_ERR_CUSTOM_ID = _PySpin.SPINNAKER_ERR_CUSTOM_ID

SPINNAKER_EVENT_ARRIVAL_REMOVAL = _PySpin.SPINNAKER_EVENT_ARRIVAL_REMOVAL

SPINNAKER_EVENT_DEVICE = _PySpin.SPINNAKER_EVENT_DEVICE

SPINNAKER_EVENT_DEVICE_SPECIFIC = _PySpin.SPINNAKER_EVENT_DEVICE_SPECIFIC

SPINNAKER_EVENT_NEW_BUFFER = _PySpin.SPINNAKER_EVENT_NEW_BUFFER

SPINNAKER_EVENT_NEW_BUFFER_LIST = _PySpin.SPINNAKER_EVENT_NEW_BUFFER_LIST

SPINNAKER_EVENT_LOGGING_EVENT = _PySpin.SPINNAKER_EVENT_LOGGING_EVENT

SPINNAKER_EVENT_INTERFACE_ARRIVAL_REMOVAL = _PySpin.SPINNAKER_EVENT_INTERFACE_ARRIVAL_REMOVAL

SPINNAKER_EVENT_UNKNOWN = _PySpin.SPINNAKER_EVENT_UNKNOWN

SPINNAKER_TLPIXELFORMAT_NAMESPACE_UNKNOWN = _PySpin.SPINNAKER_TLPIXELFORMAT_NAMESPACE_UNKNOWN

SPINNAKER_TLPIXELFORMAT_NAMESPACE_GEV = _PySpin.SPINNAKER_TLPIXELFORMAT_NAMESPACE_GEV

SPINNAKER_TLPIXELFORMAT_NAMESPACE_IIDC = _PySpin.SPINNAKER_TLPIXELFORMAT_NAMESPACE_IIDC

SPINNAKER_TLPIXELFORMAT_NAMESPACE_PFNC_16BIT = _PySpin.SPINNAKER_TLPIXELFORMAT_NAMESPACE_PFNC_16BIT

SPINNAKER_TLPIXELFORMAT_NAMESPACE_PFNC_32BIT = _PySpin.SPINNAKER_TLPIXELFORMAT_NAMESPACE_PFNC_32BIT

SPINNAKER_TLPIXELFORMAT_NAMESPACE_CUSTOM_ID = _PySpin.SPINNAKER_TLPIXELFORMAT_NAMESPACE_CUSTOM_ID

SPINNAKER_COLOR_PROCESSING_ALGORITHM_NONE = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_NONE

SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR

SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR_AVG = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR_AVG

SPINNAKER_COLOR_PROCESSING_ALGORITHM_BILINEAR = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_BILINEAR

SPINNAKER_COLOR_PROCESSING_ALGORITHM_EDGE_SENSING = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_EDGE_SENSING

SPINNAKER_COLOR_PROCESSING_ALGORITHM_HQ_LINEAR = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_HQ_LINEAR

SPINNAKER_COLOR_PROCESSING_ALGORITHM_IPP = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_IPP

SPINNAKER_COLOR_PROCESSING_ALGORITHM_DIRECTIONAL_FILTER = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_DIRECTIONAL_FILTER

SPINNAKER_COLOR_PROCESSING_ALGORITHM_RIGOROUS = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_RIGOROUS

SPINNAKER_COLOR_PROCESSING_ALGORITHM_WEIGHTED_DIRECTIONAL_FILTER = _PySpin.SPINNAKER_COLOR_PROCESSING_ALGORITHM_WEIGHTED_DIRECTIONAL_FILTER

SPINNAKER_IMAGE_FILE_FORMAT_FROM_FILE_EXT = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_FROM_FILE_EXT

SPINNAKER_IMAGE_FILE_FORMAT_PGM = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_PGM

SPINNAKER_IMAGE_FILE_FORMAT_PPM = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_PPM

SPINNAKER_IMAGE_FILE_FORMAT_BMP = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_BMP

SPINNAKER_IMAGE_FILE_FORMAT_JPEG = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_JPEG

SPINNAKER_IMAGE_FILE_FORMAT_JPEG2000 = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_JPEG2000

SPINNAKER_IMAGE_FILE_FORMAT_TIFF = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_TIFF

SPINNAKER_IMAGE_FILE_FORMAT_PNG = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_PNG

SPINNAKER_IMAGE_FILE_FORMAT_RAW = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_RAW

SPINNAKER_IMAGE_FILE_FORMAT_JPEG12_C = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_JPEG12_C

SPINNAKER_IMAGE_FILE_FORMAT_FORCE_32BITS = _PySpin.SPINNAKER_IMAGE_FILE_FORMAT_FORCE_32BITS

SPINNAKER_IMAGE_STATUS_UNKNOWN_ERROR = _PySpin.SPINNAKER_IMAGE_STATUS_UNKNOWN_ERROR

SPINNAKER_IMAGE_STATUS_NO_ERROR = _PySpin.SPINNAKER_IMAGE_STATUS_NO_ERROR

SPINNAKER_IMAGE_STATUS_CRC_CHECK_FAILED = _PySpin.SPINNAKER_IMAGE_STATUS_CRC_CHECK_FAILED

SPINNAKER_IMAGE_STATUS_DATA_OVERFLOW = _PySpin.SPINNAKER_IMAGE_STATUS_DATA_OVERFLOW

SPINNAKER_IMAGE_STATUS_MISSING_PACKETS = _PySpin.SPINNAKER_IMAGE_STATUS_MISSING_PACKETS

SPINNAKER_IMAGE_STATUS_LEADER_BUFFER_SIZE_INCONSISTENT = _PySpin.SPINNAKER_IMAGE_STATUS_LEADER_BUFFER_SIZE_INCONSISTENT

SPINNAKER_IMAGE_STATUS_TRAILER_BUFFER_SIZE_INCONSISTENT = _PySpin.SPINNAKER_IMAGE_STATUS_TRAILER_BUFFER_SIZE_INCONSISTENT

SPINNAKER_IMAGE_STATUS_PACKETID_INCONSISTENT = _PySpin.SPINNAKER_IMAGE_STATUS_PACKETID_INCONSISTENT

SPINNAKER_IMAGE_STATUS_MISSING_LEADER = _PySpin.SPINNAKER_IMAGE_STATUS_MISSING_LEADER

SPINNAKER_IMAGE_STATUS_MISSING_TRAILER = _PySpin.SPINNAKER_IMAGE_STATUS_MISSING_TRAILER

SPINNAKER_IMAGE_STATUS_DATA_INCOMPLETE = _PySpin.SPINNAKER_IMAGE_STATUS_DATA_INCOMPLETE

SPINNAKER_IMAGE_STATUS_INFO_INCONSISTENT = _PySpin.SPINNAKER_IMAGE_STATUS_INFO_INCONSISTENT

SPINNAKER_IMAGE_STATUS_CHUNK_DATA_INVALID = _PySpin.SPINNAKER_IMAGE_STATUS_CHUNK_DATA_INVALID

SPINNAKER_IMAGE_STATUS_NO_SYSTEM_RESOURCES = _PySpin.SPINNAKER_IMAGE_STATUS_NO_SYSTEM_RESOURCES

SPINNAKER_STATISTICS_CHANNEL_GREY = _PySpin.SPINNAKER_STATISTICS_CHANNEL_GREY

SPINNAKER_STATISTICS_CHANNEL_RED = _PySpin.SPINNAKER_STATISTICS_CHANNEL_RED

SPINNAKER_STATISTICS_CHANNEL_GREEN = _PySpin.SPINNAKER_STATISTICS_CHANNEL_GREEN

SPINNAKER_STATISTICS_CHANNEL_BLUE = _PySpin.SPINNAKER_STATISTICS_CHANNEL_BLUE

SPINNAKER_STATISTICS_CHANNEL_HUE = _PySpin.SPINNAKER_STATISTICS_CHANNEL_HUE

SPINNAKER_STATISTICS_CHANNEL_SATURATION = _PySpin.SPINNAKER_STATISTICS_CHANNEL_SATURATION

SPINNAKER_STATISTICS_CHANNEL_LIGHTNESS = _PySpin.SPINNAKER_STATISTICS_CHANNEL_LIGHTNESS

SPINNAKER_STATISTICS_CHANNEL_NUM_CHANNELS = _PySpin.SPINNAKER_STATISTICS_CHANNEL_NUM_CHANNELS

SPINNAKER_LOG_LEVEL_OFF = _PySpin.SPINNAKER_LOG_LEVEL_OFF

SPINNAKER_LOG_LEVEL_FATAL = _PySpin.SPINNAKER_LOG_LEVEL_FATAL

SPINNAKER_LOG_LEVEL_ALERT = _PySpin.SPINNAKER_LOG_LEVEL_ALERT

SPINNAKER_LOG_LEVEL_CRIT = _PySpin.SPINNAKER_LOG_LEVEL_CRIT

SPINNAKER_LOG_LEVEL_ERROR = _PySpin.SPINNAKER_LOG_LEVEL_ERROR

SPINNAKER_LOG_LEVEL_WARN = _PySpin.SPINNAKER_LOG_LEVEL_WARN

SPINNAKER_LOG_LEVEL_NOTICE = _PySpin.SPINNAKER_LOG_LEVEL_NOTICE

SPINNAKER_LOG_LEVEL_INFO = _PySpin.SPINNAKER_LOG_LEVEL_INFO

SPINNAKER_LOG_LEVEL_DEBUG = _PySpin.SPINNAKER_LOG_LEVEL_DEBUG

SPINNAKER_LOG_LEVEL_NOTSET = _PySpin.SPINNAKER_LOG_LEVEL_NOTSET

SPINNAKER_IMAGE_PAYLOAD_TYPE_UNKNOWN = _PySpin.SPINNAKER_IMAGE_PAYLOAD_TYPE_UNKNOWN

SPINNAKER_IMAGE_PAYLOAD_TYPE_IMAGE = _PySpin.SPINNAKER_IMAGE_PAYLOAD_TYPE_IMAGE

SPINNAKER_IMAGE_PAYLOAD_TYPE_EXTENDED_CHUNK = _PySpin.SPINNAKER_IMAGE_PAYLOAD_TYPE_EXTENDED_CHUNK

SPINNAKER_IMAGE_PAYLOAD_TYPE_JPEG = _PySpin.SPINNAKER_IMAGE_PAYLOAD_TYPE_JPEG

SPINNAKER_IMAGE_PAYLOAD_TYPE_LOSSLESS_COMPRESSED = _PySpin.SPINNAKER_IMAGE_PAYLOAD_TYPE_LOSSLESS_COMPRESSED

SPINNAKER_IMAGE_PAYLOAD_TYPE_LOSSY_COMPRESSED = _PySpin.SPINNAKER_IMAGE_PAYLOAD_TYPE_LOSSY_COMPRESSED

SPINNAKER_IMAGE_PAYLOAD_TYPE_JPEG_LOSSLESS_COMPRESSED = _PySpin.SPINNAKER_IMAGE_PAYLOAD_TYPE_JPEG_LOSSLESS_COMPRESSED

SPINNAKER_TLPAYLOAD_TYPE_UNKNOWN = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_UNKNOWN

SPINNAKER_TLPAYLOAD_TYPE_IMAGE = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_IMAGE

SPINNAKER_TLPAYLOAD_TYPE_RAW_DATA = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_RAW_DATA

SPINNAKER_TLPAYLOAD_TYPE_FILE = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_FILE

SPINNAKER_TLPAYLOAD_TYPE_CHUNK_DATA = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_CHUNK_DATA

SPINNAKER_TLPAYLOAD_TYPE_JPEG = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_JPEG

SPINNAKER_TLPAYLOAD_TYPE_JPEG2000 = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_JPEG2000

SPINNAKER_TLPAYLOAD_TYPE_H264 = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_H264

SPINNAKER_TLPAYLOAD_TYPE_CHUNK_ONLY = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_CHUNK_ONLY

SPINNAKER_TLPAYLOAD_TYPE_DEVICE_SPECIFIC = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_DEVICE_SPECIFIC

SPINNAKER_TLPAYLOAD_TYPE_MULTI_PART = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_MULTI_PART

SPINNAKER_TLPAYLOAD_TYPE_CUSTOM_ID = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_CUSTOM_ID

SPINNAKER_TLPAYLOAD_TYPE_LOSSLESS_COMPRESSED = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_LOSSLESS_COMPRESSED

SPINNAKER_TLPAYLOAD_TYPE_LOSSY_COMPRESSED = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_LOSSY_COMPRESSED

SPINNAKER_TLPAYLOAD_TYPE_JPEG_LOSSLESS_COMPRESSED = _PySpin.SPINNAKER_TLPAYLOAD_TYPE_JPEG_LOSSLESS_COMPRESSED

SPINNAKER_ACTION_COMMAND_STATUS_OK = _PySpin.SPINNAKER_ACTION_COMMAND_STATUS_OK

SPINNAKER_ACTION_COMMAND_STATUS_NO_REF_TIME = _PySpin.SPINNAKER_ACTION_COMMAND_STATUS_NO_REF_TIME

SPINNAKER_ACTION_COMMAND_STATUS_OVERFLOW = _PySpin.SPINNAKER_ACTION_COMMAND_STATUS_OVERFLOW

SPINNAKER_ACTION_COMMAND_STATUS_ACTION_LATE = _PySpin.SPINNAKER_ACTION_COMMAND_STATUS_ACTION_LATE

SPINNAKER_ACTION_COMMAND_STATUS_ERROR = _PySpin.SPINNAKER_ACTION_COMMAND_STATUS_ERROR

SPINNAKER_TIFF_COMPRESS_METHOD_NONE = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_NONE

SPINNAKER_TIFF_COMPRESS_METHOD_PACKBITS = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_PACKBITS

SPINNAKER_TIFF_COMPRESS_METHOD_DEFLATE = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_DEFLATE

SPINNAKER_TIFF_COMPRESS_METHOD_ADOBE_DEFLATE = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_ADOBE_DEFLATE

SPINNAKER_TIFF_COMPRESS_METHOD_CCITTFAX3 = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_CCITTFAX3

SPINNAKER_TIFF_COMPRESS_METHOD_CCITTFAX4 = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_CCITTFAX4

SPINNAKER_TIFF_COMPRESS_METHOD_LZW = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_LZW

SPINNAKER_TIFF_COMPRESS_METHOD_JPEG = _PySpin.SPINNAKER_TIFF_COMPRESS_METHOD_JPEG

SPINNAKER_INT_TYPE_UINT8 = _PySpin.SPINNAKER_INT_TYPE_UINT8

SPINNAKER_INT_TYPE_INT8 = _PySpin.SPINNAKER_INT_TYPE_INT8

SPINNAKER_INT_TYPE_UINT10 = _PySpin.SPINNAKER_INT_TYPE_UINT10

SPINNAKER_INT_TYPE_UINT10p = _PySpin.SPINNAKER_INT_TYPE_UINT10p

SPINNAKER_INT_TYPE_UINT10P = _PySpin.SPINNAKER_INT_TYPE_UINT10P

SPINNAKER_INT_TYPE_UINT12 = _PySpin.SPINNAKER_INT_TYPE_UINT12

SPINNAKER_INT_TYPE_UINT12p = _PySpin.SPINNAKER_INT_TYPE_UINT12p

SPINNAKER_INT_TYPE_UINT12P = _PySpin.SPINNAKER_INT_TYPE_UINT12P

SPINNAKER_INT_TYPE_UINT14 = _PySpin.SPINNAKER_INT_TYPE_UINT14

SPINNAKER_INT_TYPE_UINT16 = _PySpin.SPINNAKER_INT_TYPE_UINT16

SPINNAKER_INT_TYPE_INT16 = _PySpin.SPINNAKER_INT_TYPE_INT16

SPINNAKER_INT_TYPE_FLOAT32 = _PySpin.SPINNAKER_INT_TYPE_FLOAT32

SPINNAKER_INT_TYPE_UNKNOWN = _PySpin.SPINNAKER_INT_TYPE_UNKNOWN

SPINNAKER_BUFFER_OWNERSHIP_SYSTEM = _PySpin.SPINNAKER_BUFFER_OWNERSHIP_SYSTEM

SPINNAKER_BUFFER_OWNERSHIP_USER = _PySpin.SPINNAKER_BUFFER_OWNERSHIP_USER

SPINNAKER_IMAGE_SCALING_ALGORITHM_NEAREST_NEIGHBOR = _PySpin.SPINNAKER_IMAGE_SCALING_ALGORITHM_NEAREST_NEIGHBOR

SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE = _PySpin.SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE

SPINNAKER_SOURCE_DATA_RANGE_ABSOLUTE_DATA_RANGE = _PySpin.SPINNAKER_SOURCE_DATA_RANGE_ABSOLUTE_DATA_RANGE

SPINNAKER_SOURCE_DATA_RANGE_IMAGE_MIN_ABSOLUTE_MAX = _PySpin.SPINNAKER_SOURCE_DATA_RANGE_IMAGE_MIN_ABSOLUTE_MAX

SPINNAKER_SOURCE_DATA_RANGE_ABSOLUTE_MIN_IMAGE_MAX = _PySpin.SPINNAKER_SOURCE_DATA_RANGE_ABSOLUTE_MIN_IMAGE_MAX

SPINNAKER_HEATMAP_COLOR_BLACK = _PySpin.SPINNAKER_HEATMAP_COLOR_BLACK

SPINNAKER_HEATMAP_COLOR_BLUE = _PySpin.SPINNAKER_HEATMAP_COLOR_BLUE

SPINNAKER_HEATMAP_COLOR_CYAN = _PySpin.SPINNAKER_HEATMAP_COLOR_CYAN

SPINNAKER_HEATMAP_COLOR_GREEN = _PySpin.SPINNAKER_HEATMAP_COLOR_GREEN

SPINNAKER_HEATMAP_COLOR_YELLOW = _PySpin.SPINNAKER_HEATMAP_COLOR_YELLOW

SPINNAKER_HEATMAP_COLOR_RED = _PySpin.SPINNAKER_HEATMAP_COLOR_RED

SPINNAKER_HEATMAP_COLOR_WHITE = _PySpin.SPINNAKER_HEATMAP_COLOR_WHITE

SPINNAKER_POLARIZATION_QUADRANT_I0 = _PySpin.SPINNAKER_POLARIZATION_QUADRANT_I0

SPINNAKER_POLARIZATION_QUADRANT_I45 = _PySpin.SPINNAKER_POLARIZATION_QUADRANT_I45

SPINNAKER_POLARIZATION_QUADRANT_I90 = _PySpin.SPINNAKER_POLARIZATION_QUADRANT_I90

SPINNAKER_POLARIZATION_QUADRANT_I135 = _PySpin.SPINNAKER_POLARIZATION_QUADRANT_I135

SPINNAKER_CCM_COLOR_TEMP_TUNGSTEN_2800K = _PySpin.SPINNAKER_CCM_COLOR_TEMP_TUNGSTEN_2800K

SPINNAKER_CCM_COLOR_TEMP_WARM_FLUORESCENT_3000K = _PySpin.SPINNAKER_CCM_COLOR_TEMP_WARM_FLUORESCENT_3000K

SPINNAKER_CCM_COLOR_TEMP_COOL_FLUORESCENT_4000K = _PySpin.SPINNAKER_CCM_COLOR_TEMP_COOL_FLUORESCENT_4000K

SPINNAKER_CCM_COLOR_TEMP_SUNNY_5000K = _PySpin.SPINNAKER_CCM_COLOR_TEMP_SUNNY_5000K

SPINNAKER_CCM_COLOR_TEMP_CLOUDY_6500K = _PySpin.SPINNAKER_CCM_COLOR_TEMP_CLOUDY_6500K

SPINNAKER_CCM_COLOR_TEMP_SHADE_8000K = _PySpin.SPINNAKER_CCM_COLOR_TEMP_SHADE_8000K

SPINNAKER_CCM_COLOR_TEMP_GENERAL = _PySpin.SPINNAKER_CCM_COLOR_TEMP_GENERAL

SPINNAKER_CCM_TYPE_LINEAR = _PySpin.SPINNAKER_CCM_TYPE_LINEAR

SPINNAKER_CCM_TYPE_ADVANCED = _PySpin.SPINNAKER_CCM_TYPE_ADVANCED

SPINNAKER_CCM_SENSOR_IMX250 = _PySpin.SPINNAKER_CCM_SENSOR_IMX250

SPINNAKER_CCM_COLOR_SPACE_OFF = _PySpin.SPINNAKER_CCM_COLOR_SPACE_OFF

SPINNAKER_CCM_COLOR_SPACE_SRGB = _PySpin.SPINNAKER_CCM_COLOR_SPACE_SRGB

SPINNAKER_CCM_APPLICATION_GENERIC = _PySpin.SPINNAKER_CCM_APPLICATION_GENERIC

SPINNAKER_CCM_APPLICATION_MICROSCOPY = _PySpin.SPINNAKER_CCM_APPLICATION_MICROSCOPY

class PNGOption(object):
    r"""


    Options for saving PNG images.

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    interlaced = property(_PySpin.PNGOption_interlaced_get, _PySpin.PNGOption_interlaced_set, doc=r"""interlaced""")
    compressionLevel = property(_PySpin.PNGOption_compressionLevel_get, _PySpin.PNGOption_compressionLevel_set, doc=r"""compressionLevel""")
    reserved = property(_PySpin.PNGOption_reserved_get, _PySpin.PNGOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> PNGOption
        Spinnaker::PNGOption::PNGOption() 
        """
        _PySpin.PNGOption_swiginit(self, _PySpin.new_PNGOption())
    __swig_destroy__ = _PySpin.delete_PNGOption

# Register PNGOption in _PySpin:
_PySpin.PNGOption_swigregister(PNGOption)
cvar = _PySpin.cvar
EVENT_TIMEOUT_NONE = cvar.EVENT_TIMEOUT_NONE
EVENT_TIMEOUT_INFINITE = cvar.EVENT_TIMEOUT_INFINITE

class PPMOption(object):
    r"""


    Options for saving PPM images.

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    binaryFile = property(_PySpin.PPMOption_binaryFile_get, _PySpin.PPMOption_binaryFile_set, doc=r"""binaryFile""")
    reserved = property(_PySpin.PPMOption_reserved_get, _PySpin.PPMOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> PPMOption
        Spinnaker::PPMOption::PPMOption() 
        """
        _PySpin.PPMOption_swiginit(self, _PySpin.new_PPMOption())
    __swig_destroy__ = _PySpin.delete_PPMOption

# Register PPMOption in _PySpin:
_PySpin.PPMOption_swigregister(PPMOption)

class PGMOption(object):
    r"""


    Options for saving PGM images.

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    binaryFile = property(_PySpin.PGMOption_binaryFile_get, _PySpin.PGMOption_binaryFile_set, doc=r"""binaryFile""")
    reserved = property(_PySpin.PGMOption_reserved_get, _PySpin.PGMOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> PGMOption
        Spinnaker::PGMOption::PGMOption() 
        """
        _PySpin.PGMOption_swiginit(self, _PySpin.new_PGMOption())
    __swig_destroy__ = _PySpin.delete_PGMOption

# Register PGMOption in _PySpin:
_PySpin.PGMOption_swigregister(PGMOption)

class TIFFOption(object):
    r"""


    Options for saving TIFF images.

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    compression = property(_PySpin.TIFFOption_compression_get, _PySpin.TIFFOption_compression_set, doc=r"""compression""")
    reserved = property(_PySpin.TIFFOption_reserved_get, _PySpin.TIFFOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> TIFFOption
        Spinnaker::TIFFOption::TIFFOption() 
        """
        _PySpin.TIFFOption_swiginit(self, _PySpin.new_TIFFOption())
    __swig_destroy__ = _PySpin.delete_TIFFOption

# Register TIFFOption in _PySpin:
_PySpin.TIFFOption_swigregister(TIFFOption)

class JPEGOption(object):
    r"""


    Options for saving JPEG image.

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    progressive = property(_PySpin.JPEGOption_progressive_get, _PySpin.JPEGOption_progressive_set, doc=r"""progressive""")
    quality = property(_PySpin.JPEGOption_quality_get, _PySpin.JPEGOption_quality_set, doc=r"""quality""")
    reserved = property(_PySpin.JPEGOption_reserved_get, _PySpin.JPEGOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> JPEGOption
        Spinnaker::JPEGOption::JPEGOption() 
        """
        _PySpin.JPEGOption_swiginit(self, _PySpin.new_JPEGOption())
    __swig_destroy__ = _PySpin.delete_JPEGOption

# Register JPEGOption in _PySpin:
_PySpin.JPEGOption_swigregister(JPEGOption)

class JPG2Option(object):
    r"""


    Options for saving JPEG2000 image.

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    quality = property(_PySpin.JPG2Option_quality_get, _PySpin.JPG2Option_quality_set, doc=r"""quality""")
    reserved = property(_PySpin.JPG2Option_reserved_get, _PySpin.JPG2Option_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> JPG2Option
        Spinnaker::JPG2Option::JPG2Option() 
        """
        _PySpin.JPG2Option_swiginit(self, _PySpin.new_JPG2Option())
    __swig_destroy__ = _PySpin.delete_JPG2Option

# Register JPG2Option in _PySpin:
_PySpin.JPG2Option_swigregister(JPG2Option)

class BMPOption(object):
    r"""


    Options for saving Bitmap image.

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    indexedColor_8bit = property(_PySpin.BMPOption_indexedColor_8bit_get, _PySpin.BMPOption_indexedColor_8bit_set, doc=r"""indexedColor_8bit""")
    reserved = property(_PySpin.BMPOption_reserved_get, _PySpin.BMPOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""
        __init__(self) -> BMPOption
        Spinnaker::BMPOption::BMPOption() 
        """
        _PySpin.BMPOption_swiginit(self, _PySpin.new_BMPOption())
    __swig_destroy__ = _PySpin.delete_BMPOption

# Register BMPOption in _PySpin:
_PySpin.BMPOption_swigregister(BMPOption)

class SIOption(object):
    r"""Proxy of C++ Spinnaker::SIOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_PySpin.SIOption_reserved_get, _PySpin.SIOption_reserved_set, doc=r"""reserved""")

    def __init__(self):
        r"""__init__(self) -> SIOption"""
        _PySpin.SIOption_swiginit(self, _PySpin.new_SIOption())
    __swig_destroy__ = _PySpin.delete_SIOption

# Register SIOption in _PySpin:
_PySpin.SIOption_swigregister(SIOption)

class LibraryVersion(object):
    r"""Proxy of C++ Spinnaker::LibraryVersion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_PySpin.LibraryVersion_major_get, _PySpin.LibraryVersion_major_set, doc=r"""major""")
    minor = property(_PySpin.LibraryVersion_minor_get, _PySpin.LibraryVersion_minor_set, doc=r"""minor""")
    type = property(_PySpin.LibraryVersion_type_get, _PySpin.LibraryVersion_type_set, doc=r"""type""")
    build = property(_PySpin.LibraryVersion_build_get, _PySpin.LibraryVersion_build_set, doc=r"""build""")

    def __init__(self):
        r"""__init__(self) -> LibraryVersion"""
        _PySpin.LibraryVersion_swiginit(self, _PySpin.new_LibraryVersion())
    __swig_destroy__ = _PySpin.delete_LibraryVersion

# Register LibraryVersion in _PySpin:
_PySpin.LibraryVersion_swigregister(LibraryVersion)

class ActionCommandResult(object):
    r"""


    Action Command Result

    C++ includes: SpinnakerDefs.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DeviceAddress = property(_PySpin.ActionCommandResult_DeviceAddress_get, _PySpin.ActionCommandResult_DeviceAddress_set, doc=r"""DeviceAddress""")
    Status = property(_PySpin.ActionCommandResult_Status_get, _PySpin.ActionCommandResult_Status_set, doc=r"""Status""")

    def __init__(self):
        r"""__init__(self) -> ActionCommandResult"""
        _PySpin.ActionCommandResult_swiginit(self, _PySpin.new_ActionCommandResult())
    __swig_destroy__ = _PySpin.delete_ActionCommandResult

# Register ActionCommandResult in _PySpin:
_PySpin.ActionCommandResult_swigregister(ActionCommandResult)

class CCMSettings(object):
    r"""Proxy of C++ Spinnaker::CCMSettings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ColorTemperature = property(_PySpin.CCMSettings_ColorTemperature_get, _PySpin.CCMSettings_ColorTemperature_set, doc=r"""ColorTemperature""")
    Type = property(_PySpin.CCMSettings_Type_get, _PySpin.CCMSettings_Type_set, doc=r"""Type""")
    Sensor = property(_PySpin.CCMSettings_Sensor_get, _PySpin.CCMSettings_Sensor_set, doc=r"""Sensor""")
    CustomCCMCode = property(_PySpin.CCMSettings_CustomCCMCode_get, _PySpin.CCMSettings_CustomCCMCode_set, doc=r"""CustomCCMCode""")
    ColorSpace = property(_PySpin.CCMSettings_ColorSpace_get, _PySpin.CCMSettings_ColorSpace_set, doc=r"""ColorSpace""")
    Application = property(_PySpin.CCMSettings_Application_get, _PySpin.CCMSettings_Application_set, doc=r"""Application""")

    def __init__(self):
        r"""__init__(self) -> CCMSettings"""
        _PySpin.CCMSettings_swiginit(self, _PySpin.new_CCMSettings())
    __swig_destroy__ = _PySpin.delete_CCMSettings

# Register CCMSettings in _PySpin:
_PySpin.CCMSettings_swigregister(CCMSettings)

class DeviceEventInferenceData(object):
    r"""Proxy of C++ Spinnaker::DeviceEventInferenceData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_PySpin.DeviceEventInferenceData_result_get, _PySpin.DeviceEventInferenceData_result_set, doc=r"""result""")
    confidence = property(_PySpin.DeviceEventInferenceData_confidence_get, _PySpin.DeviceEventInferenceData_confidence_set, doc=r"""confidence""")
    frameID = property(_PySpin.DeviceEventInferenceData_frameID_get, _PySpin.DeviceEventInferenceData_frameID_set, doc=r"""frameID""")

    def __init__(self):
        r"""__init__(self) -> DeviceEventInferenceData"""
        _PySpin.DeviceEventInferenceData_swiginit(self, _PySpin.new_DeviceEventInferenceData())
    __swig_destroy__ = _PySpin.delete_DeviceEventInferenceData

# Register DeviceEventInferenceData in _PySpin:
_PySpin.DeviceEventInferenceData_swigregister(DeviceEventInferenceData)

class DeviceEventExposureEndData(object):
    r"""Proxy of C++ Spinnaker::DeviceEventExposureEndData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frameID = property(_PySpin.DeviceEventExposureEndData_frameID_get, _PySpin.DeviceEventExposureEndData_frameID_set, doc=r"""frameID""")

    def __init__(self):
        r"""__init__(self) -> DeviceEventExposureEndData"""
        _PySpin.DeviceEventExposureEndData_swiginit(self, _PySpin.new_DeviceEventExposureEndData())
    __swig_destroy__ = _PySpin.delete_DeviceEventExposureEndData

# Register DeviceEventExposureEndData in _PySpin:
_PySpin.DeviceEventExposureEndData_swigregister(DeviceEventExposureEndData)


SpinnakerException = _PySpin.SpinnakerException

LUTSelector_LUT1 = _PySpin.LUTSelector_LUT1

NUM_LUTSELECTOR = _PySpin.NUM_LUTSELECTOR

ExposureMode_Timed = _PySpin.ExposureMode_Timed

ExposureMode_TriggerWidth = _PySpin.ExposureMode_TriggerWidth

NUM_EXPOSUREMODE = _PySpin.NUM_EXPOSUREMODE

AcquisitionMode_Continuous = _PySpin.AcquisitionMode_Continuous

AcquisitionMode_SingleFrame = _PySpin.AcquisitionMode_SingleFrame

AcquisitionMode_MultiFrame = _PySpin.AcquisitionMode_MultiFrame

NUM_ACQUISITIONMODE = _PySpin.NUM_ACQUISITIONMODE

TriggerSource_Software = _PySpin.TriggerSource_Software

TriggerSource_Line0 = _PySpin.TriggerSource_Line0

TriggerSource_Line1 = _PySpin.TriggerSource_Line1

TriggerSource_Line2 = _PySpin.TriggerSource_Line2

TriggerSource_Line3 = _PySpin.TriggerSource_Line3

TriggerSource_UserOutput0 = _PySpin.TriggerSource_UserOutput0

TriggerSource_UserOutput1 = _PySpin.TriggerSource_UserOutput1

TriggerSource_UserOutput2 = _PySpin.TriggerSource_UserOutput2

TriggerSource_UserOutput3 = _PySpin.TriggerSource_UserOutput3

TriggerSource_Counter0Start = _PySpin.TriggerSource_Counter0Start

TriggerSource_Counter1Start = _PySpin.TriggerSource_Counter1Start

TriggerSource_Counter0End = _PySpin.TriggerSource_Counter0End

TriggerSource_Counter1End = _PySpin.TriggerSource_Counter1End

TriggerSource_LogicBlock0 = _PySpin.TriggerSource_LogicBlock0

TriggerSource_LogicBlock1 = _PySpin.TriggerSource_LogicBlock1

TriggerSource_Action0 = _PySpin.TriggerSource_Action0

NUM_TRIGGERSOURCE = _PySpin.NUM_TRIGGERSOURCE

TriggerActivation_LevelLow = _PySpin.TriggerActivation_LevelLow

TriggerActivation_LevelHigh = _PySpin.TriggerActivation_LevelHigh

TriggerActivation_FallingEdge = _PySpin.TriggerActivation_FallingEdge

TriggerActivation_RisingEdge = _PySpin.TriggerActivation_RisingEdge

TriggerActivation_AnyEdge = _PySpin.TriggerActivation_AnyEdge

NUM_TRIGGERACTIVATION = _PySpin.NUM_TRIGGERACTIVATION

SensorShutterMode_Global = _PySpin.SensorShutterMode_Global

SensorShutterMode_Rolling = _PySpin.SensorShutterMode_Rolling

SensorShutterMode_GlobalReset = _PySpin.SensorShutterMode_GlobalReset

NUM_SENSORSHUTTERMODE = _PySpin.NUM_SENSORSHUTTERMODE

TriggerMode_Off = _PySpin.TriggerMode_Off

TriggerMode_On = _PySpin.TriggerMode_On

NUM_TRIGGERMODE = _PySpin.NUM_TRIGGERMODE

TriggerOverlap_Off = _PySpin.TriggerOverlap_Off

TriggerOverlap_ReadOut = _PySpin.TriggerOverlap_ReadOut

TriggerOverlap_PreviousFrame = _PySpin.TriggerOverlap_PreviousFrame

NUM_TRIGGEROVERLAP = _PySpin.NUM_TRIGGEROVERLAP

TriggerSelector_AcquisitionStart = _PySpin.TriggerSelector_AcquisitionStart

TriggerSelector_FrameStart = _PySpin.TriggerSelector_FrameStart

TriggerSelector_FrameBurstStart = _PySpin.TriggerSelector_FrameBurstStart

NUM_TRIGGERSELECTOR = _PySpin.NUM_TRIGGERSELECTOR

ExposureAuto_Off = _PySpin.ExposureAuto_Off

ExposureAuto_Once = _PySpin.ExposureAuto_Once

ExposureAuto_Continuous = _PySpin.ExposureAuto_Continuous

NUM_EXPOSUREAUTO = _PySpin.NUM_EXPOSUREAUTO

EventSelector_Error = _PySpin.EventSelector_Error

EventSelector_ExposureEnd = _PySpin.EventSelector_ExposureEnd

EventSelector_SerialPortReceive = _PySpin.EventSelector_SerialPortReceive

NUM_EVENTSELECTOR = _PySpin.NUM_EVENTSELECTOR

EventNotification_On = _PySpin.EventNotification_On

EventNotification_Off = _PySpin.EventNotification_Off

NUM_EVENTNOTIFICATION = _PySpin.NUM_EVENTNOTIFICATION

LogicBlockSelector_LogicBlock0 = _PySpin.LogicBlockSelector_LogicBlock0

LogicBlockSelector_LogicBlock1 = _PySpin.LogicBlockSelector_LogicBlock1

NUM_LOGICBLOCKSELECTOR = _PySpin.NUM_LOGICBLOCKSELECTOR

LogicBlockLUTInputActivation_LevelLow = _PySpin.LogicBlockLUTInputActivation_LevelLow

LogicBlockLUTInputActivation_LevelHigh = _PySpin.LogicBlockLUTInputActivation_LevelHigh

LogicBlockLUTInputActivation_FallingEdge = _PySpin.LogicBlockLUTInputActivation_FallingEdge

LogicBlockLUTInputActivation_RisingEdge = _PySpin.LogicBlockLUTInputActivation_RisingEdge

LogicBlockLUTInputActivation_AnyEdge = _PySpin.LogicBlockLUTInputActivation_AnyEdge

NUM_LOGICBLOCKLUTINPUTACTIVATION = _PySpin.NUM_LOGICBLOCKLUTINPUTACTIVATION

LogicBlockLUTInputSelector_Input0 = _PySpin.LogicBlockLUTInputSelector_Input0

LogicBlockLUTInputSelector_Input1 = _PySpin.LogicBlockLUTInputSelector_Input1

LogicBlockLUTInputSelector_Input2 = _PySpin.LogicBlockLUTInputSelector_Input2

LogicBlockLUTInputSelector_Input3 = _PySpin.LogicBlockLUTInputSelector_Input3

NUM_LOGICBLOCKLUTINPUTSELECTOR = _PySpin.NUM_LOGICBLOCKLUTINPUTSELECTOR

LogicBlockLUTInputSource_Zero = _PySpin.LogicBlockLUTInputSource_Zero

LogicBlockLUTInputSource_Line0 = _PySpin.LogicBlockLUTInputSource_Line0

LogicBlockLUTInputSource_Line1 = _PySpin.LogicBlockLUTInputSource_Line1

LogicBlockLUTInputSource_Line2 = _PySpin.LogicBlockLUTInputSource_Line2

LogicBlockLUTInputSource_Line3 = _PySpin.LogicBlockLUTInputSource_Line3

LogicBlockLUTInputSource_UserOutput0 = _PySpin.LogicBlockLUTInputSource_UserOutput0

LogicBlockLUTInputSource_UserOutput1 = _PySpin.LogicBlockLUTInputSource_UserOutput1

LogicBlockLUTInputSource_UserOutput2 = _PySpin.LogicBlockLUTInputSource_UserOutput2

LogicBlockLUTInputSource_UserOutput3 = _PySpin.LogicBlockLUTInputSource_UserOutput3

LogicBlockLUTInputSource_Counter0Start = _PySpin.LogicBlockLUTInputSource_Counter0Start

LogicBlockLUTInputSource_Counter1Start = _PySpin.LogicBlockLUTInputSource_Counter1Start

LogicBlockLUTInputSource_Counter0End = _PySpin.LogicBlockLUTInputSource_Counter0End

LogicBlockLUTInputSource_Counter1End = _PySpin.LogicBlockLUTInputSource_Counter1End

LogicBlockLUTInputSource_LogicBlock0 = _PySpin.LogicBlockLUTInputSource_LogicBlock0

LogicBlockLUTInputSource_LogicBlock1 = _PySpin.LogicBlockLUTInputSource_LogicBlock1

LogicBlockLUTInputSource_ExposureStart = _PySpin.LogicBlockLUTInputSource_ExposureStart

LogicBlockLUTInputSource_ExposureEnd = _PySpin.LogicBlockLUTInputSource_ExposureEnd

LogicBlockLUTInputSource_FrameTriggerWait = _PySpin.LogicBlockLUTInputSource_FrameTriggerWait

LogicBlockLUTInputSource_AcquisitionActive = _PySpin.LogicBlockLUTInputSource_AcquisitionActive

NUM_LOGICBLOCKLUTINPUTSOURCE = _PySpin.NUM_LOGICBLOCKLUTINPUTSOURCE

LogicBlockLUTSelector_Value = _PySpin.LogicBlockLUTSelector_Value

LogicBlockLUTSelector_Enable = _PySpin.LogicBlockLUTSelector_Enable

NUM_LOGICBLOCKLUTSELECTOR = _PySpin.NUM_LOGICBLOCKLUTSELECTOR

ColorTransformationSelector_RGBtoRGB = _PySpin.ColorTransformationSelector_RGBtoRGB

ColorTransformationSelector_RGBtoYUV = _PySpin.ColorTransformationSelector_RGBtoYUV

NUM_COLORTRANSFORMATIONSELECTOR = _PySpin.NUM_COLORTRANSFORMATIONSELECTOR

RgbTransformLightSource_General = _PySpin.RgbTransformLightSource_General

RgbTransformLightSource_Tungsten2800K = _PySpin.RgbTransformLightSource_Tungsten2800K

RgbTransformLightSource_WarmFluorescent3000K = _PySpin.RgbTransformLightSource_WarmFluorescent3000K

RgbTransformLightSource_CoolFluorescent4000K = _PySpin.RgbTransformLightSource_CoolFluorescent4000K

RgbTransformLightSource_Daylight5000K = _PySpin.RgbTransformLightSource_Daylight5000K

RgbTransformLightSource_Cloudy6500K = _PySpin.RgbTransformLightSource_Cloudy6500K

RgbTransformLightSource_Shade8000K = _PySpin.RgbTransformLightSource_Shade8000K

RgbTransformLightSource_Custom = _PySpin.RgbTransformLightSource_Custom

NUM_RGBTRANSFORMLIGHTSOURCE = _PySpin.NUM_RGBTRANSFORMLIGHTSOURCE

ColorTransformationValueSelector_Gain00 = _PySpin.ColorTransformationValueSelector_Gain00

ColorTransformationValueSelector_Gain01 = _PySpin.ColorTransformationValueSelector_Gain01

ColorTransformationValueSelector_Gain02 = _PySpin.ColorTransformationValueSelector_Gain02

ColorTransformationValueSelector_Gain10 = _PySpin.ColorTransformationValueSelector_Gain10

ColorTransformationValueSelector_Gain11 = _PySpin.ColorTransformationValueSelector_Gain11

ColorTransformationValueSelector_Gain12 = _PySpin.ColorTransformationValueSelector_Gain12

ColorTransformationValueSelector_Gain20 = _PySpin.ColorTransformationValueSelector_Gain20

ColorTransformationValueSelector_Gain21 = _PySpin.ColorTransformationValueSelector_Gain21

ColorTransformationValueSelector_Gain22 = _PySpin.ColorTransformationValueSelector_Gain22

ColorTransformationValueSelector_Offset0 = _PySpin.ColorTransformationValueSelector_Offset0

ColorTransformationValueSelector_Offset1 = _PySpin.ColorTransformationValueSelector_Offset1

ColorTransformationValueSelector_Offset2 = _PySpin.ColorTransformationValueSelector_Offset2

NUM_COLORTRANSFORMATIONVALUESELECTOR = _PySpin.NUM_COLORTRANSFORMATIONVALUESELECTOR

DeviceRegistersEndianness_Little = _PySpin.DeviceRegistersEndianness_Little

DeviceRegistersEndianness_Big = _PySpin.DeviceRegistersEndianness_Big

NUM_DEVICEREGISTERSENDIANNESS = _PySpin.NUM_DEVICEREGISTERSENDIANNESS

DeviceScanType_Areascan = _PySpin.DeviceScanType_Areascan

NUM_DEVICESCANTYPE = _PySpin.NUM_DEVICESCANTYPE

DeviceCharacterSet_UTF8 = _PySpin.DeviceCharacterSet_UTF8

DeviceCharacterSet_ASCII = _PySpin.DeviceCharacterSet_ASCII

NUM_DEVICECHARACTERSET = _PySpin.NUM_DEVICECHARACTERSET

DeviceTLType_GigEVision = _PySpin.DeviceTLType_GigEVision

DeviceTLType_CameraLink = _PySpin.DeviceTLType_CameraLink

DeviceTLType_CameraLinkHS = _PySpin.DeviceTLType_CameraLinkHS

DeviceTLType_CoaXPress = _PySpin.DeviceTLType_CoaXPress

DeviceTLType_USB3Vision = _PySpin.DeviceTLType_USB3Vision

DeviceTLType_Custom = _PySpin.DeviceTLType_Custom

NUM_DEVICETLTYPE = _PySpin.NUM_DEVICETLTYPE

DevicePowerSupplySelector_External = _PySpin.DevicePowerSupplySelector_External

NUM_DEVICEPOWERSUPPLYSELECTOR = _PySpin.NUM_DEVICEPOWERSUPPLYSELECTOR

DeviceTemperatureSelector_Sensor = _PySpin.DeviceTemperatureSelector_Sensor

NUM_DEVICETEMPERATURESELECTOR = _PySpin.NUM_DEVICETEMPERATURESELECTOR

DeviceIndicatorMode_Inactive = _PySpin.DeviceIndicatorMode_Inactive

DeviceIndicatorMode_Active = _PySpin.DeviceIndicatorMode_Active

DeviceIndicatorMode_ErrorStatus = _PySpin.DeviceIndicatorMode_ErrorStatus

NUM_DEVICEINDICATORMODE = _PySpin.NUM_DEVICEINDICATORMODE

AutoExposureControlPriority_Gain = _PySpin.AutoExposureControlPriority_Gain

AutoExposureControlPriority_ExposureTime = _PySpin.AutoExposureControlPriority_ExposureTime

NUM_AUTOEXPOSURECONTROLPRIORITY = _PySpin.NUM_AUTOEXPOSURECONTROLPRIORITY

AutoExposureMeteringMode_Average = _PySpin.AutoExposureMeteringMode_Average

AutoExposureMeteringMode_Spot = _PySpin.AutoExposureMeteringMode_Spot

AutoExposureMeteringMode_Partial = _PySpin.AutoExposureMeteringMode_Partial

AutoExposureMeteringMode_CenterWeighted = _PySpin.AutoExposureMeteringMode_CenterWeighted

AutoExposureMeteringMode_HistgramPeak = _PySpin.AutoExposureMeteringMode_HistgramPeak

NUM_AUTOEXPOSUREMETERINGMODE = _PySpin.NUM_AUTOEXPOSUREMETERINGMODE

BalanceWhiteAutoProfile_Indoor = _PySpin.BalanceWhiteAutoProfile_Indoor

BalanceWhiteAutoProfile_Outdoor = _PySpin.BalanceWhiteAutoProfile_Outdoor

NUM_BALANCEWHITEAUTOPROFILE = _PySpin.NUM_BALANCEWHITEAUTOPROFILE

AutoAlgorithmSelector_Awb = _PySpin.AutoAlgorithmSelector_Awb

AutoAlgorithmSelector_Ae = _PySpin.AutoAlgorithmSelector_Ae

NUM_AUTOALGORITHMSELECTOR = _PySpin.NUM_AUTOALGORITHMSELECTOR

AutoExposureTargetGreyValueAuto_Off = _PySpin.AutoExposureTargetGreyValueAuto_Off

AutoExposureTargetGreyValueAuto_Continuous = _PySpin.AutoExposureTargetGreyValueAuto_Continuous

NUM_AUTOEXPOSURETARGETGREYVALUEAUTO = _PySpin.NUM_AUTOEXPOSURETARGETGREYVALUEAUTO

AutoExposureLightingMode_AutoDetect = _PySpin.AutoExposureLightingMode_AutoDetect

AutoExposureLightingMode_Backlight = _PySpin.AutoExposureLightingMode_Backlight

AutoExposureLightingMode_Frontlight = _PySpin.AutoExposureLightingMode_Frontlight

AutoExposureLightingMode_Normal = _PySpin.AutoExposureLightingMode_Normal

NUM_AUTOEXPOSURELIGHTINGMODE = _PySpin.NUM_AUTOEXPOSURELIGHTINGMODE

GevIEEE1588Status_Initializing = _PySpin.GevIEEE1588Status_Initializing

GevIEEE1588Status_Faulty = _PySpin.GevIEEE1588Status_Faulty

GevIEEE1588Status_Disabled = _PySpin.GevIEEE1588Status_Disabled

GevIEEE1588Status_Listening = _PySpin.GevIEEE1588Status_Listening

GevIEEE1588Status_PreMaster = _PySpin.GevIEEE1588Status_PreMaster

GevIEEE1588Status_Master = _PySpin.GevIEEE1588Status_Master

GevIEEE1588Status_Passive = _PySpin.GevIEEE1588Status_Passive

GevIEEE1588Status_Uncalibrated = _PySpin.GevIEEE1588Status_Uncalibrated

GevIEEE1588Status_Slave = _PySpin.GevIEEE1588Status_Slave

NUM_GEVIEEE1588STATUS = _PySpin.NUM_GEVIEEE1588STATUS

GevIEEE1588Mode_Auto = _PySpin.GevIEEE1588Mode_Auto

GevIEEE1588Mode_SlaveOnly = _PySpin.GevIEEE1588Mode_SlaveOnly

NUM_GEVIEEE1588MODE = _PySpin.NUM_GEVIEEE1588MODE

GevIEEE1588ClockAccuracy_Unknown = _PySpin.GevIEEE1588ClockAccuracy_Unknown

NUM_GEVIEEE1588CLOCKACCURACY = _PySpin.NUM_GEVIEEE1588CLOCKACCURACY

GevCCP_OpenAccess = _PySpin.GevCCP_OpenAccess

GevCCP_ExclusiveAccess = _PySpin.GevCCP_ExclusiveAccess

GevCCP_ControlAccess = _PySpin.GevCCP_ControlAccess

NUM_GEVCCP = _PySpin.NUM_GEVCCP

GevSupportedOptionSelector_UserDefinedName = _PySpin.GevSupportedOptionSelector_UserDefinedName

GevSupportedOptionSelector_SerialNumber = _PySpin.GevSupportedOptionSelector_SerialNumber

GevSupportedOptionSelector_HeartbeatDisable = _PySpin.GevSupportedOptionSelector_HeartbeatDisable

GevSupportedOptionSelector_LinkSpeed = _PySpin.GevSupportedOptionSelector_LinkSpeed

GevSupportedOptionSelector_CCPApplicationSocket = _PySpin.GevSupportedOptionSelector_CCPApplicationSocket

GevSupportedOptionSelector_ManifestTable = _PySpin.GevSupportedOptionSelector_ManifestTable

GevSupportedOptionSelector_TestData = _PySpin.GevSupportedOptionSelector_TestData

GevSupportedOptionSelector_DiscoveryAckDelay = _PySpin.GevSupportedOptionSelector_DiscoveryAckDelay

GevSupportedOptionSelector_DiscoveryAckDelayWritable = _PySpin.GevSupportedOptionSelector_DiscoveryAckDelayWritable

GevSupportedOptionSelector_ExtendedStatusCodes = _PySpin.GevSupportedOptionSelector_ExtendedStatusCodes

GevSupportedOptionSelector_Action = _PySpin.GevSupportedOptionSelector_Action

GevSupportedOptionSelector_PendingAck = _PySpin.GevSupportedOptionSelector_PendingAck

GevSupportedOptionSelector_EventData = _PySpin.GevSupportedOptionSelector_EventData

GevSupportedOptionSelector_Event = _PySpin.GevSupportedOptionSelector_Event

GevSupportedOptionSelector_PacketResend = _PySpin.GevSupportedOptionSelector_PacketResend

GevSupportedOptionSelector_WriteMem = _PySpin.GevSupportedOptionSelector_WriteMem

GevSupportedOptionSelector_CommandsConcatenation = _PySpin.GevSupportedOptionSelector_CommandsConcatenation

GevSupportedOptionSelector_IPConfigurationLLA = _PySpin.GevSupportedOptionSelector_IPConfigurationLLA

GevSupportedOptionSelector_IPConfigurationDHCP = _PySpin.GevSupportedOptionSelector_IPConfigurationDHCP

GevSupportedOptionSelector_IPConfigurationPersistentIP = _PySpin.GevSupportedOptionSelector_IPConfigurationPersistentIP

GevSupportedOptionSelector_StreamChannelSourceSocket = _PySpin.GevSupportedOptionSelector_StreamChannelSourceSocket

GevSupportedOptionSelector_MessageChannelSourceSocket = _PySpin.GevSupportedOptionSelector_MessageChannelSourceSocket

NUM_GEVSUPPORTEDOPTIONSELECTOR = _PySpin.NUM_GEVSUPPORTEDOPTIONSELECTOR

BlackLevelSelector_All = _PySpin.BlackLevelSelector_All

BlackLevelSelector_Analog = _PySpin.BlackLevelSelector_Analog

BlackLevelSelector_Digital = _PySpin.BlackLevelSelector_Digital

NUM_BLACKLEVELSELECTOR = _PySpin.NUM_BLACKLEVELSELECTOR

BalanceWhiteAuto_Off = _PySpin.BalanceWhiteAuto_Off

BalanceWhiteAuto_Once = _PySpin.BalanceWhiteAuto_Once

BalanceWhiteAuto_Continuous = _PySpin.BalanceWhiteAuto_Continuous

NUM_BALANCEWHITEAUTO = _PySpin.NUM_BALANCEWHITEAUTO

GainAuto_Off = _PySpin.GainAuto_Off

GainAuto_Once = _PySpin.GainAuto_Once

GainAuto_Continuous = _PySpin.GainAuto_Continuous

NUM_GAINAUTO = _PySpin.NUM_GAINAUTO

BalanceRatioSelector_Red = _PySpin.BalanceRatioSelector_Red

BalanceRatioSelector_Blue = _PySpin.BalanceRatioSelector_Blue

NUM_BALANCERATIOSELECTOR = _PySpin.NUM_BALANCERATIOSELECTOR

GainSelector_All = _PySpin.GainSelector_All

NUM_GAINSELECTOR = _PySpin.NUM_GAINSELECTOR

DefectCorrectionMode_Average = _PySpin.DefectCorrectionMode_Average

DefectCorrectionMode_Highlight = _PySpin.DefectCorrectionMode_Highlight

DefectCorrectionMode_Zero = _PySpin.DefectCorrectionMode_Zero

NUM_DEFECTCORRECTIONMODE = _PySpin.NUM_DEFECTCORRECTIONMODE

UserSetSelector_Default = _PySpin.UserSetSelector_Default

UserSetSelector_UserSet0 = _PySpin.UserSetSelector_UserSet0

UserSetSelector_UserSet1 = _PySpin.UserSetSelector_UserSet1

NUM_USERSETSELECTOR = _PySpin.NUM_USERSETSELECTOR

UserSetDefault_Default = _PySpin.UserSetDefault_Default

UserSetDefault_UserSet0 = _PySpin.UserSetDefault_UserSet0

UserSetDefault_UserSet1 = _PySpin.UserSetDefault_UserSet1

NUM_USERSETDEFAULT = _PySpin.NUM_USERSETDEFAULT

SerialPortBaudRate_Baud300 = _PySpin.SerialPortBaudRate_Baud300

SerialPortBaudRate_Baud600 = _PySpin.SerialPortBaudRate_Baud600

SerialPortBaudRate_Baud1200 = _PySpin.SerialPortBaudRate_Baud1200

SerialPortBaudRate_Baud2400 = _PySpin.SerialPortBaudRate_Baud2400

SerialPortBaudRate_Baud4800 = _PySpin.SerialPortBaudRate_Baud4800

SerialPortBaudRate_Baud9600 = _PySpin.SerialPortBaudRate_Baud9600

SerialPortBaudRate_Baud14400 = _PySpin.SerialPortBaudRate_Baud14400

SerialPortBaudRate_Baud19200 = _PySpin.SerialPortBaudRate_Baud19200

SerialPortBaudRate_Baud38400 = _PySpin.SerialPortBaudRate_Baud38400

SerialPortBaudRate_Baud57600 = _PySpin.SerialPortBaudRate_Baud57600

SerialPortBaudRate_Baud115200 = _PySpin.SerialPortBaudRate_Baud115200

SerialPortBaudRate_Baud230400 = _PySpin.SerialPortBaudRate_Baud230400

SerialPortBaudRate_Baud460800 = _PySpin.SerialPortBaudRate_Baud460800

SerialPortBaudRate_Baud921600 = _PySpin.SerialPortBaudRate_Baud921600

NUM_SERIALPORTBAUDRATE = _PySpin.NUM_SERIALPORTBAUDRATE

SerialPortParity_None = _PySpin.SerialPortParity_None

SerialPortParity_Odd = _PySpin.SerialPortParity_Odd

SerialPortParity_Even = _PySpin.SerialPortParity_Even

SerialPortParity_Mark = _PySpin.SerialPortParity_Mark

SerialPortParity_Space = _PySpin.SerialPortParity_Space

NUM_SERIALPORTPARITY = _PySpin.NUM_SERIALPORTPARITY

SerialPortSelector_SerialPort0 = _PySpin.SerialPortSelector_SerialPort0

NUM_SERIALPORTSELECTOR = _PySpin.NUM_SERIALPORTSELECTOR

SerialPortStopBits_Bits1 = _PySpin.SerialPortStopBits_Bits1

SerialPortStopBits_Bits1AndAHalf = _PySpin.SerialPortStopBits_Bits1AndAHalf

SerialPortStopBits_Bits2 = _PySpin.SerialPortStopBits_Bits2

NUM_SERIALPORTSTOPBITS = _PySpin.NUM_SERIALPORTSTOPBITS

SerialPortSource_Line0 = _PySpin.SerialPortSource_Line0

SerialPortSource_Line1 = _PySpin.SerialPortSource_Line1

SerialPortSource_Line2 = _PySpin.SerialPortSource_Line2

SerialPortSource_Line3 = _PySpin.SerialPortSource_Line3

SerialPortSource_Off = _PySpin.SerialPortSource_Off

NUM_SERIALPORTSOURCE = _PySpin.NUM_SERIALPORTSOURCE

SequencerMode_Off = _PySpin.SequencerMode_Off

SequencerMode_On = _PySpin.SequencerMode_On

NUM_SEQUENCERMODE = _PySpin.NUM_SEQUENCERMODE

SequencerConfigurationValid_No = _PySpin.SequencerConfigurationValid_No

SequencerConfigurationValid_Yes = _PySpin.SequencerConfigurationValid_Yes

NUM_SEQUENCERCONFIGURATIONVALID = _PySpin.NUM_SEQUENCERCONFIGURATIONVALID

SequencerSetValid_No = _PySpin.SequencerSetValid_No

SequencerSetValid_Yes = _PySpin.SequencerSetValid_Yes

NUM_SEQUENCERSETVALID = _PySpin.NUM_SEQUENCERSETVALID

SequencerTriggerActivation_RisingEdge = _PySpin.SequencerTriggerActivation_RisingEdge

SequencerTriggerActivation_FallingEdge = _PySpin.SequencerTriggerActivation_FallingEdge

SequencerTriggerActivation_AnyEdge = _PySpin.SequencerTriggerActivation_AnyEdge

SequencerTriggerActivation_LevelHigh = _PySpin.SequencerTriggerActivation_LevelHigh

SequencerTriggerActivation_LevelLow = _PySpin.SequencerTriggerActivation_LevelLow

NUM_SEQUENCERTRIGGERACTIVATION = _PySpin.NUM_SEQUENCERTRIGGERACTIVATION

SequencerConfigurationMode_Off = _PySpin.SequencerConfigurationMode_Off

SequencerConfigurationMode_On = _PySpin.SequencerConfigurationMode_On

NUM_SEQUENCERCONFIGURATIONMODE = _PySpin.NUM_SEQUENCERCONFIGURATIONMODE

SequencerTriggerSource_Off = _PySpin.SequencerTriggerSource_Off

SequencerTriggerSource_FrameStart = _PySpin.SequencerTriggerSource_FrameStart

NUM_SEQUENCERTRIGGERSOURCE = _PySpin.NUM_SEQUENCERTRIGGERSOURCE

TransferQueueMode_FirstInFirstOut = _PySpin.TransferQueueMode_FirstInFirstOut

NUM_TRANSFERQUEUEMODE = _PySpin.NUM_TRANSFERQUEUEMODE

TransferOperationMode_Continuous = _PySpin.TransferOperationMode_Continuous

TransferOperationMode_MultiBlock = _PySpin.TransferOperationMode_MultiBlock

NUM_TRANSFEROPERATIONMODE = _PySpin.NUM_TRANSFEROPERATIONMODE

TransferControlMode_Basic = _PySpin.TransferControlMode_Basic

TransferControlMode_Automatic = _PySpin.TransferControlMode_Automatic

TransferControlMode_UserControlled = _PySpin.TransferControlMode_UserControlled

NUM_TRANSFERCONTROLMODE = _PySpin.NUM_TRANSFERCONTROLMODE

ChunkGainSelector_All = _PySpin.ChunkGainSelector_All

ChunkGainSelector_Red = _PySpin.ChunkGainSelector_Red

ChunkGainSelector_Green = _PySpin.ChunkGainSelector_Green

ChunkGainSelector_Blue = _PySpin.ChunkGainSelector_Blue

NUM_CHUNKGAINSELECTOR = _PySpin.NUM_CHUNKGAINSELECTOR

ChunkSelector_Image = _PySpin.ChunkSelector_Image

ChunkSelector_CRC = _PySpin.ChunkSelector_CRC

ChunkSelector_FrameID = _PySpin.ChunkSelector_FrameID

ChunkSelector_OffsetX = _PySpin.ChunkSelector_OffsetX

ChunkSelector_OffsetY = _PySpin.ChunkSelector_OffsetY

ChunkSelector_Width = _PySpin.ChunkSelector_Width

ChunkSelector_Height = _PySpin.ChunkSelector_Height

ChunkSelector_ExposureTime = _PySpin.ChunkSelector_ExposureTime

ChunkSelector_Gain = _PySpin.ChunkSelector_Gain

ChunkSelector_BlackLevel = _PySpin.ChunkSelector_BlackLevel

ChunkSelector_PixelFormat = _PySpin.ChunkSelector_PixelFormat

ChunkSelector_Timestamp = _PySpin.ChunkSelector_Timestamp

ChunkSelector_SequencerSetActive = _PySpin.ChunkSelector_SequencerSetActive

ChunkSelector_SerialData = _PySpin.ChunkSelector_SerialData

ChunkSelector_ExposureEndLineStatusAll = _PySpin.ChunkSelector_ExposureEndLineStatusAll

NUM_CHUNKSELECTOR = _PySpin.NUM_CHUNKSELECTOR

ChunkBlackLevelSelector_All = _PySpin.ChunkBlackLevelSelector_All

NUM_CHUNKBLACKLEVELSELECTOR = _PySpin.NUM_CHUNKBLACKLEVELSELECTOR

ChunkPixelFormat_Mono8 = _PySpin.ChunkPixelFormat_Mono8

ChunkPixelFormat_Mono12Packed = _PySpin.ChunkPixelFormat_Mono12Packed

ChunkPixelFormat_Mono16 = _PySpin.ChunkPixelFormat_Mono16

ChunkPixelFormat_RGB8Packed = _PySpin.ChunkPixelFormat_RGB8Packed

ChunkPixelFormat_YUV422Packed = _PySpin.ChunkPixelFormat_YUV422Packed

ChunkPixelFormat_BayerGR8 = _PySpin.ChunkPixelFormat_BayerGR8

ChunkPixelFormat_BayerRG8 = _PySpin.ChunkPixelFormat_BayerRG8

ChunkPixelFormat_BayerGB8 = _PySpin.ChunkPixelFormat_BayerGB8

ChunkPixelFormat_BayerBG8 = _PySpin.ChunkPixelFormat_BayerBG8

ChunkPixelFormat_YCbCr601_422_8_CbYCrY = _PySpin.ChunkPixelFormat_YCbCr601_422_8_CbYCrY

NUM_CHUNKPIXELFORMAT = _PySpin.NUM_CHUNKPIXELFORMAT

FileOperationStatus_Success = _PySpin.FileOperationStatus_Success

FileOperationStatus_Failure = _PySpin.FileOperationStatus_Failure

FileOperationStatus_Overflow = _PySpin.FileOperationStatus_Overflow

NUM_FILEOPERATIONSTATUS = _PySpin.NUM_FILEOPERATIONSTATUS

FileOpenMode_Read = _PySpin.FileOpenMode_Read

FileOpenMode_Write = _PySpin.FileOpenMode_Write

FileOpenMode_ReadWrite = _PySpin.FileOpenMode_ReadWrite

NUM_FILEOPENMODE = _PySpin.NUM_FILEOPENMODE

FileOperationSelector_Open = _PySpin.FileOperationSelector_Open

FileOperationSelector_Close = _PySpin.FileOperationSelector_Close

FileOperationSelector_Read = _PySpin.FileOperationSelector_Read

FileOperationSelector_Write = _PySpin.FileOperationSelector_Write

FileOperationSelector_Delete = _PySpin.FileOperationSelector_Delete

NUM_FILEOPERATIONSELECTOR = _PySpin.NUM_FILEOPERATIONSELECTOR

FileSelector_UserSetDefault = _PySpin.FileSelector_UserSetDefault

FileSelector_UserSet0 = _PySpin.FileSelector_UserSet0

FileSelector_UserSet1 = _PySpin.FileSelector_UserSet1

FileSelector_UserFile1 = _PySpin.FileSelector_UserFile1

FileSelector_SerialPort0 = _PySpin.FileSelector_SerialPort0

NUM_FILESELECTOR = _PySpin.NUM_FILESELECTOR

BinningSelector_All = _PySpin.BinningSelector_All

BinningSelector_Sensor = _PySpin.BinningSelector_Sensor

BinningSelector_ISP = _PySpin.BinningSelector_ISP

NUM_BINNINGSELECTOR = _PySpin.NUM_BINNINGSELECTOR

TestPatternGeneratorSelector_Sensor = _PySpin.TestPatternGeneratorSelector_Sensor

TestPatternGeneratorSelector_PipelineStart = _PySpin.TestPatternGeneratorSelector_PipelineStart

NUM_TESTPATTERNGENERATORSELECTOR = _PySpin.NUM_TESTPATTERNGENERATORSELECTOR

CompressionSaturationPriority_DropFrame = _PySpin.CompressionSaturationPriority_DropFrame

CompressionSaturationPriority_ReduceFrameRate = _PySpin.CompressionSaturationPriority_ReduceFrameRate

NUM_COMPRESSIONSATURATIONPRIORITY = _PySpin.NUM_COMPRESSIONSATURATIONPRIORITY

TestPattern_Off = _PySpin.TestPattern_Off

TestPattern_Increment = _PySpin.TestPattern_Increment

TestPattern_SensorTestPattern = _PySpin.TestPattern_SensorTestPattern

NUM_TESTPATTERN = _PySpin.NUM_TESTPATTERN

PixelColorFilter_None = _PySpin.PixelColorFilter_None

PixelColorFilter_BayerRG = _PySpin.PixelColorFilter_BayerRG

PixelColorFilter_BayerGB = _PySpin.PixelColorFilter_BayerGB

PixelColorFilter_BayerGR = _PySpin.PixelColorFilter_BayerGR

PixelColorFilter_BayerBG = _PySpin.PixelColorFilter_BayerBG

NUM_PIXELCOLORFILTER = _PySpin.NUM_PIXELCOLORFILTER

AdcBitDepth_Bit8 = _PySpin.AdcBitDepth_Bit8

AdcBitDepth_Bit10 = _PySpin.AdcBitDepth_Bit10

AdcBitDepth_Bit12 = _PySpin.AdcBitDepth_Bit12

AdcBitDepth_Bit14 = _PySpin.AdcBitDepth_Bit14

NUM_ADCBITDEPTH = _PySpin.NUM_ADCBITDEPTH

DecimationHorizontalMode_Discard = _PySpin.DecimationHorizontalMode_Discard

NUM_DECIMATIONHORIZONTALMODE = _PySpin.NUM_DECIMATIONHORIZONTALMODE

BinningVerticalMode_Sum = _PySpin.BinningVerticalMode_Sum

BinningVerticalMode_Average = _PySpin.BinningVerticalMode_Average

NUM_BINNINGVERTICALMODE = _PySpin.NUM_BINNINGVERTICALMODE

PixelSize_Bpp1 = _PySpin.PixelSize_Bpp1

PixelSize_Bpp2 = _PySpin.PixelSize_Bpp2

PixelSize_Bpp4 = _PySpin.PixelSize_Bpp4

PixelSize_Bpp8 = _PySpin.PixelSize_Bpp8

PixelSize_Bpp10 = _PySpin.PixelSize_Bpp10

PixelSize_Bpp12 = _PySpin.PixelSize_Bpp12

PixelSize_Bpp14 = _PySpin.PixelSize_Bpp14

PixelSize_Bpp16 = _PySpin.PixelSize_Bpp16

PixelSize_Bpp20 = _PySpin.PixelSize_Bpp20

PixelSize_Bpp24 = _PySpin.PixelSize_Bpp24

PixelSize_Bpp30 = _PySpin.PixelSize_Bpp30

PixelSize_Bpp32 = _PySpin.PixelSize_Bpp32

PixelSize_Bpp36 = _PySpin.PixelSize_Bpp36

PixelSize_Bpp48 = _PySpin.PixelSize_Bpp48

PixelSize_Bpp64 = _PySpin.PixelSize_Bpp64

PixelSize_Bpp96 = _PySpin.PixelSize_Bpp96

NUM_PIXELSIZE = _PySpin.NUM_PIXELSIZE

DecimationSelector_All = _PySpin.DecimationSelector_All

DecimationSelector_Sensor = _PySpin.DecimationSelector_Sensor

NUM_DECIMATIONSELECTOR = _PySpin.NUM_DECIMATIONSELECTOR

ImageCompressionMode_Off = _PySpin.ImageCompressionMode_Off

ImageCompressionMode_Lossless = _PySpin.ImageCompressionMode_Lossless

NUM_IMAGECOMPRESSIONMODE = _PySpin.NUM_IMAGECOMPRESSIONMODE

BinningHorizontalMode_Sum = _PySpin.BinningHorizontalMode_Sum

BinningHorizontalMode_Average = _PySpin.BinningHorizontalMode_Average

NUM_BINNINGHORIZONTALMODE = _PySpin.NUM_BINNINGHORIZONTALMODE

PixelFormat_Mono8 = _PySpin.PixelFormat_Mono8

PixelFormat_Mono16 = _PySpin.PixelFormat_Mono16

PixelFormat_RGB8Packed = _PySpin.PixelFormat_RGB8Packed

PixelFormat_BayerGR8 = _PySpin.PixelFormat_BayerGR8

PixelFormat_BayerRG8 = _PySpin.PixelFormat_BayerRG8

PixelFormat_BayerGB8 = _PySpin.PixelFormat_BayerGB8

PixelFormat_BayerBG8 = _PySpin.PixelFormat_BayerBG8

PixelFormat_BayerGR16 = _PySpin.PixelFormat_BayerGR16

PixelFormat_BayerRG16 = _PySpin.PixelFormat_BayerRG16

PixelFormat_BayerGB16 = _PySpin.PixelFormat_BayerGB16

PixelFormat_BayerBG16 = _PySpin.PixelFormat_BayerBG16

PixelFormat_Mono12Packed = _PySpin.PixelFormat_Mono12Packed

PixelFormat_BayerGR12Packed = _PySpin.PixelFormat_BayerGR12Packed

PixelFormat_BayerRG12Packed = _PySpin.PixelFormat_BayerRG12Packed

PixelFormat_BayerGB12Packed = _PySpin.PixelFormat_BayerGB12Packed

PixelFormat_BayerBG12Packed = _PySpin.PixelFormat_BayerBG12Packed

PixelFormat_YUV411Packed = _PySpin.PixelFormat_YUV411Packed

PixelFormat_YUV422Packed = _PySpin.PixelFormat_YUV422Packed

PixelFormat_YUV444Packed = _PySpin.PixelFormat_YUV444Packed

PixelFormat_Mono12p = _PySpin.PixelFormat_Mono12p

PixelFormat_BayerGR12p = _PySpin.PixelFormat_BayerGR12p

PixelFormat_BayerRG12p = _PySpin.PixelFormat_BayerRG12p

PixelFormat_BayerGB12p = _PySpin.PixelFormat_BayerGB12p

PixelFormat_BayerBG12p = _PySpin.PixelFormat_BayerBG12p

PixelFormat_YCbCr8 = _PySpin.PixelFormat_YCbCr8

PixelFormat_YCbCr422_8 = _PySpin.PixelFormat_YCbCr422_8

PixelFormat_YCbCr411_8 = _PySpin.PixelFormat_YCbCr411_8

PixelFormat_BGR8 = _PySpin.PixelFormat_BGR8

PixelFormat_BGRa8 = _PySpin.PixelFormat_BGRa8

PixelFormat_Mono10Packed = _PySpin.PixelFormat_Mono10Packed

PixelFormat_BayerGR10Packed = _PySpin.PixelFormat_BayerGR10Packed

PixelFormat_BayerRG10Packed = _PySpin.PixelFormat_BayerRG10Packed

PixelFormat_BayerGB10Packed = _PySpin.PixelFormat_BayerGB10Packed

PixelFormat_BayerBG10Packed = _PySpin.PixelFormat_BayerBG10Packed

PixelFormat_Mono10p = _PySpin.PixelFormat_Mono10p

PixelFormat_BayerGR10p = _PySpin.PixelFormat_BayerGR10p

PixelFormat_BayerRG10p = _PySpin.PixelFormat_BayerRG10p

PixelFormat_BayerGB10p = _PySpin.PixelFormat_BayerGB10p

PixelFormat_BayerBG10p = _PySpin.PixelFormat_BayerBG10p

PixelFormat_Mono1p = _PySpin.PixelFormat_Mono1p

PixelFormat_Mono2p = _PySpin.PixelFormat_Mono2p

PixelFormat_Mono4p = _PySpin.PixelFormat_Mono4p

PixelFormat_Mono8s = _PySpin.PixelFormat_Mono8s

PixelFormat_Mono10 = _PySpin.PixelFormat_Mono10

PixelFormat_Mono12 = _PySpin.PixelFormat_Mono12

PixelFormat_Mono14 = _PySpin.PixelFormat_Mono14

PixelFormat_Mono16s = _PySpin.PixelFormat_Mono16s

PixelFormat_Mono32f = _PySpin.PixelFormat_Mono32f

PixelFormat_BayerBG10 = _PySpin.PixelFormat_BayerBG10

PixelFormat_BayerBG12 = _PySpin.PixelFormat_BayerBG12

PixelFormat_BayerGB10 = _PySpin.PixelFormat_BayerGB10

PixelFormat_BayerGB12 = _PySpin.PixelFormat_BayerGB12

PixelFormat_BayerGR10 = _PySpin.PixelFormat_BayerGR10

PixelFormat_BayerGR12 = _PySpin.PixelFormat_BayerGR12

PixelFormat_BayerRG10 = _PySpin.PixelFormat_BayerRG10

PixelFormat_BayerRG12 = _PySpin.PixelFormat_BayerRG12

PixelFormat_RGBa8 = _PySpin.PixelFormat_RGBa8

PixelFormat_RGBa10 = _PySpin.PixelFormat_RGBa10

PixelFormat_RGBa10p = _PySpin.PixelFormat_RGBa10p

PixelFormat_RGBa12 = _PySpin.PixelFormat_RGBa12

PixelFormat_RGBa12p = _PySpin.PixelFormat_RGBa12p

PixelFormat_RGBa14 = _PySpin.PixelFormat_RGBa14

PixelFormat_RGBa16 = _PySpin.PixelFormat_RGBa16

PixelFormat_RGB8 = _PySpin.PixelFormat_RGB8

PixelFormat_RGB8_Planar = _PySpin.PixelFormat_RGB8_Planar

PixelFormat_RGB10 = _PySpin.PixelFormat_RGB10

PixelFormat_RGB10_Planar = _PySpin.PixelFormat_RGB10_Planar

PixelFormat_RGB10p = _PySpin.PixelFormat_RGB10p

PixelFormat_RGB10p32 = _PySpin.PixelFormat_RGB10p32

PixelFormat_RGB12 = _PySpin.PixelFormat_RGB12

PixelFormat_RGB12_Planar = _PySpin.PixelFormat_RGB12_Planar

PixelFormat_RGB12p = _PySpin.PixelFormat_RGB12p

PixelFormat_RGB14 = _PySpin.PixelFormat_RGB14

PixelFormat_RGB16 = _PySpin.PixelFormat_RGB16

PixelFormat_RGB16s = _PySpin.PixelFormat_RGB16s

PixelFormat_RGB32f = _PySpin.PixelFormat_RGB32f

PixelFormat_RGB16_Planar = _PySpin.PixelFormat_RGB16_Planar

PixelFormat_RGB565p = _PySpin.PixelFormat_RGB565p

PixelFormat_BGRa10 = _PySpin.PixelFormat_BGRa10

PixelFormat_BGRa10p = _PySpin.PixelFormat_BGRa10p

PixelFormat_BGRa12 = _PySpin.PixelFormat_BGRa12

PixelFormat_BGRa12p = _PySpin.PixelFormat_BGRa12p

PixelFormat_BGRa14 = _PySpin.PixelFormat_BGRa14

PixelFormat_BGRa16 = _PySpin.PixelFormat_BGRa16

PixelFormat_RGBa32f = _PySpin.PixelFormat_RGBa32f

PixelFormat_BGR10 = _PySpin.PixelFormat_BGR10

PixelFormat_BGR10p = _PySpin.PixelFormat_BGR10p

PixelFormat_BGR12 = _PySpin.PixelFormat_BGR12

PixelFormat_BGR12p = _PySpin.PixelFormat_BGR12p

PixelFormat_BGR14 = _PySpin.PixelFormat_BGR14

PixelFormat_BGR16 = _PySpin.PixelFormat_BGR16

PixelFormat_BGR565p = _PySpin.PixelFormat_BGR565p

PixelFormat_R8 = _PySpin.PixelFormat_R8

PixelFormat_R10 = _PySpin.PixelFormat_R10

PixelFormat_R12 = _PySpin.PixelFormat_R12

PixelFormat_R16 = _PySpin.PixelFormat_R16

PixelFormat_G8 = _PySpin.PixelFormat_G8

PixelFormat_G10 = _PySpin.PixelFormat_G10

PixelFormat_G12 = _PySpin.PixelFormat_G12

PixelFormat_G16 = _PySpin.PixelFormat_G16

PixelFormat_B8 = _PySpin.PixelFormat_B8

PixelFormat_B10 = _PySpin.PixelFormat_B10

PixelFormat_B12 = _PySpin.PixelFormat_B12

PixelFormat_B16 = _PySpin.PixelFormat_B16

PixelFormat_Coord3D_ABC8 = _PySpin.PixelFormat_Coord3D_ABC8

PixelFormat_Coord3D_ABC8_Planar = _PySpin.PixelFormat_Coord3D_ABC8_Planar

PixelFormat_Coord3D_ABC10p = _PySpin.PixelFormat_Coord3D_ABC10p

PixelFormat_Coord3D_ABC10p_Planar = _PySpin.PixelFormat_Coord3D_ABC10p_Planar

PixelFormat_Coord3D_ABC12p = _PySpin.PixelFormat_Coord3D_ABC12p

PixelFormat_Coord3D_ABC12p_Planar = _PySpin.PixelFormat_Coord3D_ABC12p_Planar

PixelFormat_Coord3D_ABC16 = _PySpin.PixelFormat_Coord3D_ABC16

PixelFormat_Coord3D_ABC16_Planar = _PySpin.PixelFormat_Coord3D_ABC16_Planar

PixelFormat_Coord3D_ABC32f = _PySpin.PixelFormat_Coord3D_ABC32f

PixelFormat_Coord3D_ABC32f_Planar = _PySpin.PixelFormat_Coord3D_ABC32f_Planar

PixelFormat_Coord3D_AC8 = _PySpin.PixelFormat_Coord3D_AC8

PixelFormat_Coord3D_AC8_Planar = _PySpin.PixelFormat_Coord3D_AC8_Planar

PixelFormat_Coord3D_AC10p = _PySpin.PixelFormat_Coord3D_AC10p

PixelFormat_Coord3D_AC10p_Planar = _PySpin.PixelFormat_Coord3D_AC10p_Planar

PixelFormat_Coord3D_AC12p = _PySpin.PixelFormat_Coord3D_AC12p

PixelFormat_Coord3D_AC12p_Planar = _PySpin.PixelFormat_Coord3D_AC12p_Planar

PixelFormat_Coord3D_AC16 = _PySpin.PixelFormat_Coord3D_AC16

PixelFormat_Coord3D_AC16_Planar = _PySpin.PixelFormat_Coord3D_AC16_Planar

PixelFormat_Coord3D_AC32f = _PySpin.PixelFormat_Coord3D_AC32f

PixelFormat_Coord3D_AC32f_Planar = _PySpin.PixelFormat_Coord3D_AC32f_Planar

PixelFormat_Coord3D_A8 = _PySpin.PixelFormat_Coord3D_A8

PixelFormat_Coord3D_A10p = _PySpin.PixelFormat_Coord3D_A10p

PixelFormat_Coord3D_A12p = _PySpin.PixelFormat_Coord3D_A12p

PixelFormat_Coord3D_A16 = _PySpin.PixelFormat_Coord3D_A16

PixelFormat_Coord3D_A32f = _PySpin.PixelFormat_Coord3D_A32f

PixelFormat_Coord3D_B8 = _PySpin.PixelFormat_Coord3D_B8

PixelFormat_Coord3D_B10p = _PySpin.PixelFormat_Coord3D_B10p

PixelFormat_Coord3D_B12p = _PySpin.PixelFormat_Coord3D_B12p

PixelFormat_Coord3D_B16 = _PySpin.PixelFormat_Coord3D_B16

PixelFormat_Coord3D_B32f = _PySpin.PixelFormat_Coord3D_B32f

PixelFormat_Coord3D_C8 = _PySpin.PixelFormat_Coord3D_C8

PixelFormat_Coord3D_C10p = _PySpin.PixelFormat_Coord3D_C10p

PixelFormat_Coord3D_C12p = _PySpin.PixelFormat_Coord3D_C12p

PixelFormat_Coord3D_C16 = _PySpin.PixelFormat_Coord3D_C16

PixelFormat_Coord3D_C32f = _PySpin.PixelFormat_Coord3D_C32f

PixelFormat_Confidence1 = _PySpin.PixelFormat_Confidence1

PixelFormat_Confidence1p = _PySpin.PixelFormat_Confidence1p

PixelFormat_Confidence8 = _PySpin.PixelFormat_Confidence8

PixelFormat_Confidence16 = _PySpin.PixelFormat_Confidence16

PixelFormat_Confidence32f = _PySpin.PixelFormat_Confidence32f

PixelFormat_BiColorBGRG8 = _PySpin.PixelFormat_BiColorBGRG8

PixelFormat_BiColorBGRG10 = _PySpin.PixelFormat_BiColorBGRG10

PixelFormat_BiColorBGRG10p = _PySpin.PixelFormat_BiColorBGRG10p

PixelFormat_BiColorBGRG12 = _PySpin.PixelFormat_BiColorBGRG12

PixelFormat_BiColorBGRG12p = _PySpin.PixelFormat_BiColorBGRG12p

PixelFormat_BiColorRGBG8 = _PySpin.PixelFormat_BiColorRGBG8

PixelFormat_BiColorRGBG10 = _PySpin.PixelFormat_BiColorRGBG10

PixelFormat_BiColorRGBG10p = _PySpin.PixelFormat_BiColorRGBG10p

PixelFormat_BiColorRGBG12 = _PySpin.PixelFormat_BiColorRGBG12

PixelFormat_BiColorRGBG12p = _PySpin.PixelFormat_BiColorRGBG12p

PixelFormat_SCF1WBWG8 = _PySpin.PixelFormat_SCF1WBWG8

PixelFormat_SCF1WBWG10 = _PySpin.PixelFormat_SCF1WBWG10

PixelFormat_SCF1WBWG10p = _PySpin.PixelFormat_SCF1WBWG10p

PixelFormat_SCF1WBWG12 = _PySpin.PixelFormat_SCF1WBWG12

PixelFormat_SCF1WBWG12p = _PySpin.PixelFormat_SCF1WBWG12p

PixelFormat_SCF1WBWG14 = _PySpin.PixelFormat_SCF1WBWG14

PixelFormat_SCF1WBWG16 = _PySpin.PixelFormat_SCF1WBWG16

PixelFormat_SCF1WGWB8 = _PySpin.PixelFormat_SCF1WGWB8

PixelFormat_SCF1WGWB10 = _PySpin.PixelFormat_SCF1WGWB10

PixelFormat_SCF1WGWB10p = _PySpin.PixelFormat_SCF1WGWB10p

PixelFormat_SCF1WGWB12 = _PySpin.PixelFormat_SCF1WGWB12

PixelFormat_SCF1WGWB12p = _PySpin.PixelFormat_SCF1WGWB12p

PixelFormat_SCF1WGWB14 = _PySpin.PixelFormat_SCF1WGWB14

PixelFormat_SCF1WGWB16 = _PySpin.PixelFormat_SCF1WGWB16

PixelFormat_SCF1WGWR8 = _PySpin.PixelFormat_SCF1WGWR8

PixelFormat_SCF1WGWR10 = _PySpin.PixelFormat_SCF1WGWR10

PixelFormat_SCF1WGWR10p = _PySpin.PixelFormat_SCF1WGWR10p

PixelFormat_SCF1WGWR12 = _PySpin.PixelFormat_SCF1WGWR12

PixelFormat_SCF1WGWR12p = _PySpin.PixelFormat_SCF1WGWR12p

PixelFormat_SCF1WGWR14 = _PySpin.PixelFormat_SCF1WGWR14

PixelFormat_SCF1WGWR16 = _PySpin.PixelFormat_SCF1WGWR16

PixelFormat_SCF1WRWG8 = _PySpin.PixelFormat_SCF1WRWG8

PixelFormat_SCF1WRWG10 = _PySpin.PixelFormat_SCF1WRWG10

PixelFormat_SCF1WRWG10p = _PySpin.PixelFormat_SCF1WRWG10p

PixelFormat_SCF1WRWG12 = _PySpin.PixelFormat_SCF1WRWG12

PixelFormat_SCF1WRWG12p = _PySpin.PixelFormat_SCF1WRWG12p

PixelFormat_SCF1WRWG14 = _PySpin.PixelFormat_SCF1WRWG14

PixelFormat_SCF1WRWG16 = _PySpin.PixelFormat_SCF1WRWG16

PixelFormat_YCbCr8_CbYCr = _PySpin.PixelFormat_YCbCr8_CbYCr

PixelFormat_YCbCr10_CbYCr = _PySpin.PixelFormat_YCbCr10_CbYCr

PixelFormat_YCbCr10p_CbYCr = _PySpin.PixelFormat_YCbCr10p_CbYCr

PixelFormat_YCbCr12_CbYCr = _PySpin.PixelFormat_YCbCr12_CbYCr

PixelFormat_YCbCr12p_CbYCr = _PySpin.PixelFormat_YCbCr12p_CbYCr

PixelFormat_YCbCr411_8_CbYYCrYY = _PySpin.PixelFormat_YCbCr411_8_CbYYCrYY

PixelFormat_YCbCr422_8_CbYCrY = _PySpin.PixelFormat_YCbCr422_8_CbYCrY

PixelFormat_YCbCr422_10 = _PySpin.PixelFormat_YCbCr422_10

PixelFormat_YCbCr422_10_CbYCrY = _PySpin.PixelFormat_YCbCr422_10_CbYCrY

PixelFormat_YCbCr422_10p = _PySpin.PixelFormat_YCbCr422_10p

PixelFormat_YCbCr422_10p_CbYCrY = _PySpin.PixelFormat_YCbCr422_10p_CbYCrY

PixelFormat_YCbCr422_12 = _PySpin.PixelFormat_YCbCr422_12

PixelFormat_YCbCr422_12_CbYCrY = _PySpin.PixelFormat_YCbCr422_12_CbYCrY

PixelFormat_YCbCr422_12p = _PySpin.PixelFormat_YCbCr422_12p

PixelFormat_YCbCr422_12p_CbYCrY = _PySpin.PixelFormat_YCbCr422_12p_CbYCrY

PixelFormat_YCbCr601_8_CbYCr = _PySpin.PixelFormat_YCbCr601_8_CbYCr

PixelFormat_YCbCr601_10_CbYCr = _PySpin.PixelFormat_YCbCr601_10_CbYCr

PixelFormat_YCbCr601_10p_CbYCr = _PySpin.PixelFormat_YCbCr601_10p_CbYCr

PixelFormat_YCbCr601_12_CbYCr = _PySpin.PixelFormat_YCbCr601_12_CbYCr

PixelFormat_YCbCr601_12p_CbYCr = _PySpin.PixelFormat_YCbCr601_12p_CbYCr

PixelFormat_YCbCr601_411_8_CbYYCrYY = _PySpin.PixelFormat_YCbCr601_411_8_CbYYCrYY

PixelFormat_YCbCr601_422_8 = _PySpin.PixelFormat_YCbCr601_422_8

PixelFormat_YCbCr601_422_8_CbYCrY = _PySpin.PixelFormat_YCbCr601_422_8_CbYCrY

PixelFormat_YCbCr601_422_10 = _PySpin.PixelFormat_YCbCr601_422_10

PixelFormat_YCbCr601_422_10_CbYCrY = _PySpin.PixelFormat_YCbCr601_422_10_CbYCrY

PixelFormat_YCbCr601_422_10p = _PySpin.PixelFormat_YCbCr601_422_10p

PixelFormat_YCbCr601_422_10p_CbYCrY = _PySpin.PixelFormat_YCbCr601_422_10p_CbYCrY

PixelFormat_YCbCr601_422_12 = _PySpin.PixelFormat_YCbCr601_422_12

PixelFormat_YCbCr601_422_12_CbYCrY = _PySpin.PixelFormat_YCbCr601_422_12_CbYCrY

PixelFormat_YCbCr601_422_12p = _PySpin.PixelFormat_YCbCr601_422_12p

PixelFormat_YCbCr601_422_12p_CbYCrY = _PySpin.PixelFormat_YCbCr601_422_12p_CbYCrY

PixelFormat_YCbCr709_8_CbYCr = _PySpin.PixelFormat_YCbCr709_8_CbYCr

PixelFormat_YCbCr709_10_CbYCr = _PySpin.PixelFormat_YCbCr709_10_CbYCr

PixelFormat_YCbCr709_10p_CbYCr = _PySpin.PixelFormat_YCbCr709_10p_CbYCr

PixelFormat_YCbCr709_12_CbYCr = _PySpin.PixelFormat_YCbCr709_12_CbYCr

PixelFormat_YCbCr709_12p_CbYCr = _PySpin.PixelFormat_YCbCr709_12p_CbYCr

PixelFormat_YCbCr709_411_8_CbYYCrYY = _PySpin.PixelFormat_YCbCr709_411_8_CbYYCrYY

PixelFormat_YCbCr709_422_8 = _PySpin.PixelFormat_YCbCr709_422_8

PixelFormat_YCbCr709_422_8_CbYCrY = _PySpin.PixelFormat_YCbCr709_422_8_CbYCrY

PixelFormat_YCbCr709_422_10 = _PySpin.PixelFormat_YCbCr709_422_10

PixelFormat_YCbCr709_422_10_CbYCrY = _PySpin.PixelFormat_YCbCr709_422_10_CbYCrY

PixelFormat_YCbCr709_422_10p = _PySpin.PixelFormat_YCbCr709_422_10p

PixelFormat_YCbCr709_422_10p_CbYCrY = _PySpin.PixelFormat_YCbCr709_422_10p_CbYCrY

PixelFormat_YCbCr709_422_12 = _PySpin.PixelFormat_YCbCr709_422_12

PixelFormat_YCbCr709_422_12_CbYCrY = _PySpin.PixelFormat_YCbCr709_422_12_CbYCrY

PixelFormat_YCbCr709_422_12p = _PySpin.PixelFormat_YCbCr709_422_12p

PixelFormat_YCbCr709_422_12p_CbYCrY = _PySpin.PixelFormat_YCbCr709_422_12p_CbYCrY

PixelFormat_YUV8_UYV = _PySpin.PixelFormat_YUV8_UYV

PixelFormat_YUV411_8_UYYVYY = _PySpin.PixelFormat_YUV411_8_UYYVYY

PixelFormat_YUV422_8 = _PySpin.PixelFormat_YUV422_8

PixelFormat_YUV422_8_UYVY = _PySpin.PixelFormat_YUV422_8_UYVY

PixelFormat_Polarized8 = _PySpin.PixelFormat_Polarized8

PixelFormat_Polarized10p = _PySpin.PixelFormat_Polarized10p

PixelFormat_Polarized12p = _PySpin.PixelFormat_Polarized12p

PixelFormat_Polarized16 = _PySpin.PixelFormat_Polarized16

PixelFormat_BayerRGPolarized8 = _PySpin.PixelFormat_BayerRGPolarized8

PixelFormat_BayerRGPolarized10p = _PySpin.PixelFormat_BayerRGPolarized10p

PixelFormat_BayerRGPolarized12p = _PySpin.PixelFormat_BayerRGPolarized12p

PixelFormat_BayerRGPolarized16 = _PySpin.PixelFormat_BayerRGPolarized16

PixelFormat_LLCMono8 = _PySpin.PixelFormat_LLCMono8

PixelFormat_LLCBayerRG8 = _PySpin.PixelFormat_LLCBayerRG8

PixelFormat_JPEGMono8 = _PySpin.PixelFormat_JPEGMono8

PixelFormat_JPEGColor8 = _PySpin.PixelFormat_JPEGColor8

PixelFormat_Raw16 = _PySpin.PixelFormat_Raw16

PixelFormat_Raw8 = _PySpin.PixelFormat_Raw8

PixelFormat_R12_Jpeg = _PySpin.PixelFormat_R12_Jpeg

PixelFormat_GR12_Jpeg = _PySpin.PixelFormat_GR12_Jpeg

PixelFormat_GB12_Jpeg = _PySpin.PixelFormat_GB12_Jpeg

PixelFormat_B12_Jpeg = _PySpin.PixelFormat_B12_Jpeg

PixelFormat_GR12 = _PySpin.PixelFormat_GR12

PixelFormat_GB12 = _PySpin.PixelFormat_GB12

UNKNOWN_PIXELFORMAT = _PySpin.UNKNOWN_PIXELFORMAT

NUM_PIXELFORMAT = _PySpin.NUM_PIXELFORMAT

DecimationVerticalMode_Discard = _PySpin.DecimationVerticalMode_Discard

NUM_DECIMATIONVERTICALMODE = _PySpin.NUM_DECIMATIONVERTICALMODE

LineMode_Input = _PySpin.LineMode_Input

LineMode_Output = _PySpin.LineMode_Output

NUM_LINEMODE = _PySpin.NUM_LINEMODE

LineSource_Off = _PySpin.LineSource_Off

LineSource_Line0 = _PySpin.LineSource_Line0

LineSource_Line1 = _PySpin.LineSource_Line1

LineSource_Line2 = _PySpin.LineSource_Line2

LineSource_Line3 = _PySpin.LineSource_Line3

LineSource_UserOutput0 = _PySpin.LineSource_UserOutput0

LineSource_UserOutput1 = _PySpin.LineSource_UserOutput1

LineSource_UserOutput2 = _PySpin.LineSource_UserOutput2

LineSource_UserOutput3 = _PySpin.LineSource_UserOutput3

LineSource_Counter0Active = _PySpin.LineSource_Counter0Active

LineSource_Counter1Active = _PySpin.LineSource_Counter1Active

LineSource_LogicBlock0 = _PySpin.LineSource_LogicBlock0

LineSource_LogicBlock1 = _PySpin.LineSource_LogicBlock1

LineSource_ExposureActive = _PySpin.LineSource_ExposureActive

LineSource_FrameTriggerWait = _PySpin.LineSource_FrameTriggerWait

LineSource_SerialPort0 = _PySpin.LineSource_SerialPort0

LineSource_PPSSignal = _PySpin.LineSource_PPSSignal

LineSource_AllPixel = _PySpin.LineSource_AllPixel

LineSource_AnyPixel = _PySpin.LineSource_AnyPixel

NUM_LINESOURCE = _PySpin.NUM_LINESOURCE

LineInputFilterSelector_Deglitch = _PySpin.LineInputFilterSelector_Deglitch

LineInputFilterSelector_Debounce = _PySpin.LineInputFilterSelector_Debounce

NUM_LINEINPUTFILTERSELECTOR = _PySpin.NUM_LINEINPUTFILTERSELECTOR

UserOutputSelector_UserOutput0 = _PySpin.UserOutputSelector_UserOutput0

UserOutputSelector_UserOutput1 = _PySpin.UserOutputSelector_UserOutput1

UserOutputSelector_UserOutput2 = _PySpin.UserOutputSelector_UserOutput2

UserOutputSelector_UserOutput3 = _PySpin.UserOutputSelector_UserOutput3

NUM_USEROUTPUTSELECTOR = _PySpin.NUM_USEROUTPUTSELECTOR

LineFormat_NoConnect = _PySpin.LineFormat_NoConnect

LineFormat_TriState = _PySpin.LineFormat_TriState

LineFormat_TTL = _PySpin.LineFormat_TTL

LineFormat_LVDS = _PySpin.LineFormat_LVDS

LineFormat_RS422 = _PySpin.LineFormat_RS422

LineFormat_OptoCoupled = _PySpin.LineFormat_OptoCoupled

LineFormat_OpenDrain = _PySpin.LineFormat_OpenDrain

NUM_LINEFORMAT = _PySpin.NUM_LINEFORMAT

LineSelector_Line0 = _PySpin.LineSelector_Line0

LineSelector_Line1 = _PySpin.LineSelector_Line1

LineSelector_Line2 = _PySpin.LineSelector_Line2

LineSelector_Line3 = _PySpin.LineSelector_Line3

NUM_LINESELECTOR = _PySpin.NUM_LINESELECTOR

ExposureActiveMode_Line1 = _PySpin.ExposureActiveMode_Line1

ExposureActiveMode_AnyPixels = _PySpin.ExposureActiveMode_AnyPixels

ExposureActiveMode_AllPixels = _PySpin.ExposureActiveMode_AllPixels

NUM_EXPOSUREACTIVEMODE = _PySpin.NUM_EXPOSUREACTIVEMODE

CounterTriggerActivation_LevelLow = _PySpin.CounterTriggerActivation_LevelLow

CounterTriggerActivation_LevelHigh = _PySpin.CounterTriggerActivation_LevelHigh

CounterTriggerActivation_FallingEdge = _PySpin.CounterTriggerActivation_FallingEdge

CounterTriggerActivation_RisingEdge = _PySpin.CounterTriggerActivation_RisingEdge

CounterTriggerActivation_AnyEdge = _PySpin.CounterTriggerActivation_AnyEdge

NUM_COUNTERTRIGGERACTIVATION = _PySpin.NUM_COUNTERTRIGGERACTIVATION

CounterSelector_Counter0 = _PySpin.CounterSelector_Counter0

CounterSelector_Counter1 = _PySpin.CounterSelector_Counter1

NUM_COUNTERSELECTOR = _PySpin.NUM_COUNTERSELECTOR

CounterStatus_CounterIdle = _PySpin.CounterStatus_CounterIdle

CounterStatus_CounterTriggerWait = _PySpin.CounterStatus_CounterTriggerWait

CounterStatus_CounterActive = _PySpin.CounterStatus_CounterActive

CounterStatus_CounterCompleted = _PySpin.CounterStatus_CounterCompleted

CounterStatus_CounterOverflow = _PySpin.CounterStatus_CounterOverflow

NUM_COUNTERSTATUS = _PySpin.NUM_COUNTERSTATUS

CounterTriggerSource_Off = _PySpin.CounterTriggerSource_Off

CounterTriggerSource_Line0 = _PySpin.CounterTriggerSource_Line0

CounterTriggerSource_Line1 = _PySpin.CounterTriggerSource_Line1

CounterTriggerSource_Line2 = _PySpin.CounterTriggerSource_Line2

CounterTriggerSource_Line3 = _PySpin.CounterTriggerSource_Line3

CounterTriggerSource_UserOutput0 = _PySpin.CounterTriggerSource_UserOutput0

CounterTriggerSource_UserOutput1 = _PySpin.CounterTriggerSource_UserOutput1

CounterTriggerSource_UserOutput2 = _PySpin.CounterTriggerSource_UserOutput2

CounterTriggerSource_UserOutput3 = _PySpin.CounterTriggerSource_UserOutput3

CounterTriggerSource_Counter0Start = _PySpin.CounterTriggerSource_Counter0Start

CounterTriggerSource_Counter1Start = _PySpin.CounterTriggerSource_Counter1Start

CounterTriggerSource_Counter0End = _PySpin.CounterTriggerSource_Counter0End

CounterTriggerSource_Counter1End = _PySpin.CounterTriggerSource_Counter1End

CounterTriggerSource_LogicBlock0 = _PySpin.CounterTriggerSource_LogicBlock0

CounterTriggerSource_LogicBlock1 = _PySpin.CounterTriggerSource_LogicBlock1

CounterTriggerSource_ExposureStart = _PySpin.CounterTriggerSource_ExposureStart

CounterTriggerSource_ExposureEnd = _PySpin.CounterTriggerSource_ExposureEnd

CounterTriggerSource_FrameTriggerWait = _PySpin.CounterTriggerSource_FrameTriggerWait

NUM_COUNTERTRIGGERSOURCE = _PySpin.NUM_COUNTERTRIGGERSOURCE

CounterResetSource_Off = _PySpin.CounterResetSource_Off

CounterResetSource_Line0 = _PySpin.CounterResetSource_Line0

CounterResetSource_Line1 = _PySpin.CounterResetSource_Line1

CounterResetSource_Line2 = _PySpin.CounterResetSource_Line2

CounterResetSource_Line3 = _PySpin.CounterResetSource_Line3

CounterResetSource_UserOutput0 = _PySpin.CounterResetSource_UserOutput0

CounterResetSource_UserOutput1 = _PySpin.CounterResetSource_UserOutput1

CounterResetSource_UserOutput2 = _PySpin.CounterResetSource_UserOutput2

CounterResetSource_UserOutput3 = _PySpin.CounterResetSource_UserOutput3

CounterResetSource_Counter0Start = _PySpin.CounterResetSource_Counter0Start

CounterResetSource_Counter1Start = _PySpin.CounterResetSource_Counter1Start

CounterResetSource_Counter0End = _PySpin.CounterResetSource_Counter0End

CounterResetSource_Counter1End = _PySpin.CounterResetSource_Counter1End

CounterResetSource_LogicBlock0 = _PySpin.CounterResetSource_LogicBlock0

CounterResetSource_LogicBlock1 = _PySpin.CounterResetSource_LogicBlock1

CounterResetSource_ExposureStart = _PySpin.CounterResetSource_ExposureStart

CounterResetSource_ExposureEnd = _PySpin.CounterResetSource_ExposureEnd

CounterResetSource_FrameTriggerWait = _PySpin.CounterResetSource_FrameTriggerWait

NUM_COUNTERRESETSOURCE = _PySpin.NUM_COUNTERRESETSOURCE

CounterEventSource_Off = _PySpin.CounterEventSource_Off

CounterEventSource_MHzTick = _PySpin.CounterEventSource_MHzTick

CounterEventSource_Line0 = _PySpin.CounterEventSource_Line0

CounterEventSource_Line1 = _PySpin.CounterEventSource_Line1

CounterEventSource_Line2 = _PySpin.CounterEventSource_Line2

CounterEventSource_Line3 = _PySpin.CounterEventSource_Line3

CounterEventSource_UserOutput0 = _PySpin.CounterEventSource_UserOutput0

CounterEventSource_UserOutput1 = _PySpin.CounterEventSource_UserOutput1

CounterEventSource_UserOutput2 = _PySpin.CounterEventSource_UserOutput2

CounterEventSource_UserOutput3 = _PySpin.CounterEventSource_UserOutput3

CounterEventSource_Counter0Start = _PySpin.CounterEventSource_Counter0Start

CounterEventSource_Counter1Start = _PySpin.CounterEventSource_Counter1Start

CounterEventSource_Counter0End = _PySpin.CounterEventSource_Counter0End

CounterEventSource_Counter1End = _PySpin.CounterEventSource_Counter1End

CounterEventSource_LogicBlock0 = _PySpin.CounterEventSource_LogicBlock0

CounterEventSource_LogicBlock1 = _PySpin.CounterEventSource_LogicBlock1

CounterEventSource_ExposureStart = _PySpin.CounterEventSource_ExposureStart

CounterEventSource_ExposureEnd = _PySpin.CounterEventSource_ExposureEnd

CounterEventSource_FrameTriggerWait = _PySpin.CounterEventSource_FrameTriggerWait

NUM_COUNTEREVENTSOURCE = _PySpin.NUM_COUNTEREVENTSOURCE

CounterEventActivation_LevelLow = _PySpin.CounterEventActivation_LevelLow

CounterEventActivation_LevelHigh = _PySpin.CounterEventActivation_LevelHigh

CounterEventActivation_FallingEdge = _PySpin.CounterEventActivation_FallingEdge

CounterEventActivation_RisingEdge = _PySpin.CounterEventActivation_RisingEdge

CounterEventActivation_AnyEdge = _PySpin.CounterEventActivation_AnyEdge

NUM_COUNTEREVENTACTIVATION = _PySpin.NUM_COUNTEREVENTACTIVATION

CounterResetActivation_LevelLow = _PySpin.CounterResetActivation_LevelLow

CounterResetActivation_LevelHigh = _PySpin.CounterResetActivation_LevelHigh

CounterResetActivation_FallingEdge = _PySpin.CounterResetActivation_FallingEdge

CounterResetActivation_RisingEdge = _PySpin.CounterResetActivation_RisingEdge

CounterResetActivation_AnyEdge = _PySpin.CounterResetActivation_AnyEdge

NUM_COUNTERRESETACTIVATION = _PySpin.NUM_COUNTERRESETACTIVATION

DeviceType_Transmitter = _PySpin.DeviceType_Transmitter

DeviceType_Receiver = _PySpin.DeviceType_Receiver

DeviceType_Transceiver = _PySpin.DeviceType_Transceiver

DeviceType_Peripheral = _PySpin.DeviceType_Peripheral

NUM_DEVICETYPE = _PySpin.NUM_DEVICETYPE

DeviceConnectionStatus_Active = _PySpin.DeviceConnectionStatus_Active

DeviceConnectionStatus_Inactive = _PySpin.DeviceConnectionStatus_Inactive

NUM_DEVICECONNECTIONSTATUS = _PySpin.NUM_DEVICECONNECTIONSTATUS

DeviceLinkThroughputLimitMode_On = _PySpin.DeviceLinkThroughputLimitMode_On

DeviceLinkThroughputLimitMode_Off = _PySpin.DeviceLinkThroughputLimitMode_Off

NUM_DEVICELINKTHROUGHPUTLIMITMODE = _PySpin.NUM_DEVICELINKTHROUGHPUTLIMITMODE

DeviceLinkHeartbeatMode_On = _PySpin.DeviceLinkHeartbeatMode_On

DeviceLinkHeartbeatMode_Off = _PySpin.DeviceLinkHeartbeatMode_Off

NUM_DEVICELINKHEARTBEATMODE = _PySpin.NUM_DEVICELINKHEARTBEATMODE

DeviceStreamChannelType_Transmitter = _PySpin.DeviceStreamChannelType_Transmitter

DeviceStreamChannelType_Receiver = _PySpin.DeviceStreamChannelType_Receiver

NUM_DEVICESTREAMCHANNELTYPE = _PySpin.NUM_DEVICESTREAMCHANNELTYPE

DeviceStreamChannelEndianness_Big = _PySpin.DeviceStreamChannelEndianness_Big

DeviceStreamChannelEndianness_Little = _PySpin.DeviceStreamChannelEndianness_Little

NUM_DEVICESTREAMCHANNELENDIANNESS = _PySpin.NUM_DEVICESTREAMCHANNELENDIANNESS

DeviceClockSelector_Sensor = _PySpin.DeviceClockSelector_Sensor

DeviceClockSelector_SensorDigitization = _PySpin.DeviceClockSelector_SensorDigitization

DeviceClockSelector_CameraLink = _PySpin.DeviceClockSelector_CameraLink

NUM_DEVICECLOCKSELECTOR = _PySpin.NUM_DEVICECLOCKSELECTOR

DeviceSerialPortSelector_CameraLink = _PySpin.DeviceSerialPortSelector_CameraLink

NUM_DEVICESERIALPORTSELECTOR = _PySpin.NUM_DEVICESERIALPORTSELECTOR

DeviceSerialPortBaudRate_Baud9600 = _PySpin.DeviceSerialPortBaudRate_Baud9600

DeviceSerialPortBaudRate_Baud19200 = _PySpin.DeviceSerialPortBaudRate_Baud19200

DeviceSerialPortBaudRate_Baud38400 = _PySpin.DeviceSerialPortBaudRate_Baud38400

DeviceSerialPortBaudRate_Baud57600 = _PySpin.DeviceSerialPortBaudRate_Baud57600

DeviceSerialPortBaudRate_Baud115200 = _PySpin.DeviceSerialPortBaudRate_Baud115200

DeviceSerialPortBaudRate_Baud230400 = _PySpin.DeviceSerialPortBaudRate_Baud230400

DeviceSerialPortBaudRate_Baud460800 = _PySpin.DeviceSerialPortBaudRate_Baud460800

DeviceSerialPortBaudRate_Baud921600 = _PySpin.DeviceSerialPortBaudRate_Baud921600

NUM_DEVICESERIALPORTBAUDRATE = _PySpin.NUM_DEVICESERIALPORTBAUDRATE

SensorTaps_One = _PySpin.SensorTaps_One

SensorTaps_Two = _PySpin.SensorTaps_Two

SensorTaps_Three = _PySpin.SensorTaps_Three

SensorTaps_Four = _PySpin.SensorTaps_Four

SensorTaps_Eight = _PySpin.SensorTaps_Eight

SensorTaps_Ten = _PySpin.SensorTaps_Ten

NUM_SENSORTAPS = _PySpin.NUM_SENSORTAPS

SensorDigitizationTaps_One = _PySpin.SensorDigitizationTaps_One

SensorDigitizationTaps_Two = _PySpin.SensorDigitizationTaps_Two

SensorDigitizationTaps_Three = _PySpin.SensorDigitizationTaps_Three

SensorDigitizationTaps_Four = _PySpin.SensorDigitizationTaps_Four

SensorDigitizationTaps_Eight = _PySpin.SensorDigitizationTaps_Eight

SensorDigitizationTaps_Ten = _PySpin.SensorDigitizationTaps_Ten

NUM_SENSORDIGITIZATIONTAPS = _PySpin.NUM_SENSORDIGITIZATIONTAPS

RegionSelector_Region0 = _PySpin.RegionSelector_Region0

RegionSelector_Region1 = _PySpin.RegionSelector_Region1

RegionSelector_Region2 = _PySpin.RegionSelector_Region2

RegionSelector_All = _PySpin.RegionSelector_All

NUM_REGIONSELECTOR = _PySpin.NUM_REGIONSELECTOR

RegionMode_Off = _PySpin.RegionMode_Off

RegionMode_On = _PySpin.RegionMode_On

NUM_REGIONMODE = _PySpin.NUM_REGIONMODE

RegionDestination_Stream0 = _PySpin.RegionDestination_Stream0

RegionDestination_Stream1 = _PySpin.RegionDestination_Stream1

RegionDestination_Stream2 = _PySpin.RegionDestination_Stream2

NUM_REGIONDESTINATION = _PySpin.NUM_REGIONDESTINATION

ImageComponentSelector_Intensity = _PySpin.ImageComponentSelector_Intensity

ImageComponentSelector_Color = _PySpin.ImageComponentSelector_Color

ImageComponentSelector_Infrared = _PySpin.ImageComponentSelector_Infrared

ImageComponentSelector_Ultraviolet = _PySpin.ImageComponentSelector_Ultraviolet

ImageComponentSelector_Range = _PySpin.ImageComponentSelector_Range

ImageComponentSelector_Disparity = _PySpin.ImageComponentSelector_Disparity

ImageComponentSelector_Confidence = _PySpin.ImageComponentSelector_Confidence

ImageComponentSelector_Scatter = _PySpin.ImageComponentSelector_Scatter

NUM_IMAGECOMPONENTSELECTOR = _PySpin.NUM_IMAGECOMPONENTSELECTOR

PixelFormatInfoSelector_Mono1p = _PySpin.PixelFormatInfoSelector_Mono1p

PixelFormatInfoSelector_Mono2p = _PySpin.PixelFormatInfoSelector_Mono2p

PixelFormatInfoSelector_Mono4p = _PySpin.PixelFormatInfoSelector_Mono4p

PixelFormatInfoSelector_Mono8 = _PySpin.PixelFormatInfoSelector_Mono8

PixelFormatInfoSelector_Mono8s = _PySpin.PixelFormatInfoSelector_Mono8s

PixelFormatInfoSelector_Mono10 = _PySpin.PixelFormatInfoSelector_Mono10

PixelFormatInfoSelector_Mono10p = _PySpin.PixelFormatInfoSelector_Mono10p

PixelFormatInfoSelector_Mono12 = _PySpin.PixelFormatInfoSelector_Mono12

PixelFormatInfoSelector_Mono12p = _PySpin.PixelFormatInfoSelector_Mono12p

PixelFormatInfoSelector_Mono14 = _PySpin.PixelFormatInfoSelector_Mono14

PixelFormatInfoSelector_Mono16 = _PySpin.PixelFormatInfoSelector_Mono16

PixelFormatInfoSelector_Mono16s = _PySpin.PixelFormatInfoSelector_Mono16s

PixelFormatInfoSelector_Mono32f = _PySpin.PixelFormatInfoSelector_Mono32f

PixelFormatInfoSelector_BayerBG8 = _PySpin.PixelFormatInfoSelector_BayerBG8

PixelFormatInfoSelector_BayerBG10 = _PySpin.PixelFormatInfoSelector_BayerBG10

PixelFormatInfoSelector_BayerBG10p = _PySpin.PixelFormatInfoSelector_BayerBG10p

PixelFormatInfoSelector_BayerBG12 = _PySpin.PixelFormatInfoSelector_BayerBG12

PixelFormatInfoSelector_BayerBG12p = _PySpin.PixelFormatInfoSelector_BayerBG12p

PixelFormatInfoSelector_BayerBG16 = _PySpin.PixelFormatInfoSelector_BayerBG16

PixelFormatInfoSelector_BayerGB8 = _PySpin.PixelFormatInfoSelector_BayerGB8

PixelFormatInfoSelector_BayerGB10 = _PySpin.PixelFormatInfoSelector_BayerGB10

PixelFormatInfoSelector_BayerGB10p = _PySpin.PixelFormatInfoSelector_BayerGB10p

PixelFormatInfoSelector_BayerGB12 = _PySpin.PixelFormatInfoSelector_BayerGB12

PixelFormatInfoSelector_BayerGB12p = _PySpin.PixelFormatInfoSelector_BayerGB12p

PixelFormatInfoSelector_BayerGB16 = _PySpin.PixelFormatInfoSelector_BayerGB16

PixelFormatInfoSelector_BayerGR8 = _PySpin.PixelFormatInfoSelector_BayerGR8

PixelFormatInfoSelector_BayerGR10 = _PySpin.PixelFormatInfoSelector_BayerGR10

PixelFormatInfoSelector_BayerGR10p = _PySpin.PixelFormatInfoSelector_BayerGR10p

PixelFormatInfoSelector_BayerGR12 = _PySpin.PixelFormatInfoSelector_BayerGR12

PixelFormatInfoSelector_BayerGR12p = _PySpin.PixelFormatInfoSelector_BayerGR12p

PixelFormatInfoSelector_BayerGR16 = _PySpin.PixelFormatInfoSelector_BayerGR16

PixelFormatInfoSelector_BayerRG8 = _PySpin.PixelFormatInfoSelector_BayerRG8

PixelFormatInfoSelector_BayerRG10 = _PySpin.PixelFormatInfoSelector_BayerRG10

PixelFormatInfoSelector_BayerRG10p = _PySpin.PixelFormatInfoSelector_BayerRG10p

PixelFormatInfoSelector_BayerRG12 = _PySpin.PixelFormatInfoSelector_BayerRG12

PixelFormatInfoSelector_BayerRG12p = _PySpin.PixelFormatInfoSelector_BayerRG12p

PixelFormatInfoSelector_BayerRG16 = _PySpin.PixelFormatInfoSelector_BayerRG16

PixelFormatInfoSelector_RGBa8 = _PySpin.PixelFormatInfoSelector_RGBa8

PixelFormatInfoSelector_RGBa10 = _PySpin.PixelFormatInfoSelector_RGBa10

PixelFormatInfoSelector_RGBa10p = _PySpin.PixelFormatInfoSelector_RGBa10p

PixelFormatInfoSelector_RGBa12 = _PySpin.PixelFormatInfoSelector_RGBa12

PixelFormatInfoSelector_RGBa12p = _PySpin.PixelFormatInfoSelector_RGBa12p

PixelFormatInfoSelector_RGBa14 = _PySpin.PixelFormatInfoSelector_RGBa14

PixelFormatInfoSelector_RGBa16 = _PySpin.PixelFormatInfoSelector_RGBa16

PixelFormatInfoSelector_RGB8 = _PySpin.PixelFormatInfoSelector_RGB8

PixelFormatInfoSelector_RGB8_Planar = _PySpin.PixelFormatInfoSelector_RGB8_Planar

PixelFormatInfoSelector_RGB10 = _PySpin.PixelFormatInfoSelector_RGB10

PixelFormatInfoSelector_RGB10_Planar = _PySpin.PixelFormatInfoSelector_RGB10_Planar

PixelFormatInfoSelector_RGB10p = _PySpin.PixelFormatInfoSelector_RGB10p

PixelFormatInfoSelector_RGB10p32 = _PySpin.PixelFormatInfoSelector_RGB10p32

PixelFormatInfoSelector_RGB12 = _PySpin.PixelFormatInfoSelector_RGB12

PixelFormatInfoSelector_RGB12_Planar = _PySpin.PixelFormatInfoSelector_RGB12_Planar

PixelFormatInfoSelector_RGB12p = _PySpin.PixelFormatInfoSelector_RGB12p

PixelFormatInfoSelector_RGB14 = _PySpin.PixelFormatInfoSelector_RGB14

PixelFormatInfoSelector_RGB16 = _PySpin.PixelFormatInfoSelector_RGB16

PixelFormatInfoSelector_RGB16s = _PySpin.PixelFormatInfoSelector_RGB16s

PixelFormatInfoSelector_RGB32f = _PySpin.PixelFormatInfoSelector_RGB32f

PixelFormatInfoSelector_RGB16_Planar = _PySpin.PixelFormatInfoSelector_RGB16_Planar

PixelFormatInfoSelector_RGB565p = _PySpin.PixelFormatInfoSelector_RGB565p

PixelFormatInfoSelector_BGRa8 = _PySpin.PixelFormatInfoSelector_BGRa8

PixelFormatInfoSelector_BGRa10 = _PySpin.PixelFormatInfoSelector_BGRa10

PixelFormatInfoSelector_BGRa10p = _PySpin.PixelFormatInfoSelector_BGRa10p

PixelFormatInfoSelector_BGRa12 = _PySpin.PixelFormatInfoSelector_BGRa12

PixelFormatInfoSelector_BGRa12p = _PySpin.PixelFormatInfoSelector_BGRa12p

PixelFormatInfoSelector_BGRa14 = _PySpin.PixelFormatInfoSelector_BGRa14

PixelFormatInfoSelector_BGRa16 = _PySpin.PixelFormatInfoSelector_BGRa16

PixelFormatInfoSelector_RGBa32f = _PySpin.PixelFormatInfoSelector_RGBa32f

PixelFormatInfoSelector_BGR8 = _PySpin.PixelFormatInfoSelector_BGR8

PixelFormatInfoSelector_BGR10 = _PySpin.PixelFormatInfoSelector_BGR10

PixelFormatInfoSelector_BGR10p = _PySpin.PixelFormatInfoSelector_BGR10p

PixelFormatInfoSelector_BGR12 = _PySpin.PixelFormatInfoSelector_BGR12

PixelFormatInfoSelector_BGR12p = _PySpin.PixelFormatInfoSelector_BGR12p

PixelFormatInfoSelector_BGR14 = _PySpin.PixelFormatInfoSelector_BGR14

PixelFormatInfoSelector_BGR16 = _PySpin.PixelFormatInfoSelector_BGR16

PixelFormatInfoSelector_BGR565p = _PySpin.PixelFormatInfoSelector_BGR565p

PixelFormatInfoSelector_R8 = _PySpin.PixelFormatInfoSelector_R8

PixelFormatInfoSelector_R10 = _PySpin.PixelFormatInfoSelector_R10

PixelFormatInfoSelector_R12 = _PySpin.PixelFormatInfoSelector_R12

PixelFormatInfoSelector_R16 = _PySpin.PixelFormatInfoSelector_R16

PixelFormatInfoSelector_G8 = _PySpin.PixelFormatInfoSelector_G8

PixelFormatInfoSelector_G10 = _PySpin.PixelFormatInfoSelector_G10

PixelFormatInfoSelector_G12 = _PySpin.PixelFormatInfoSelector_G12

PixelFormatInfoSelector_G16 = _PySpin.PixelFormatInfoSelector_G16

PixelFormatInfoSelector_B8 = _PySpin.PixelFormatInfoSelector_B8

PixelFormatInfoSelector_B10 = _PySpin.PixelFormatInfoSelector_B10

PixelFormatInfoSelector_B12 = _PySpin.PixelFormatInfoSelector_B12

PixelFormatInfoSelector_B16 = _PySpin.PixelFormatInfoSelector_B16

PixelFormatInfoSelector_Coord3D_ABC8 = _PySpin.PixelFormatInfoSelector_Coord3D_ABC8

PixelFormatInfoSelector_Coord3D_ABC8_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_ABC8_Planar

PixelFormatInfoSelector_Coord3D_ABC10p = _PySpin.PixelFormatInfoSelector_Coord3D_ABC10p

PixelFormatInfoSelector_Coord3D_ABC10p_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_ABC10p_Planar

PixelFormatInfoSelector_Coord3D_ABC12p = _PySpin.PixelFormatInfoSelector_Coord3D_ABC12p

PixelFormatInfoSelector_Coord3D_ABC12p_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_ABC12p_Planar

PixelFormatInfoSelector_Coord3D_ABC16 = _PySpin.PixelFormatInfoSelector_Coord3D_ABC16

PixelFormatInfoSelector_Coord3D_ABC16_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_ABC16_Planar

PixelFormatInfoSelector_Coord3D_ABC32f = _PySpin.PixelFormatInfoSelector_Coord3D_ABC32f

PixelFormatInfoSelector_Coord3D_ABC32f_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_ABC32f_Planar

PixelFormatInfoSelector_Coord3D_AC8 = _PySpin.PixelFormatInfoSelector_Coord3D_AC8

PixelFormatInfoSelector_Coord3D_AC8_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_AC8_Planar

PixelFormatInfoSelector_Coord3D_AC10p = _PySpin.PixelFormatInfoSelector_Coord3D_AC10p

PixelFormatInfoSelector_Coord3D_AC10p_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_AC10p_Planar

PixelFormatInfoSelector_Coord3D_AC12p = _PySpin.PixelFormatInfoSelector_Coord3D_AC12p

PixelFormatInfoSelector_Coord3D_AC12p_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_AC12p_Planar

PixelFormatInfoSelector_Coord3D_AC16 = _PySpin.PixelFormatInfoSelector_Coord3D_AC16

PixelFormatInfoSelector_Coord3D_AC16_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_AC16_Planar

PixelFormatInfoSelector_Coord3D_AC32f = _PySpin.PixelFormatInfoSelector_Coord3D_AC32f

PixelFormatInfoSelector_Coord3D_AC32f_Planar = _PySpin.PixelFormatInfoSelector_Coord3D_AC32f_Planar

PixelFormatInfoSelector_Coord3D_A8 = _PySpin.PixelFormatInfoSelector_Coord3D_A8

PixelFormatInfoSelector_Coord3D_A10p = _PySpin.PixelFormatInfoSelector_Coord3D_A10p

PixelFormatInfoSelector_Coord3D_A12p = _PySpin.PixelFormatInfoSelector_Coord3D_A12p

PixelFormatInfoSelector_Coord3D_A16 = _PySpin.PixelFormatInfoSelector_Coord3D_A16

PixelFormatInfoSelector_Coord3D_A32f = _PySpin.PixelFormatInfoSelector_Coord3D_A32f

PixelFormatInfoSelector_Coord3D_B8 = _PySpin.PixelFormatInfoSelector_Coord3D_B8

PixelFormatInfoSelector_Coord3D_B10p = _PySpin.PixelFormatInfoSelector_Coord3D_B10p

PixelFormatInfoSelector_Coord3D_B12p = _PySpin.PixelFormatInfoSelector_Coord3D_B12p

PixelFormatInfoSelector_Coord3D_B16 = _PySpin.PixelFormatInfoSelector_Coord3D_B16

PixelFormatInfoSelector_Coord3D_B32f = _PySpin.PixelFormatInfoSelector_Coord3D_B32f

PixelFormatInfoSelector_Coord3D_C8 = _PySpin.PixelFormatInfoSelector_Coord3D_C8

PixelFormatInfoSelector_Coord3D_C10p = _PySpin.PixelFormatInfoSelector_Coord3D_C10p

PixelFormatInfoSelector_Coord3D_C12p = _PySpin.PixelFormatInfoSelector_Coord3D_C12p

PixelFormatInfoSelector_Coord3D_C16 = _PySpin.PixelFormatInfoSelector_Coord3D_C16

PixelFormatInfoSelector_Coord3D_C32f = _PySpin.PixelFormatInfoSelector_Coord3D_C32f

PixelFormatInfoSelector_Confidence1 = _PySpin.PixelFormatInfoSelector_Confidence1

PixelFormatInfoSelector_Confidence1p = _PySpin.PixelFormatInfoSelector_Confidence1p

PixelFormatInfoSelector_Confidence8 = _PySpin.PixelFormatInfoSelector_Confidence8

PixelFormatInfoSelector_Confidence16 = _PySpin.PixelFormatInfoSelector_Confidence16

PixelFormatInfoSelector_Confidence32f = _PySpin.PixelFormatInfoSelector_Confidence32f

PixelFormatInfoSelector_BiColorBGRG8 = _PySpin.PixelFormatInfoSelector_BiColorBGRG8

PixelFormatInfoSelector_BiColorBGRG10 = _PySpin.PixelFormatInfoSelector_BiColorBGRG10

PixelFormatInfoSelector_BiColorBGRG10p = _PySpin.PixelFormatInfoSelector_BiColorBGRG10p

PixelFormatInfoSelector_BiColorBGRG12 = _PySpin.PixelFormatInfoSelector_BiColorBGRG12

PixelFormatInfoSelector_BiColorBGRG12p = _PySpin.PixelFormatInfoSelector_BiColorBGRG12p

PixelFormatInfoSelector_BiColorRGBG8 = _PySpin.PixelFormatInfoSelector_BiColorRGBG8

PixelFormatInfoSelector_BiColorRGBG10 = _PySpin.PixelFormatInfoSelector_BiColorRGBG10

PixelFormatInfoSelector_BiColorRGBG10p = _PySpin.PixelFormatInfoSelector_BiColorRGBG10p

PixelFormatInfoSelector_BiColorRGBG12 = _PySpin.PixelFormatInfoSelector_BiColorRGBG12

PixelFormatInfoSelector_BiColorRGBG12p = _PySpin.PixelFormatInfoSelector_BiColorRGBG12p

PixelFormatInfoSelector_SCF1WBWG8 = _PySpin.PixelFormatInfoSelector_SCF1WBWG8

PixelFormatInfoSelector_SCF1WBWG10 = _PySpin.PixelFormatInfoSelector_SCF1WBWG10

PixelFormatInfoSelector_SCF1WBWG10p = _PySpin.PixelFormatInfoSelector_SCF1WBWG10p

PixelFormatInfoSelector_SCF1WBWG12 = _PySpin.PixelFormatInfoSelector_SCF1WBWG12

PixelFormatInfoSelector_SCF1WBWG12p = _PySpin.PixelFormatInfoSelector_SCF1WBWG12p

PixelFormatInfoSelector_SCF1WBWG14 = _PySpin.PixelFormatInfoSelector_SCF1WBWG14

PixelFormatInfoSelector_SCF1WBWG16 = _PySpin.PixelFormatInfoSelector_SCF1WBWG16

PixelFormatInfoSelector_SCF1WGWB8 = _PySpin.PixelFormatInfoSelector_SCF1WGWB8

PixelFormatInfoSelector_SCF1WGWB10 = _PySpin.PixelFormatInfoSelector_SCF1WGWB10

PixelFormatInfoSelector_SCF1WGWB10p = _PySpin.PixelFormatInfoSelector_SCF1WGWB10p

PixelFormatInfoSelector_SCF1WGWB12 = _PySpin.PixelFormatInfoSelector_SCF1WGWB12

PixelFormatInfoSelector_SCF1WGWB12p = _PySpin.PixelFormatInfoSelector_SCF1WGWB12p

PixelFormatInfoSelector_SCF1WGWB14 = _PySpin.PixelFormatInfoSelector_SCF1WGWB14

PixelFormatInfoSelector_SCF1WGWB16 = _PySpin.PixelFormatInfoSelector_SCF1WGWB16

PixelFormatInfoSelector_SCF1WGWR8 = _PySpin.PixelFormatInfoSelector_SCF1WGWR8

PixelFormatInfoSelector_SCF1WGWR10 = _PySpin.PixelFormatInfoSelector_SCF1WGWR10

PixelFormatInfoSelector_SCF1WGWR10p = _PySpin.PixelFormatInfoSelector_SCF1WGWR10p

PixelFormatInfoSelector_SCF1WGWR12 = _PySpin.PixelFormatInfoSelector_SCF1WGWR12

PixelFormatInfoSelector_SCF1WGWR12p = _PySpin.PixelFormatInfoSelector_SCF1WGWR12p

PixelFormatInfoSelector_SCF1WGWR14 = _PySpin.PixelFormatInfoSelector_SCF1WGWR14

PixelFormatInfoSelector_SCF1WGWR16 = _PySpin.PixelFormatInfoSelector_SCF1WGWR16

PixelFormatInfoSelector_SCF1WRWG8 = _PySpin.PixelFormatInfoSelector_SCF1WRWG8

PixelFormatInfoSelector_SCF1WRWG10 = _PySpin.PixelFormatInfoSelector_SCF1WRWG10

PixelFormatInfoSelector_SCF1WRWG10p = _PySpin.PixelFormatInfoSelector_SCF1WRWG10p

PixelFormatInfoSelector_SCF1WRWG12 = _PySpin.PixelFormatInfoSelector_SCF1WRWG12

PixelFormatInfoSelector_SCF1WRWG12p = _PySpin.PixelFormatInfoSelector_SCF1WRWG12p

PixelFormatInfoSelector_SCF1WRWG14 = _PySpin.PixelFormatInfoSelector_SCF1WRWG14

PixelFormatInfoSelector_SCF1WRWG16 = _PySpin.PixelFormatInfoSelector_SCF1WRWG16

PixelFormatInfoSelector_YCbCr8 = _PySpin.PixelFormatInfoSelector_YCbCr8

PixelFormatInfoSelector_YCbCr8_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr8_CbYCr

PixelFormatInfoSelector_YCbCr10_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr10_CbYCr

PixelFormatInfoSelector_YCbCr10p_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr10p_CbYCr

PixelFormatInfoSelector_YCbCr12_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr12_CbYCr

PixelFormatInfoSelector_YCbCr12p_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr12p_CbYCr

PixelFormatInfoSelector_YCbCr411_8 = _PySpin.PixelFormatInfoSelector_YCbCr411_8

PixelFormatInfoSelector_YCbCr411_8_CbYYCrYY = _PySpin.PixelFormatInfoSelector_YCbCr411_8_CbYYCrYY

PixelFormatInfoSelector_YCbCr422_8 = _PySpin.PixelFormatInfoSelector_YCbCr422_8

PixelFormatInfoSelector_YCbCr422_8_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr422_8_CbYCrY

PixelFormatInfoSelector_YCbCr422_10 = _PySpin.PixelFormatInfoSelector_YCbCr422_10

PixelFormatInfoSelector_YCbCr422_10_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr422_10_CbYCrY

PixelFormatInfoSelector_YCbCr422_10p = _PySpin.PixelFormatInfoSelector_YCbCr422_10p

PixelFormatInfoSelector_YCbCr422_10p_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr422_10p_CbYCrY

PixelFormatInfoSelector_YCbCr422_12 = _PySpin.PixelFormatInfoSelector_YCbCr422_12

PixelFormatInfoSelector_YCbCr422_12_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr422_12_CbYCrY

PixelFormatInfoSelector_YCbCr422_12p = _PySpin.PixelFormatInfoSelector_YCbCr422_12p

PixelFormatInfoSelector_YCbCr422_12p_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr422_12p_CbYCrY

PixelFormatInfoSelector_YCbCr601_8_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr601_8_CbYCr

PixelFormatInfoSelector_YCbCr601_10_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr601_10_CbYCr

PixelFormatInfoSelector_YCbCr601_10p_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr601_10p_CbYCr

PixelFormatInfoSelector_YCbCr601_12_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr601_12_CbYCr

PixelFormatInfoSelector_YCbCr601_12p_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr601_12p_CbYCr

PixelFormatInfoSelector_YCbCr601_411_8_CbYYCrYY = _PySpin.PixelFormatInfoSelector_YCbCr601_411_8_CbYYCrYY

PixelFormatInfoSelector_YCbCr601_422_8 = _PySpin.PixelFormatInfoSelector_YCbCr601_422_8

PixelFormatInfoSelector_YCbCr601_422_8_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr601_422_8_CbYCrY

PixelFormatInfoSelector_YCbCr601_422_10 = _PySpin.PixelFormatInfoSelector_YCbCr601_422_10

PixelFormatInfoSelector_YCbCr601_422_10_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr601_422_10_CbYCrY

PixelFormatInfoSelector_YCbCr601_422_10p = _PySpin.PixelFormatInfoSelector_YCbCr601_422_10p

PixelFormatInfoSelector_YCbCr601_422_10p_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr601_422_10p_CbYCrY

PixelFormatInfoSelector_YCbCr601_422_12 = _PySpin.PixelFormatInfoSelector_YCbCr601_422_12

PixelFormatInfoSelector_YCbCr601_422_12_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr601_422_12_CbYCrY

PixelFormatInfoSelector_YCbCr601_422_12p = _PySpin.PixelFormatInfoSelector_YCbCr601_422_12p

PixelFormatInfoSelector_YCbCr601_422_12p_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr601_422_12p_CbYCrY

PixelFormatInfoSelector_YCbCr709_8_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr709_8_CbYCr

PixelFormatInfoSelector_YCbCr709_10_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr709_10_CbYCr

PixelFormatInfoSelector_YCbCr709_10p_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr709_10p_CbYCr

PixelFormatInfoSelector_YCbCr709_12_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr709_12_CbYCr

PixelFormatInfoSelector_YCbCr709_12p_CbYCr = _PySpin.PixelFormatInfoSelector_YCbCr709_12p_CbYCr

PixelFormatInfoSelector_YCbCr709_411_8_CbYYCrYY = _PySpin.PixelFormatInfoSelector_YCbCr709_411_8_CbYYCrYY

PixelFormatInfoSelector_YCbCr709_422_8 = _PySpin.PixelFormatInfoSelector_YCbCr709_422_8

PixelFormatInfoSelector_YCbCr709_422_8_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr709_422_8_CbYCrY

PixelFormatInfoSelector_YCbCr709_422_10 = _PySpin.PixelFormatInfoSelector_YCbCr709_422_10

PixelFormatInfoSelector_YCbCr709_422_10_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr709_422_10_CbYCrY

PixelFormatInfoSelector_YCbCr709_422_10p = _PySpin.PixelFormatInfoSelector_YCbCr709_422_10p

PixelFormatInfoSelector_YCbCr709_422_10p_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr709_422_10p_CbYCrY

PixelFormatInfoSelector_YCbCr709_422_12 = _PySpin.PixelFormatInfoSelector_YCbCr709_422_12

PixelFormatInfoSelector_YCbCr709_422_12_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr709_422_12_CbYCrY

PixelFormatInfoSelector_YCbCr709_422_12p = _PySpin.PixelFormatInfoSelector_YCbCr709_422_12p

PixelFormatInfoSelector_YCbCr709_422_12p_CbYCrY = _PySpin.PixelFormatInfoSelector_YCbCr709_422_12p_CbYCrY

PixelFormatInfoSelector_YUV8_UYV = _PySpin.PixelFormatInfoSelector_YUV8_UYV

PixelFormatInfoSelector_YUV411_8_UYYVYY = _PySpin.PixelFormatInfoSelector_YUV411_8_UYYVYY

PixelFormatInfoSelector_YUV422_8 = _PySpin.PixelFormatInfoSelector_YUV422_8

PixelFormatInfoSelector_YUV422_8_UYVY = _PySpin.PixelFormatInfoSelector_YUV422_8_UYVY

PixelFormatInfoSelector_Polarized8 = _PySpin.PixelFormatInfoSelector_Polarized8

PixelFormatInfoSelector_Polarized10p = _PySpin.PixelFormatInfoSelector_Polarized10p

PixelFormatInfoSelector_Polarized12p = _PySpin.PixelFormatInfoSelector_Polarized12p

PixelFormatInfoSelector_Polarized16 = _PySpin.PixelFormatInfoSelector_Polarized16

PixelFormatInfoSelector_BayerRGPolarized8 = _PySpin.PixelFormatInfoSelector_BayerRGPolarized8

PixelFormatInfoSelector_BayerRGPolarized10p = _PySpin.PixelFormatInfoSelector_BayerRGPolarized10p

PixelFormatInfoSelector_BayerRGPolarized12p = _PySpin.PixelFormatInfoSelector_BayerRGPolarized12p

PixelFormatInfoSelector_BayerRGPolarized16 = _PySpin.PixelFormatInfoSelector_BayerRGPolarized16

PixelFormatInfoSelector_LLCMono8 = _PySpin.PixelFormatInfoSelector_LLCMono8

PixelFormatInfoSelector_LLCBayerRG8 = _PySpin.PixelFormatInfoSelector_LLCBayerRG8

PixelFormatInfoSelector_JPEGMono8 = _PySpin.PixelFormatInfoSelector_JPEGMono8

PixelFormatInfoSelector_JPEGColor8 = _PySpin.PixelFormatInfoSelector_JPEGColor8

NUM_PIXELFORMATINFOSELECTOR = _PySpin.NUM_PIXELFORMATINFOSELECTOR

Deinterlacing_Off = _PySpin.Deinterlacing_Off

Deinterlacing_LineDuplication = _PySpin.Deinterlacing_LineDuplication

Deinterlacing_Weave = _PySpin.Deinterlacing_Weave

NUM_DEINTERLACING = _PySpin.NUM_DEINTERLACING

ImageCompressionRateOption_FixBitrate = _PySpin.ImageCompressionRateOption_FixBitrate

ImageCompressionRateOption_FixQuality = _PySpin.ImageCompressionRateOption_FixQuality

NUM_IMAGECOMPRESSIONRATEOPTION = _PySpin.NUM_IMAGECOMPRESSIONRATEOPTION

ImageCompressionJPEGFormatOption_Lossless = _PySpin.ImageCompressionJPEGFormatOption_Lossless

ImageCompressionJPEGFormatOption_BaselineStandard = _PySpin.ImageCompressionJPEGFormatOption_BaselineStandard

ImageCompressionJPEGFormatOption_BaselineOptimized = _PySpin.ImageCompressionJPEGFormatOption_BaselineOptimized

ImageCompressionJPEGFormatOption_Progressive = _PySpin.ImageCompressionJPEGFormatOption_Progressive

NUM_IMAGECOMPRESSIONJPEGFORMATOPTION = _PySpin.NUM_IMAGECOMPRESSIONJPEGFORMATOPTION

AcquisitionStatusSelector_AcquisitionTriggerWait = _PySpin.AcquisitionStatusSelector_AcquisitionTriggerWait

AcquisitionStatusSelector_AcquisitionActive = _PySpin.AcquisitionStatusSelector_AcquisitionActive

AcquisitionStatusSelector_AcquisitionTransfer = _PySpin.AcquisitionStatusSelector_AcquisitionTransfer

AcquisitionStatusSelector_FrameTriggerWait = _PySpin.AcquisitionStatusSelector_FrameTriggerWait

AcquisitionStatusSelector_FrameActive = _PySpin.AcquisitionStatusSelector_FrameActive

AcquisitionStatusSelector_ExposureActive = _PySpin.AcquisitionStatusSelector_ExposureActive

NUM_ACQUISITIONSTATUSSELECTOR = _PySpin.NUM_ACQUISITIONSTATUSSELECTOR

ExposureTimeMode_Common = _PySpin.ExposureTimeMode_Common

ExposureTimeMode_Individual = _PySpin.ExposureTimeMode_Individual

NUM_EXPOSURETIMEMODE = _PySpin.NUM_EXPOSURETIMEMODE

ExposureTimeSelector_Common = _PySpin.ExposureTimeSelector_Common

ExposureTimeSelector_Red = _PySpin.ExposureTimeSelector_Red

ExposureTimeSelector_Green = _PySpin.ExposureTimeSelector_Green

ExposureTimeSelector_Blue = _PySpin.ExposureTimeSelector_Blue

ExposureTimeSelector_Cyan = _PySpin.ExposureTimeSelector_Cyan

ExposureTimeSelector_Magenta = _PySpin.ExposureTimeSelector_Magenta

ExposureTimeSelector_Yellow = _PySpin.ExposureTimeSelector_Yellow

ExposureTimeSelector_Infrared = _PySpin.ExposureTimeSelector_Infrared

ExposureTimeSelector_Ultraviolet = _PySpin.ExposureTimeSelector_Ultraviolet

ExposureTimeSelector_Stage1 = _PySpin.ExposureTimeSelector_Stage1

ExposureTimeSelector_Stage2 = _PySpin.ExposureTimeSelector_Stage2

NUM_EXPOSURETIMESELECTOR = _PySpin.NUM_EXPOSURETIMESELECTOR

GainAutoBalance_Off = _PySpin.GainAutoBalance_Off

GainAutoBalance_Once = _PySpin.GainAutoBalance_Once

GainAutoBalance_Continuous = _PySpin.GainAutoBalance_Continuous

NUM_GAINAUTOBALANCE = _PySpin.NUM_GAINAUTOBALANCE

BlackLevelAuto_Off = _PySpin.BlackLevelAuto_Off

BlackLevelAuto_Once = _PySpin.BlackLevelAuto_Once

BlackLevelAuto_Continuous = _PySpin.BlackLevelAuto_Continuous

NUM_BLACKLEVELAUTO = _PySpin.NUM_BLACKLEVELAUTO

BlackLevelAutoBalance_Off = _PySpin.BlackLevelAutoBalance_Off

BlackLevelAutoBalance_Once = _PySpin.BlackLevelAutoBalance_Once

BlackLevelAutoBalance_Continuous = _PySpin.BlackLevelAutoBalance_Continuous

NUM_BLACKLEVELAUTOBALANCE = _PySpin.NUM_BLACKLEVELAUTOBALANCE

WhiteClipSelector_All = _PySpin.WhiteClipSelector_All

WhiteClipSelector_Red = _PySpin.WhiteClipSelector_Red

WhiteClipSelector_Green = _PySpin.WhiteClipSelector_Green

WhiteClipSelector_Blue = _PySpin.WhiteClipSelector_Blue

WhiteClipSelector_Y = _PySpin.WhiteClipSelector_Y

WhiteClipSelector_U = _PySpin.WhiteClipSelector_U

WhiteClipSelector_V = _PySpin.WhiteClipSelector_V

WhiteClipSelector_Tap1 = _PySpin.WhiteClipSelector_Tap1

WhiteClipSelector_Tap2 = _PySpin.WhiteClipSelector_Tap2

NUM_WHITECLIPSELECTOR = _PySpin.NUM_WHITECLIPSELECTOR

TimerSelector_Timer0 = _PySpin.TimerSelector_Timer0

TimerSelector_Timer1 = _PySpin.TimerSelector_Timer1

TimerSelector_Timer2 = _PySpin.TimerSelector_Timer2

NUM_TIMERSELECTOR = _PySpin.NUM_TIMERSELECTOR

TimerStatus_TimerIdle = _PySpin.TimerStatus_TimerIdle

TimerStatus_TimerTriggerWait = _PySpin.TimerStatus_TimerTriggerWait

TimerStatus_TimerActive = _PySpin.TimerStatus_TimerActive

TimerStatus_TimerCompleted = _PySpin.TimerStatus_TimerCompleted

NUM_TIMERSTATUS = _PySpin.NUM_TIMERSTATUS

TimerTriggerSource_Off = _PySpin.TimerTriggerSource_Off

TimerTriggerSource_AcquisitionTrigger = _PySpin.TimerTriggerSource_AcquisitionTrigger

TimerTriggerSource_AcquisitionStart = _PySpin.TimerTriggerSource_AcquisitionStart

TimerTriggerSource_AcquisitionEnd = _PySpin.TimerTriggerSource_AcquisitionEnd

TimerTriggerSource_FrameTrigger = _PySpin.TimerTriggerSource_FrameTrigger

TimerTriggerSource_FrameStart = _PySpin.TimerTriggerSource_FrameStart

TimerTriggerSource_FrameEnd = _PySpin.TimerTriggerSource_FrameEnd

TimerTriggerSource_FrameBurstStart = _PySpin.TimerTriggerSource_FrameBurstStart

TimerTriggerSource_FrameBurstEnd = _PySpin.TimerTriggerSource_FrameBurstEnd

TimerTriggerSource_LineTrigger = _PySpin.TimerTriggerSource_LineTrigger

TimerTriggerSource_LineStart = _PySpin.TimerTriggerSource_LineStart

TimerTriggerSource_LineEnd = _PySpin.TimerTriggerSource_LineEnd

TimerTriggerSource_ExposureStart = _PySpin.TimerTriggerSource_ExposureStart

TimerTriggerSource_ExposureEnd = _PySpin.TimerTriggerSource_ExposureEnd

TimerTriggerSource_Line0 = _PySpin.TimerTriggerSource_Line0

TimerTriggerSource_Line1 = _PySpin.TimerTriggerSource_Line1

TimerTriggerSource_Line2 = _PySpin.TimerTriggerSource_Line2

TimerTriggerSource_UserOutput0 = _PySpin.TimerTriggerSource_UserOutput0

TimerTriggerSource_UserOutput1 = _PySpin.TimerTriggerSource_UserOutput1

TimerTriggerSource_UserOutput2 = _PySpin.TimerTriggerSource_UserOutput2

TimerTriggerSource_Counter0Start = _PySpin.TimerTriggerSource_Counter0Start

TimerTriggerSource_Counter1Start = _PySpin.TimerTriggerSource_Counter1Start

TimerTriggerSource_Counter2Start = _PySpin.TimerTriggerSource_Counter2Start

TimerTriggerSource_Counter0End = _PySpin.TimerTriggerSource_Counter0End

TimerTriggerSource_Counter1End = _PySpin.TimerTriggerSource_Counter1End

TimerTriggerSource_Counter2End = _PySpin.TimerTriggerSource_Counter2End

TimerTriggerSource_Timer0Start = _PySpin.TimerTriggerSource_Timer0Start

TimerTriggerSource_Timer1Start = _PySpin.TimerTriggerSource_Timer1Start

TimerTriggerSource_Timer2Start = _PySpin.TimerTriggerSource_Timer2Start

TimerTriggerSource_Timer0End = _PySpin.TimerTriggerSource_Timer0End

TimerTriggerSource_Timer1End = _PySpin.TimerTriggerSource_Timer1End

TimerTriggerSource_Timer2End = _PySpin.TimerTriggerSource_Timer2End

TimerTriggerSource_Encoder0 = _PySpin.TimerTriggerSource_Encoder0

TimerTriggerSource_Encoder1 = _PySpin.TimerTriggerSource_Encoder1

TimerTriggerSource_Encoder2 = _PySpin.TimerTriggerSource_Encoder2

TimerTriggerSource_SoftwareSignal0 = _PySpin.TimerTriggerSource_SoftwareSignal0

TimerTriggerSource_SoftwareSignal1 = _PySpin.TimerTriggerSource_SoftwareSignal1

TimerTriggerSource_SoftwareSignal2 = _PySpin.TimerTriggerSource_SoftwareSignal2

TimerTriggerSource_Action0 = _PySpin.TimerTriggerSource_Action0

TimerTriggerSource_Action1 = _PySpin.TimerTriggerSource_Action1

TimerTriggerSource_Action2 = _PySpin.TimerTriggerSource_Action2

TimerTriggerSource_LinkTrigger0 = _PySpin.TimerTriggerSource_LinkTrigger0

TimerTriggerSource_LinkTrigger1 = _PySpin.TimerTriggerSource_LinkTrigger1

TimerTriggerSource_LinkTrigger2 = _PySpin.TimerTriggerSource_LinkTrigger2

NUM_TIMERTRIGGERSOURCE = _PySpin.NUM_TIMERTRIGGERSOURCE

TimerTriggerActivation_RisingEdge = _PySpin.TimerTriggerActivation_RisingEdge

TimerTriggerActivation_FallingEdge = _PySpin.TimerTriggerActivation_FallingEdge

TimerTriggerActivation_AnyEdge = _PySpin.TimerTriggerActivation_AnyEdge

TimerTriggerActivation_LevelHigh = _PySpin.TimerTriggerActivation_LevelHigh

TimerTriggerActivation_LevelLow = _PySpin.TimerTriggerActivation_LevelLow

NUM_TIMERTRIGGERACTIVATION = _PySpin.NUM_TIMERTRIGGERACTIVATION

EncoderSelector_Encoder0 = _PySpin.EncoderSelector_Encoder0

EncoderSelector_Encoder1 = _PySpin.EncoderSelector_Encoder1

EncoderSelector_Encoder2 = _PySpin.EncoderSelector_Encoder2

NUM_ENCODERSELECTOR = _PySpin.NUM_ENCODERSELECTOR

EncoderSourceA_Off = _PySpin.EncoderSourceA_Off

EncoderSourceA_Line0 = _PySpin.EncoderSourceA_Line0

EncoderSourceA_Line1 = _PySpin.EncoderSourceA_Line1

EncoderSourceA_Line2 = _PySpin.EncoderSourceA_Line2

NUM_ENCODERSOURCEA = _PySpin.NUM_ENCODERSOURCEA

EncoderSourceB_Off = _PySpin.EncoderSourceB_Off

EncoderSourceB_Line0 = _PySpin.EncoderSourceB_Line0

EncoderSourceB_Line1 = _PySpin.EncoderSourceB_Line1

EncoderSourceB_Line2 = _PySpin.EncoderSourceB_Line2

NUM_ENCODERSOURCEB = _PySpin.NUM_ENCODERSOURCEB

EncoderMode_FourPhase = _PySpin.EncoderMode_FourPhase

EncoderMode_HighResolution = _PySpin.EncoderMode_HighResolution

NUM_ENCODERMODE = _PySpin.NUM_ENCODERMODE

EncoderOutputMode_Off = _PySpin.EncoderOutputMode_Off

EncoderOutputMode_PositionUp = _PySpin.EncoderOutputMode_PositionUp

EncoderOutputMode_PositionDown = _PySpin.EncoderOutputMode_PositionDown

EncoderOutputMode_DirectionUp = _PySpin.EncoderOutputMode_DirectionUp

EncoderOutputMode_DirectionDown = _PySpin.EncoderOutputMode_DirectionDown

EncoderOutputMode_Motion = _PySpin.EncoderOutputMode_Motion

NUM_ENCODEROUTPUTMODE = _PySpin.NUM_ENCODEROUTPUTMODE

EncoderStatus_EncoderUp = _PySpin.EncoderStatus_EncoderUp

EncoderStatus_EncoderDown = _PySpin.EncoderStatus_EncoderDown

EncoderStatus_EncoderIdle = _PySpin.EncoderStatus_EncoderIdle

EncoderStatus_EncoderStatic = _PySpin.EncoderStatus_EncoderStatic

NUM_ENCODERSTATUS = _PySpin.NUM_ENCODERSTATUS

EncoderResetSource_Off = _PySpin.EncoderResetSource_Off

EncoderResetSource_AcquisitionTrigger = _PySpin.EncoderResetSource_AcquisitionTrigger

EncoderResetSource_AcquisitionStart = _PySpin.EncoderResetSource_AcquisitionStart

EncoderResetSource_AcquisitionEnd = _PySpin.EncoderResetSource_AcquisitionEnd

EncoderResetSource_FrameTrigger = _PySpin.EncoderResetSource_FrameTrigger

EncoderResetSource_FrameStart = _PySpin.EncoderResetSource_FrameStart

EncoderResetSource_FrameEnd = _PySpin.EncoderResetSource_FrameEnd

EncoderResetSource_ExposureStart = _PySpin.EncoderResetSource_ExposureStart

EncoderResetSource_ExposureEnd = _PySpin.EncoderResetSource_ExposureEnd

EncoderResetSource_Line0 = _PySpin.EncoderResetSource_Line0

EncoderResetSource_Line1 = _PySpin.EncoderResetSource_Line1

EncoderResetSource_Line2 = _PySpin.EncoderResetSource_Line2

EncoderResetSource_Counter0Start = _PySpin.EncoderResetSource_Counter0Start

EncoderResetSource_Counter1Start = _PySpin.EncoderResetSource_Counter1Start

EncoderResetSource_Counter2Start = _PySpin.EncoderResetSource_Counter2Start

EncoderResetSource_Counter0End = _PySpin.EncoderResetSource_Counter0End

EncoderResetSource_Counter1End = _PySpin.EncoderResetSource_Counter1End

EncoderResetSource_Counter2End = _PySpin.EncoderResetSource_Counter2End

EncoderResetSource_Timer0Start = _PySpin.EncoderResetSource_Timer0Start

EncoderResetSource_Timer1Start = _PySpin.EncoderResetSource_Timer1Start

EncoderResetSource_Timer2Start = _PySpin.EncoderResetSource_Timer2Start

EncoderResetSource_Timer0End = _PySpin.EncoderResetSource_Timer0End

EncoderResetSource_Timer1End = _PySpin.EncoderResetSource_Timer1End

EncoderResetSource_Timer2End = _PySpin.EncoderResetSource_Timer2End

EncoderResetSource_UserOutput0 = _PySpin.EncoderResetSource_UserOutput0

EncoderResetSource_UserOutput1 = _PySpin.EncoderResetSource_UserOutput1

EncoderResetSource_UserOutput2 = _PySpin.EncoderResetSource_UserOutput2

EncoderResetSource_SoftwareSignal0 = _PySpin.EncoderResetSource_SoftwareSignal0

EncoderResetSource_SoftwareSignal1 = _PySpin.EncoderResetSource_SoftwareSignal1

EncoderResetSource_SoftwareSignal2 = _PySpin.EncoderResetSource_SoftwareSignal2

EncoderResetSource_Action0 = _PySpin.EncoderResetSource_Action0

EncoderResetSource_Action1 = _PySpin.EncoderResetSource_Action1

EncoderResetSource_Action2 = _PySpin.EncoderResetSource_Action2

EncoderResetSource_LinkTrigger0 = _PySpin.EncoderResetSource_LinkTrigger0

EncoderResetSource_LinkTrigger1 = _PySpin.EncoderResetSource_LinkTrigger1

EncoderResetSource_LinkTrigger2 = _PySpin.EncoderResetSource_LinkTrigger2

NUM_ENCODERRESETSOURCE = _PySpin.NUM_ENCODERRESETSOURCE

EncoderResetActivation_RisingEdge = _PySpin.EncoderResetActivation_RisingEdge

EncoderResetActivation_FallingEdge = _PySpin.EncoderResetActivation_FallingEdge

EncoderResetActivation_AnyEdge = _PySpin.EncoderResetActivation_AnyEdge

EncoderResetActivation_LevelHigh = _PySpin.EncoderResetActivation_LevelHigh

EncoderResetActivation_LevelLow = _PySpin.EncoderResetActivation_LevelLow

NUM_ENCODERRESETACTIVATION = _PySpin.NUM_ENCODERRESETACTIVATION

SoftwareSignalSelector_SoftwareSignal0 = _PySpin.SoftwareSignalSelector_SoftwareSignal0

SoftwareSignalSelector_SoftwareSignal1 = _PySpin.SoftwareSignalSelector_SoftwareSignal1

SoftwareSignalSelector_SoftwareSignal2 = _PySpin.SoftwareSignalSelector_SoftwareSignal2

NUM_SOFTWARESIGNALSELECTOR = _PySpin.NUM_SOFTWARESIGNALSELECTOR

ActionUnconditionalMode_Off = _PySpin.ActionUnconditionalMode_Off

ActionUnconditionalMode_On = _PySpin.ActionUnconditionalMode_On

NUM_ACTIONUNCONDITIONALMODE = _PySpin.NUM_ACTIONUNCONDITIONALMODE

SourceSelector_Source0 = _PySpin.SourceSelector_Source0

SourceSelector_Source1 = _PySpin.SourceSelector_Source1

SourceSelector_Source2 = _PySpin.SourceSelector_Source2

SourceSelector_All = _PySpin.SourceSelector_All

NUM_SOURCESELECTOR = _PySpin.NUM_SOURCESELECTOR

TransferSelector_Stream0 = _PySpin.TransferSelector_Stream0

TransferSelector_Stream1 = _PySpin.TransferSelector_Stream1

TransferSelector_Stream2 = _PySpin.TransferSelector_Stream2

TransferSelector_All = _PySpin.TransferSelector_All

NUM_TRANSFERSELECTOR = _PySpin.NUM_TRANSFERSELECTOR

TransferTriggerSelector_TransferStart = _PySpin.TransferTriggerSelector_TransferStart

TransferTriggerSelector_TransferStop = _PySpin.TransferTriggerSelector_TransferStop

TransferTriggerSelector_TransferAbort = _PySpin.TransferTriggerSelector_TransferAbort

TransferTriggerSelector_TransferPause = _PySpin.TransferTriggerSelector_TransferPause

TransferTriggerSelector_TransferResume = _PySpin.TransferTriggerSelector_TransferResume

TransferTriggerSelector_TransferActive = _PySpin.TransferTriggerSelector_TransferActive

TransferTriggerSelector_TransferBurstStart = _PySpin.TransferTriggerSelector_TransferBurstStart

TransferTriggerSelector_TransferBurstStop = _PySpin.TransferTriggerSelector_TransferBurstStop

NUM_TRANSFERTRIGGERSELECTOR = _PySpin.NUM_TRANSFERTRIGGERSELECTOR

TransferTriggerMode_Off = _PySpin.TransferTriggerMode_Off

TransferTriggerMode_On = _PySpin.TransferTriggerMode_On

NUM_TRANSFERTRIGGERMODE = _PySpin.NUM_TRANSFERTRIGGERMODE

TransferTriggerSource_Line0 = _PySpin.TransferTriggerSource_Line0

TransferTriggerSource_Line1 = _PySpin.TransferTriggerSource_Line1

TransferTriggerSource_Line2 = _PySpin.TransferTriggerSource_Line2

TransferTriggerSource_Counter0Start = _PySpin.TransferTriggerSource_Counter0Start

TransferTriggerSource_Counter1Start = _PySpin.TransferTriggerSource_Counter1Start

TransferTriggerSource_Counter2Start = _PySpin.TransferTriggerSource_Counter2Start

TransferTriggerSource_Counter0End = _PySpin.TransferTriggerSource_Counter0End

TransferTriggerSource_Counter1End = _PySpin.TransferTriggerSource_Counter1End

TransferTriggerSource_Counter2End = _PySpin.TransferTriggerSource_Counter2End

TransferTriggerSource_Timer0Start = _PySpin.TransferTriggerSource_Timer0Start

TransferTriggerSource_Timer1Start = _PySpin.TransferTriggerSource_Timer1Start

TransferTriggerSource_Timer2Start = _PySpin.TransferTriggerSource_Timer2Start

TransferTriggerSource_Timer0End = _PySpin.TransferTriggerSource_Timer0End

TransferTriggerSource_Timer1End = _PySpin.TransferTriggerSource_Timer1End

TransferTriggerSource_Timer2End = _PySpin.TransferTriggerSource_Timer2End

TransferTriggerSource_SoftwareSignal0 = _PySpin.TransferTriggerSource_SoftwareSignal0

TransferTriggerSource_SoftwareSignal1 = _PySpin.TransferTriggerSource_SoftwareSignal1

TransferTriggerSource_SoftwareSignal2 = _PySpin.TransferTriggerSource_SoftwareSignal2

TransferTriggerSource_Action0 = _PySpin.TransferTriggerSource_Action0

TransferTriggerSource_Action1 = _PySpin.TransferTriggerSource_Action1

TransferTriggerSource_Action2 = _PySpin.TransferTriggerSource_Action2

NUM_TRANSFERTRIGGERSOURCE = _PySpin.NUM_TRANSFERTRIGGERSOURCE

TransferTriggerActivation_RisingEdge = _PySpin.TransferTriggerActivation_RisingEdge

TransferTriggerActivation_FallingEdge = _PySpin.TransferTriggerActivation_FallingEdge

TransferTriggerActivation_AnyEdge = _PySpin.TransferTriggerActivation_AnyEdge

TransferTriggerActivation_LevelHigh = _PySpin.TransferTriggerActivation_LevelHigh

TransferTriggerActivation_LevelLow = _PySpin.TransferTriggerActivation_LevelLow

NUM_TRANSFERTRIGGERACTIVATION = _PySpin.NUM_TRANSFERTRIGGERACTIVATION

TransferStatusSelector_Streaming = _PySpin.TransferStatusSelector_Streaming

TransferStatusSelector_Paused = _PySpin.TransferStatusSelector_Paused

TransferStatusSelector_Stopping = _PySpin.TransferStatusSelector_Stopping

TransferStatusSelector_Stopped = _PySpin.TransferStatusSelector_Stopped

TransferStatusSelector_QueueOverflow = _PySpin.TransferStatusSelector_QueueOverflow

NUM_TRANSFERSTATUSSELECTOR = _PySpin.NUM_TRANSFERSTATUSSELECTOR

TransferComponentSelector_Red = _PySpin.TransferComponentSelector_Red

TransferComponentSelector_Green = _PySpin.TransferComponentSelector_Green

TransferComponentSelector_Blue = _PySpin.TransferComponentSelector_Blue

TransferComponentSelector_All = _PySpin.TransferComponentSelector_All

NUM_TRANSFERCOMPONENTSELECTOR = _PySpin.NUM_TRANSFERCOMPONENTSELECTOR

Scan3dDistanceUnit_Millimeter = _PySpin.Scan3dDistanceUnit_Millimeter

Scan3dDistanceUnit_Inch = _PySpin.Scan3dDistanceUnit_Inch

NUM_SCAN3DDISTANCEUNIT = _PySpin.NUM_SCAN3DDISTANCEUNIT

Scan3dCoordinateSystem_Cartesian = _PySpin.Scan3dCoordinateSystem_Cartesian

Scan3dCoordinateSystem_Spherical = _PySpin.Scan3dCoordinateSystem_Spherical

Scan3dCoordinateSystem_Cylindrical = _PySpin.Scan3dCoordinateSystem_Cylindrical

NUM_SCAN3DCOORDINATESYSTEM = _PySpin.NUM_SCAN3DCOORDINATESYSTEM

Scan3dOutputMode_UncalibratedC = _PySpin.Scan3dOutputMode_UncalibratedC

Scan3dOutputMode_CalibratedABC_Grid = _PySpin.Scan3dOutputMode_CalibratedABC_Grid

Scan3dOutputMode_CalibratedABC_PointCloud = _PySpin.Scan3dOutputMode_CalibratedABC_PointCloud

Scan3dOutputMode_CalibratedAC = _PySpin.Scan3dOutputMode_CalibratedAC

Scan3dOutputMode_CalibratedAC_Linescan = _PySpin.Scan3dOutputMode_CalibratedAC_Linescan

Scan3dOutputMode_CalibratedC = _PySpin.Scan3dOutputMode_CalibratedC

Scan3dOutputMode_CalibratedC_Linescan = _PySpin.Scan3dOutputMode_CalibratedC_Linescan

Scan3dOutputMode_RectifiedC = _PySpin.Scan3dOutputMode_RectifiedC

Scan3dOutputMode_RectifiedC_Linescan = _PySpin.Scan3dOutputMode_RectifiedC_Linescan

Scan3dOutputMode_DisparityC = _PySpin.Scan3dOutputMode_DisparityC

Scan3dOutputMode_DisparityC_Linescan = _PySpin.Scan3dOutputMode_DisparityC_Linescan

NUM_SCAN3DOUTPUTMODE = _PySpin.NUM_SCAN3DOUTPUTMODE

Scan3dCoordinateSystemReference_Anchor = _PySpin.Scan3dCoordinateSystemReference_Anchor

Scan3dCoordinateSystemReference_Transformed = _PySpin.Scan3dCoordinateSystemReference_Transformed

NUM_SCAN3DCOORDINATESYSTEMREFERENCE = _PySpin.NUM_SCAN3DCOORDINATESYSTEMREFERENCE

Scan3dCoordinateSelector_CoordinateA = _PySpin.Scan3dCoordinateSelector_CoordinateA

Scan3dCoordinateSelector_CoordinateB = _PySpin.Scan3dCoordinateSelector_CoordinateB

Scan3dCoordinateSelector_CoordinateC = _PySpin.Scan3dCoordinateSelector_CoordinateC

NUM_SCAN3DCOORDINATESELECTOR = _PySpin.NUM_SCAN3DCOORDINATESELECTOR

Scan3dCoordinateTransformSelector_RotationX = _PySpin.Scan3dCoordinateTransformSelector_RotationX

Scan3dCoordinateTransformSelector_RotationY = _PySpin.Scan3dCoordinateTransformSelector_RotationY

Scan3dCoordinateTransformSelector_RotationZ = _PySpin.Scan3dCoordinateTransformSelector_RotationZ

Scan3dCoordinateTransformSelector_TranslationX = _PySpin.Scan3dCoordinateTransformSelector_TranslationX

Scan3dCoordinateTransformSelector_TranslationY = _PySpin.Scan3dCoordinateTransformSelector_TranslationY

Scan3dCoordinateTransformSelector_TranslationZ = _PySpin.Scan3dCoordinateTransformSelector_TranslationZ

NUM_SCAN3DCOORDINATETRANSFORMSELECTOR = _PySpin.NUM_SCAN3DCOORDINATETRANSFORMSELECTOR

Scan3dCoordinateReferenceSelector_RotationX = _PySpin.Scan3dCoordinateReferenceSelector_RotationX

Scan3dCoordinateReferenceSelector_RotationY = _PySpin.Scan3dCoordinateReferenceSelector_RotationY

Scan3dCoordinateReferenceSelector_RotationZ = _PySpin.Scan3dCoordinateReferenceSelector_RotationZ

Scan3dCoordinateReferenceSelector_TranslationX = _PySpin.Scan3dCoordinateReferenceSelector_TranslationX

Scan3dCoordinateReferenceSelector_TranslationY = _PySpin.Scan3dCoordinateReferenceSelector_TranslationY

Scan3dCoordinateReferenceSelector_TranslationZ = _PySpin.Scan3dCoordinateReferenceSelector_TranslationZ

NUM_SCAN3DCOORDINATEREFERENCESELECTOR = _PySpin.NUM_SCAN3DCOORDINATEREFERENCESELECTOR

ChunkImageComponent_Intensity = _PySpin.ChunkImageComponent_Intensity

ChunkImageComponent_Color = _PySpin.ChunkImageComponent_Color

ChunkImageComponent_Infrared = _PySpin.ChunkImageComponent_Infrared

ChunkImageComponent_Ultraviolet = _PySpin.ChunkImageComponent_Ultraviolet

ChunkImageComponent_Range = _PySpin.ChunkImageComponent_Range

ChunkImageComponent_Disparity = _PySpin.ChunkImageComponent_Disparity

ChunkImageComponent_Confidence = _PySpin.ChunkImageComponent_Confidence

ChunkImageComponent_Scatter = _PySpin.ChunkImageComponent_Scatter

NUM_CHUNKIMAGECOMPONENT = _PySpin.NUM_CHUNKIMAGECOMPONENT

ChunkCounterSelector_Counter0 = _PySpin.ChunkCounterSelector_Counter0

ChunkCounterSelector_Counter1 = _PySpin.ChunkCounterSelector_Counter1

ChunkCounterSelector_Counter2 = _PySpin.ChunkCounterSelector_Counter2

NUM_CHUNKCOUNTERSELECTOR = _PySpin.NUM_CHUNKCOUNTERSELECTOR

ChunkTimerSelector_Timer0 = _PySpin.ChunkTimerSelector_Timer0

ChunkTimerSelector_Timer1 = _PySpin.ChunkTimerSelector_Timer1

ChunkTimerSelector_Timer2 = _PySpin.ChunkTimerSelector_Timer2

NUM_CHUNKTIMERSELECTOR = _PySpin.NUM_CHUNKTIMERSELECTOR

ChunkEncoderSelector_Encoder0 = _PySpin.ChunkEncoderSelector_Encoder0

ChunkEncoderSelector_Encoder1 = _PySpin.ChunkEncoderSelector_Encoder1

ChunkEncoderSelector_Encoder2 = _PySpin.ChunkEncoderSelector_Encoder2

NUM_CHUNKENCODERSELECTOR = _PySpin.NUM_CHUNKENCODERSELECTOR

ChunkEncoderStatus_EncoderUp = _PySpin.ChunkEncoderStatus_EncoderUp

ChunkEncoderStatus_EncoderDown = _PySpin.ChunkEncoderStatus_EncoderDown

ChunkEncoderStatus_EncoderIdle = _PySpin.ChunkEncoderStatus_EncoderIdle

ChunkEncoderStatus_EncoderStatic = _PySpin.ChunkEncoderStatus_EncoderStatic

NUM_CHUNKENCODERSTATUS = _PySpin.NUM_CHUNKENCODERSTATUS

ChunkExposureTimeSelector_Common = _PySpin.ChunkExposureTimeSelector_Common

ChunkExposureTimeSelector_Red = _PySpin.ChunkExposureTimeSelector_Red

ChunkExposureTimeSelector_Green = _PySpin.ChunkExposureTimeSelector_Green

ChunkExposureTimeSelector_Blue = _PySpin.ChunkExposureTimeSelector_Blue

ChunkExposureTimeSelector_Cyan = _PySpin.ChunkExposureTimeSelector_Cyan

ChunkExposureTimeSelector_Magenta = _PySpin.ChunkExposureTimeSelector_Magenta

ChunkExposureTimeSelector_Yellow = _PySpin.ChunkExposureTimeSelector_Yellow

ChunkExposureTimeSelector_Infrared = _PySpin.ChunkExposureTimeSelector_Infrared

ChunkExposureTimeSelector_Ultraviolet = _PySpin.ChunkExposureTimeSelector_Ultraviolet

ChunkExposureTimeSelector_Stage1 = _PySpin.ChunkExposureTimeSelector_Stage1

ChunkExposureTimeSelector_Stage2 = _PySpin.ChunkExposureTimeSelector_Stage2

NUM_CHUNKEXPOSURETIMESELECTOR = _PySpin.NUM_CHUNKEXPOSURETIMESELECTOR

ChunkSourceID_Source0 = _PySpin.ChunkSourceID_Source0

ChunkSourceID_Source1 = _PySpin.ChunkSourceID_Source1

ChunkSourceID_Source2 = _PySpin.ChunkSourceID_Source2

NUM_CHUNKSOURCEID = _PySpin.NUM_CHUNKSOURCEID

ChunkRegionID_Region0 = _PySpin.ChunkRegionID_Region0

ChunkRegionID_Region1 = _PySpin.ChunkRegionID_Region1

ChunkRegionID_Region2 = _PySpin.ChunkRegionID_Region2

NUM_CHUNKREGIONID = _PySpin.NUM_CHUNKREGIONID

ChunkTransferStreamID_Stream0 = _PySpin.ChunkTransferStreamID_Stream0

ChunkTransferStreamID_Stream1 = _PySpin.ChunkTransferStreamID_Stream1

ChunkTransferStreamID_Stream2 = _PySpin.ChunkTransferStreamID_Stream2

ChunkTransferStreamID_Stream3 = _PySpin.ChunkTransferStreamID_Stream3

NUM_CHUNKTRANSFERSTREAMID = _PySpin.NUM_CHUNKTRANSFERSTREAMID

ChunkScan3dDistanceUnit_Millimeter = _PySpin.ChunkScan3dDistanceUnit_Millimeter

ChunkScan3dDistanceUnit_Inch = _PySpin.ChunkScan3dDistanceUnit_Inch

NUM_CHUNKSCAN3DDISTANCEUNIT = _PySpin.NUM_CHUNKSCAN3DDISTANCEUNIT

ChunkScan3dOutputMode_UncalibratedC = _PySpin.ChunkScan3dOutputMode_UncalibratedC

ChunkScan3dOutputMode_CalibratedABC_Grid = _PySpin.ChunkScan3dOutputMode_CalibratedABC_Grid

ChunkScan3dOutputMode_CalibratedABC_PointCloud = _PySpin.ChunkScan3dOutputMode_CalibratedABC_PointCloud

ChunkScan3dOutputMode_CalibratedAC = _PySpin.ChunkScan3dOutputMode_CalibratedAC

ChunkScan3dOutputMode_CalibratedAC_Linescan = _PySpin.ChunkScan3dOutputMode_CalibratedAC_Linescan

ChunkScan3dOutputMode_CalibratedC = _PySpin.ChunkScan3dOutputMode_CalibratedC

ChunkScan3dOutputMode_CalibratedC_Linescan = _PySpin.ChunkScan3dOutputMode_CalibratedC_Linescan

ChunkScan3dOutputMode_RectifiedC = _PySpin.ChunkScan3dOutputMode_RectifiedC

ChunkScan3dOutputMode_RectifiedC_Linescan = _PySpin.ChunkScan3dOutputMode_RectifiedC_Linescan

ChunkScan3dOutputMode_DisparityC = _PySpin.ChunkScan3dOutputMode_DisparityC

ChunkScan3dOutputMode_DisparityC_Linescan = _PySpin.ChunkScan3dOutputMode_DisparityC_Linescan

NUM_CHUNKSCAN3DOUTPUTMODE = _PySpin.NUM_CHUNKSCAN3DOUTPUTMODE

ChunkScan3dCoordinateSystem_Cartesian = _PySpin.ChunkScan3dCoordinateSystem_Cartesian

ChunkScan3dCoordinateSystem_Spherical = _PySpin.ChunkScan3dCoordinateSystem_Spherical

ChunkScan3dCoordinateSystem_Cylindrical = _PySpin.ChunkScan3dCoordinateSystem_Cylindrical

NUM_CHUNKSCAN3DCOORDINATESYSTEM = _PySpin.NUM_CHUNKSCAN3DCOORDINATESYSTEM

ChunkScan3dCoordinateSystemReference_Anchor = _PySpin.ChunkScan3dCoordinateSystemReference_Anchor

ChunkScan3dCoordinateSystemReference_Transformed = _PySpin.ChunkScan3dCoordinateSystemReference_Transformed

NUM_CHUNKSCAN3DCOORDINATESYSTEMREFERENCE = _PySpin.NUM_CHUNKSCAN3DCOORDINATESYSTEMREFERENCE

ChunkScan3dCoordinateSelector_CoordinateA = _PySpin.ChunkScan3dCoordinateSelector_CoordinateA

ChunkScan3dCoordinateSelector_CoordinateB = _PySpin.ChunkScan3dCoordinateSelector_CoordinateB

ChunkScan3dCoordinateSelector_CoordinateC = _PySpin.ChunkScan3dCoordinateSelector_CoordinateC

NUM_CHUNKSCAN3DCOORDINATESELECTOR = _PySpin.NUM_CHUNKSCAN3DCOORDINATESELECTOR

ChunkScan3dCoordinateTransformSelector_RotationX = _PySpin.ChunkScan3dCoordinateTransformSelector_RotationX

ChunkScan3dCoordinateTransformSelector_RotationY = _PySpin.ChunkScan3dCoordinateTransformSelector_RotationY

ChunkScan3dCoordinateTransformSelector_RotationZ = _PySpin.ChunkScan3dCoordinateTransformSelector_RotationZ

ChunkScan3dCoordinateTransformSelector_TranslationX = _PySpin.ChunkScan3dCoordinateTransformSelector_TranslationX

ChunkScan3dCoordinateTransformSelector_TranslationY = _PySpin.ChunkScan3dCoordinateTransformSelector_TranslationY

ChunkScan3dCoordinateTransformSelector_TranslationZ = _PySpin.ChunkScan3dCoordinateTransformSelector_TranslationZ

NUM_CHUNKSCAN3DCOORDINATETRANSFORMSELECTOR = _PySpin.NUM_CHUNKSCAN3DCOORDINATETRANSFORMSELECTOR

ChunkScan3dCoordinateReferenceSelector_RotationX = _PySpin.ChunkScan3dCoordinateReferenceSelector_RotationX

ChunkScan3dCoordinateReferenceSelector_RotationY = _PySpin.ChunkScan3dCoordinateReferenceSelector_RotationY

ChunkScan3dCoordinateReferenceSelector_RotationZ = _PySpin.ChunkScan3dCoordinateReferenceSelector_RotationZ

ChunkScan3dCoordinateReferenceSelector_TranslationX = _PySpin.ChunkScan3dCoordinateReferenceSelector_TranslationX

ChunkScan3dCoordinateReferenceSelector_TranslationY = _PySpin.ChunkScan3dCoordinateReferenceSelector_TranslationY

ChunkScan3dCoordinateReferenceSelector_TranslationZ = _PySpin.ChunkScan3dCoordinateReferenceSelector_TranslationZ

NUM_CHUNKSCAN3DCOORDINATEREFERENCESELECTOR = _PySpin.NUM_CHUNKSCAN3DCOORDINATEREFERENCESELECTOR

DeviceTapGeometry_Geometry_1X_1Y = _PySpin.DeviceTapGeometry_Geometry_1X_1Y

DeviceTapGeometry_Geometry_1X2_1Y = _PySpin.DeviceTapGeometry_Geometry_1X2_1Y

DeviceTapGeometry_Geometry_1X2_1Y2 = _PySpin.DeviceTapGeometry_Geometry_1X2_1Y2

DeviceTapGeometry_Geometry_2X_1Y = _PySpin.DeviceTapGeometry_Geometry_2X_1Y

DeviceTapGeometry_Geometry_2X_1Y2Geometry_2XE_1Y = _PySpin.DeviceTapGeometry_Geometry_2X_1Y2Geometry_2XE_1Y

DeviceTapGeometry_Geometry_2XE_1Y2 = _PySpin.DeviceTapGeometry_Geometry_2XE_1Y2

DeviceTapGeometry_Geometry_2XM_1Y = _PySpin.DeviceTapGeometry_Geometry_2XM_1Y

DeviceTapGeometry_Geometry_2XM_1Y2 = _PySpin.DeviceTapGeometry_Geometry_2XM_1Y2

DeviceTapGeometry_Geometry_1X_1Y2 = _PySpin.DeviceTapGeometry_Geometry_1X_1Y2

DeviceTapGeometry_Geometry_1X_2YE = _PySpin.DeviceTapGeometry_Geometry_1X_2YE

DeviceTapGeometry_Geometry_1X3_1Y = _PySpin.DeviceTapGeometry_Geometry_1X3_1Y

DeviceTapGeometry_Geometry_3X_1Y = _PySpin.DeviceTapGeometry_Geometry_3X_1Y

DeviceTapGeometry_Geometry_1X = _PySpin.DeviceTapGeometry_Geometry_1X

DeviceTapGeometry_Geometry_1X2 = _PySpin.DeviceTapGeometry_Geometry_1X2

DeviceTapGeometry_Geometry_2X = _PySpin.DeviceTapGeometry_Geometry_2X

DeviceTapGeometry_Geometry_2XE = _PySpin.DeviceTapGeometry_Geometry_2XE

DeviceTapGeometry_Geometry_2XM = _PySpin.DeviceTapGeometry_Geometry_2XM

DeviceTapGeometry_Geometry_1X3 = _PySpin.DeviceTapGeometry_Geometry_1X3

DeviceTapGeometry_Geometry_3X = _PySpin.DeviceTapGeometry_Geometry_3X

DeviceTapGeometry_Geometry_1X4_1Y = _PySpin.DeviceTapGeometry_Geometry_1X4_1Y

DeviceTapGeometry_Geometry_4X_1Y = _PySpin.DeviceTapGeometry_Geometry_4X_1Y

DeviceTapGeometry_Geometry_2X2_1Y = _PySpin.DeviceTapGeometry_Geometry_2X2_1Y

DeviceTapGeometry_Geometry_2X2E_1YGeometry_2X2M_1Y = _PySpin.DeviceTapGeometry_Geometry_2X2E_1YGeometry_2X2M_1Y

DeviceTapGeometry_Geometry_1X2_2YE = _PySpin.DeviceTapGeometry_Geometry_1X2_2YE

DeviceTapGeometry_Geometry_2X_2YE = _PySpin.DeviceTapGeometry_Geometry_2X_2YE

DeviceTapGeometry_Geometry_2XE_2YE = _PySpin.DeviceTapGeometry_Geometry_2XE_2YE

DeviceTapGeometry_Geometry_2XM_2YE = _PySpin.DeviceTapGeometry_Geometry_2XM_2YE

DeviceTapGeometry_Geometry_1X4 = _PySpin.DeviceTapGeometry_Geometry_1X4

DeviceTapGeometry_Geometry_4X = _PySpin.DeviceTapGeometry_Geometry_4X

DeviceTapGeometry_Geometry_2X2 = _PySpin.DeviceTapGeometry_Geometry_2X2

DeviceTapGeometry_Geometry_2X2E = _PySpin.DeviceTapGeometry_Geometry_2X2E

DeviceTapGeometry_Geometry_2X2M = _PySpin.DeviceTapGeometry_Geometry_2X2M

DeviceTapGeometry_Geometry_1X8_1Y = _PySpin.DeviceTapGeometry_Geometry_1X8_1Y

DeviceTapGeometry_Geometry_8X_1Y = _PySpin.DeviceTapGeometry_Geometry_8X_1Y

DeviceTapGeometry_Geometry_4X2_1Y = _PySpin.DeviceTapGeometry_Geometry_4X2_1Y

DeviceTapGeometry_Geometry_2X2E_2YE = _PySpin.DeviceTapGeometry_Geometry_2X2E_2YE

DeviceTapGeometry_Geometry_1X8 = _PySpin.DeviceTapGeometry_Geometry_1X8

DeviceTapGeometry_Geometry_8X = _PySpin.DeviceTapGeometry_Geometry_8X

DeviceTapGeometry_Geometry_4X2 = _PySpin.DeviceTapGeometry_Geometry_4X2

DeviceTapGeometry_Geometry_4X2E = _PySpin.DeviceTapGeometry_Geometry_4X2E

DeviceTapGeometry_Geometry_4X2E_1Y = _PySpin.DeviceTapGeometry_Geometry_4X2E_1Y

DeviceTapGeometry_Geometry_1X10_1Y = _PySpin.DeviceTapGeometry_Geometry_1X10_1Y

DeviceTapGeometry_Geometry_10X_1Y = _PySpin.DeviceTapGeometry_Geometry_10X_1Y

DeviceTapGeometry_Geometry_1X10 = _PySpin.DeviceTapGeometry_Geometry_1X10

DeviceTapGeometry_Geometry_10X = _PySpin.DeviceTapGeometry_Geometry_10X

NUM_DEVICETAPGEOMETRY = _PySpin.NUM_DEVICETAPGEOMETRY

GevPhysicalLinkConfiguration_SingleLink = _PySpin.GevPhysicalLinkConfiguration_SingleLink

GevPhysicalLinkConfiguration_MultiLink = _PySpin.GevPhysicalLinkConfiguration_MultiLink

GevPhysicalLinkConfiguration_StaticLAG = _PySpin.GevPhysicalLinkConfiguration_StaticLAG

GevPhysicalLinkConfiguration_DynamicLAG = _PySpin.GevPhysicalLinkConfiguration_DynamicLAG

NUM_GEVPHYSICALLINKCONFIGURATION = _PySpin.NUM_GEVPHYSICALLINKCONFIGURATION

GevCurrentPhysicalLinkConfiguration_SingleLink = _PySpin.GevCurrentPhysicalLinkConfiguration_SingleLink

GevCurrentPhysicalLinkConfiguration_MultiLink = _PySpin.GevCurrentPhysicalLinkConfiguration_MultiLink

GevCurrentPhysicalLinkConfiguration_StaticLAG = _PySpin.GevCurrentPhysicalLinkConfiguration_StaticLAG

GevCurrentPhysicalLinkConfiguration_DynamicLAG = _PySpin.GevCurrentPhysicalLinkConfiguration_DynamicLAG

NUM_GEVCURRENTPHYSICALLINKCONFIGURATION = _PySpin.NUM_GEVCURRENTPHYSICALLINKCONFIGURATION

GevIPConfigurationStatus_None = _PySpin.GevIPConfigurationStatus_None

GevIPConfigurationStatus_PersistentIP = _PySpin.GevIPConfigurationStatus_PersistentIP

GevIPConfigurationStatus_DHCP = _PySpin.GevIPConfigurationStatus_DHCP

GevIPConfigurationStatus_LLA = _PySpin.GevIPConfigurationStatus_LLA

GevIPConfigurationStatus_ForceIP = _PySpin.GevIPConfigurationStatus_ForceIP

NUM_GEVIPCONFIGURATIONSTATUS = _PySpin.NUM_GEVIPCONFIGURATIONSTATUS

GevGVCPExtendedStatusCodesSelector_Version1_1 = _PySpin.GevGVCPExtendedStatusCodesSelector_Version1_1

GevGVCPExtendedStatusCodesSelector_Version2_0 = _PySpin.GevGVCPExtendedStatusCodesSelector_Version2_0

NUM_GEVGVCPEXTENDEDSTATUSCODESSELECTOR = _PySpin.NUM_GEVGVCPEXTENDEDSTATUSCODESSELECTOR

GevGVSPExtendedIDMode_Off = _PySpin.GevGVSPExtendedIDMode_Off

GevGVSPExtendedIDMode_On = _PySpin.GevGVSPExtendedIDMode_On

NUM_GEVGVSPEXTENDEDIDMODE = _PySpin.NUM_GEVGVSPEXTENDEDIDMODE

ClConfiguration_Base = _PySpin.ClConfiguration_Base

ClConfiguration_Medium = _PySpin.ClConfiguration_Medium

ClConfiguration_Full = _PySpin.ClConfiguration_Full

ClConfiguration_DualBase = _PySpin.ClConfiguration_DualBase

ClConfiguration_EightyBit = _PySpin.ClConfiguration_EightyBit

NUM_CLCONFIGURATION = _PySpin.NUM_CLCONFIGURATION

ClTimeSlotsCount_One = _PySpin.ClTimeSlotsCount_One

ClTimeSlotsCount_Two = _PySpin.ClTimeSlotsCount_Two

ClTimeSlotsCount_Three = _PySpin.ClTimeSlotsCount_Three

NUM_CLTIMESLOTSCOUNT = _PySpin.NUM_CLTIMESLOTSCOUNT

CxpLinkConfigurationStatus_None = _PySpin.CxpLinkConfigurationStatus_None

CxpLinkConfigurationStatus_Pending = _PySpin.CxpLinkConfigurationStatus_Pending

CxpLinkConfigurationStatus_CXP1_X1 = _PySpin.CxpLinkConfigurationStatus_CXP1_X1

CxpLinkConfigurationStatus_CXP2_X1 = _PySpin.CxpLinkConfigurationStatus_CXP2_X1

CxpLinkConfigurationStatus_CXP3_X1 = _PySpin.CxpLinkConfigurationStatus_CXP3_X1

CxpLinkConfigurationStatus_CXP5_X1 = _PySpin.CxpLinkConfigurationStatus_CXP5_X1

CxpLinkConfigurationStatus_CXP6_X1 = _PySpin.CxpLinkConfigurationStatus_CXP6_X1

CxpLinkConfigurationStatus_CXP1_X2 = _PySpin.CxpLinkConfigurationStatus_CXP1_X2

CxpLinkConfigurationStatus_CXP2_X2 = _PySpin.CxpLinkConfigurationStatus_CXP2_X2

CxpLinkConfigurationStatus_CXP3_X2 = _PySpin.CxpLinkConfigurationStatus_CXP3_X2

CxpLinkConfigurationStatus_CXP5_X2 = _PySpin.CxpLinkConfigurationStatus_CXP5_X2

CxpLinkConfigurationStatus_CXP6_X2 = _PySpin.CxpLinkConfigurationStatus_CXP6_X2

CxpLinkConfigurationStatus_CXP1_X3 = _PySpin.CxpLinkConfigurationStatus_CXP1_X3

CxpLinkConfigurationStatus_CXP2_X3 = _PySpin.CxpLinkConfigurationStatus_CXP2_X3

CxpLinkConfigurationStatus_CXP3_X3 = _PySpin.CxpLinkConfigurationStatus_CXP3_X3

CxpLinkConfigurationStatus_CXP5_X3 = _PySpin.CxpLinkConfigurationStatus_CXP5_X3

CxpLinkConfigurationStatus_CXP6_X3 = _PySpin.CxpLinkConfigurationStatus_CXP6_X3

CxpLinkConfigurationStatus_CXP1_X4 = _PySpin.CxpLinkConfigurationStatus_CXP1_X4

CxpLinkConfigurationStatus_CXP2_X4 = _PySpin.CxpLinkConfigurationStatus_CXP2_X4

CxpLinkConfigurationStatus_CXP3_X4 = _PySpin.CxpLinkConfigurationStatus_CXP3_X4

CxpLinkConfigurationStatus_CXP5_X4 = _PySpin.CxpLinkConfigurationStatus_CXP5_X4

CxpLinkConfigurationStatus_CXP6_X4 = _PySpin.CxpLinkConfigurationStatus_CXP6_X4

CxpLinkConfigurationStatus_CXP1_X5 = _PySpin.CxpLinkConfigurationStatus_CXP1_X5

CxpLinkConfigurationStatus_CXP2_X5 = _PySpin.CxpLinkConfigurationStatus_CXP2_X5

CxpLinkConfigurationStatus_CXP3_X5 = _PySpin.CxpLinkConfigurationStatus_CXP3_X5

CxpLinkConfigurationStatus_CXP5_X5 = _PySpin.CxpLinkConfigurationStatus_CXP5_X5

CxpLinkConfigurationStatus_CXP6_X5 = _PySpin.CxpLinkConfigurationStatus_CXP6_X5

CxpLinkConfigurationStatus_CXP1_X6 = _PySpin.CxpLinkConfigurationStatus_CXP1_X6

CxpLinkConfigurationStatus_CXP2_X6 = _PySpin.CxpLinkConfigurationStatus_CXP2_X6

CxpLinkConfigurationStatus_CXP3_X6 = _PySpin.CxpLinkConfigurationStatus_CXP3_X6

CxpLinkConfigurationStatus_CXP5_X6 = _PySpin.CxpLinkConfigurationStatus_CXP5_X6

CxpLinkConfigurationStatus_CXP6_X6 = _PySpin.CxpLinkConfigurationStatus_CXP6_X6

NUM_CXPLINKCONFIGURATIONSTATUS = _PySpin.NUM_CXPLINKCONFIGURATIONSTATUS

CxpLinkConfigurationPreferred_CXP1_X1 = _PySpin.CxpLinkConfigurationPreferred_CXP1_X1

CxpLinkConfigurationPreferred_CXP2_X1 = _PySpin.CxpLinkConfigurationPreferred_CXP2_X1

CxpLinkConfigurationPreferred_CXP3_X1 = _PySpin.CxpLinkConfigurationPreferred_CXP3_X1

CxpLinkConfigurationPreferred_CXP5_X1 = _PySpin.CxpLinkConfigurationPreferred_CXP5_X1

CxpLinkConfigurationPreferred_CXP6_X1 = _PySpin.CxpLinkConfigurationPreferred_CXP6_X1

CxpLinkConfigurationPreferred_CXP1_X2 = _PySpin.CxpLinkConfigurationPreferred_CXP1_X2

CxpLinkConfigurationPreferred_CXP2_X2 = _PySpin.CxpLinkConfigurationPreferred_CXP2_X2

CxpLinkConfigurationPreferred_CXP3_X2 = _PySpin.CxpLinkConfigurationPreferred_CXP3_X2

CxpLinkConfigurationPreferred_CXP5_X2 = _PySpin.CxpLinkConfigurationPreferred_CXP5_X2

CxpLinkConfigurationPreferred_CXP6_X2 = _PySpin.CxpLinkConfigurationPreferred_CXP6_X2

CxpLinkConfigurationPreferred_CXP1_X3 = _PySpin.CxpLinkConfigurationPreferred_CXP1_X3

CxpLinkConfigurationPreferred_CXP2_X3 = _PySpin.CxpLinkConfigurationPreferred_CXP2_X3

CxpLinkConfigurationPreferred_CXP3_X3 = _PySpin.CxpLinkConfigurationPreferred_CXP3_X3

CxpLinkConfigurationPreferred_CXP5_X3 = _PySpin.CxpLinkConfigurationPreferred_CXP5_X3

CxpLinkConfigurationPreferred_CXP6_X3 = _PySpin.CxpLinkConfigurationPreferred_CXP6_X3

CxpLinkConfigurationPreferred_CXP1_X4 = _PySpin.CxpLinkConfigurationPreferred_CXP1_X4

CxpLinkConfigurationPreferred_CXP2_X4 = _PySpin.CxpLinkConfigurationPreferred_CXP2_X4

CxpLinkConfigurationPreferred_CXP3_X4 = _PySpin.CxpLinkConfigurationPreferred_CXP3_X4

CxpLinkConfigurationPreferred_CXP5_X4 = _PySpin.CxpLinkConfigurationPreferred_CXP5_X4

CxpLinkConfigurationPreferred_CXP6_X4 = _PySpin.CxpLinkConfigurationPreferred_CXP6_X4

CxpLinkConfigurationPreferred_CXP1_X5 = _PySpin.CxpLinkConfigurationPreferred_CXP1_X5

CxpLinkConfigurationPreferred_CXP2_X5 = _PySpin.CxpLinkConfigurationPreferred_CXP2_X5

CxpLinkConfigurationPreferred_CXP3_X5 = _PySpin.CxpLinkConfigurationPreferred_CXP3_X5

CxpLinkConfigurationPreferred_CXP5_X5 = _PySpin.CxpLinkConfigurationPreferred_CXP5_X5

CxpLinkConfigurationPreferred_CXP6_X5 = _PySpin.CxpLinkConfigurationPreferred_CXP6_X5

CxpLinkConfigurationPreferred_CXP1_X6 = _PySpin.CxpLinkConfigurationPreferred_CXP1_X6

CxpLinkConfigurationPreferred_CXP2_X6 = _PySpin.CxpLinkConfigurationPreferred_CXP2_X6

CxpLinkConfigurationPreferred_CXP3_X6 = _PySpin.CxpLinkConfigurationPreferred_CXP3_X6

CxpLinkConfigurationPreferred_CXP5_X6 = _PySpin.CxpLinkConfigurationPreferred_CXP5_X6

CxpLinkConfigurationPreferred_CXP6_X6 = _PySpin.CxpLinkConfigurationPreferred_CXP6_X6

NUM_CXPLINKCONFIGURATIONPREFERRED = _PySpin.NUM_CXPLINKCONFIGURATIONPREFERRED

CxpLinkConfiguration_Auto = _PySpin.CxpLinkConfiguration_Auto

CxpLinkConfiguration_CXP1_X1 = _PySpin.CxpLinkConfiguration_CXP1_X1

CxpLinkConfiguration_CXP2_X1 = _PySpin.CxpLinkConfiguration_CXP2_X1

CxpLinkConfiguration_CXP3_X1 = _PySpin.CxpLinkConfiguration_CXP3_X1

CxpLinkConfiguration_CXP5_X1 = _PySpin.CxpLinkConfiguration_CXP5_X1

CxpLinkConfiguration_CXP6_X1 = _PySpin.CxpLinkConfiguration_CXP6_X1

CxpLinkConfiguration_CXP1_X2 = _PySpin.CxpLinkConfiguration_CXP1_X2

CxpLinkConfiguration_CXP2_X2 = _PySpin.CxpLinkConfiguration_CXP2_X2

CxpLinkConfiguration_CXP3_X2 = _PySpin.CxpLinkConfiguration_CXP3_X2

CxpLinkConfiguration_CXP5_X2 = _PySpin.CxpLinkConfiguration_CXP5_X2

CxpLinkConfiguration_CXP6_X2 = _PySpin.CxpLinkConfiguration_CXP6_X2

CxpLinkConfiguration_CXP1_X3 = _PySpin.CxpLinkConfiguration_CXP1_X3

CxpLinkConfiguration_CXP2_X3 = _PySpin.CxpLinkConfiguration_CXP2_X3

CxpLinkConfiguration_CXP3_X3 = _PySpin.CxpLinkConfiguration_CXP3_X3

CxpLinkConfiguration_CXP5_X3 = _PySpin.CxpLinkConfiguration_CXP5_X3

CxpLinkConfiguration_CXP6_X3 = _PySpin.CxpLinkConfiguration_CXP6_X3

CxpLinkConfiguration_CXP1_X4 = _PySpin.CxpLinkConfiguration_CXP1_X4

CxpLinkConfiguration_CXP2_X4 = _PySpin.CxpLinkConfiguration_CXP2_X4

CxpLinkConfiguration_CXP3_X4 = _PySpin.CxpLinkConfiguration_CXP3_X4

CxpLinkConfiguration_CXP5_X4 = _PySpin.CxpLinkConfiguration_CXP5_X4

CxpLinkConfiguration_CXP6_X4 = _PySpin.CxpLinkConfiguration_CXP6_X4

CxpLinkConfiguration_CXP1_X5 = _PySpin.CxpLinkConfiguration_CXP1_X5

CxpLinkConfiguration_CXP2_X5 = _PySpin.CxpLinkConfiguration_CXP2_X5

CxpLinkConfiguration_CXP3_X5 = _PySpin.CxpLinkConfiguration_CXP3_X5

CxpLinkConfiguration_CXP5_X5 = _PySpin.CxpLinkConfiguration_CXP5_X5

CxpLinkConfiguration_CXP6_X5 = _PySpin.CxpLinkConfiguration_CXP6_X5

CxpLinkConfiguration_CXP1_X6 = _PySpin.CxpLinkConfiguration_CXP1_X6

CxpLinkConfiguration_CXP2_X6 = _PySpin.CxpLinkConfiguration_CXP2_X6

CxpLinkConfiguration_CXP3_X6 = _PySpin.CxpLinkConfiguration_CXP3_X6

CxpLinkConfiguration_CXP5_X6 = _PySpin.CxpLinkConfiguration_CXP5_X6

CxpLinkConfiguration_CXP6_X6 = _PySpin.CxpLinkConfiguration_CXP6_X6

NUM_CXPLINKCONFIGURATION = _PySpin.NUM_CXPLINKCONFIGURATION

CxpConnectionTestMode_Off = _PySpin.CxpConnectionTestMode_Off

CxpConnectionTestMode_Mode1 = _PySpin.CxpConnectionTestMode_Mode1

NUM_CXPCONNECTIONTESTMODE = _PySpin.NUM_CXPCONNECTIONTESTMODE

CxpPoCxpStatus_Auto = _PySpin.CxpPoCxpStatus_Auto

CxpPoCxpStatus_Off = _PySpin.CxpPoCxpStatus_Off

CxpPoCxpStatus_Tripped = _PySpin.CxpPoCxpStatus_Tripped

NUM_CXPPOCXPSTATUS = _PySpin.NUM_CXPPOCXPSTATUS

Signed = _PySpin.Signed

Unsigned = _PySpin.Unsigned

_UndefinedSign = _PySpin._UndefinedSign

NI = _PySpin.NI

NA = _PySpin.NA

WO = _PySpin.WO

RO = _PySpin.RO

RW = _PySpin.RW

_UndefinedAccesMode = _PySpin._UndefinedAccesMode

_CycleDetectAccesMode = _PySpin._CycleDetectAccesMode

Beginner = _PySpin.Beginner

Expert = _PySpin.Expert

Guru = _PySpin.Guru

Invisible = _PySpin.Invisible

_UndefinedVisibility = _PySpin._UndefinedVisibility

NoCache = _PySpin.NoCache

WriteThrough = _PySpin.WriteThrough

WriteAround = _PySpin.WriteAround

_UndefinedCachingMode = _PySpin._UndefinedCachingMode

Linear = _PySpin.Linear

Logarithmic = _PySpin.Logarithmic

Boolean = _PySpin.Boolean

PureNumber = _PySpin.PureNumber

HexNumber = _PySpin.HexNumber

IPV4Address = _PySpin.IPV4Address

MACAddress = _PySpin.MACAddress

_UndefinedRepresentation = _PySpin._UndefinedRepresentation

BigEndian = _PySpin.BigEndian

LittleEndian = _PySpin.LittleEndian

_UndefinedEndian = _PySpin._UndefinedEndian

Custom = _PySpin.Custom

Standard = _PySpin.Standard

_UndefinedNameSpace = _PySpin._UndefinedNameSpace

_None = _PySpin._None

GEV = _PySpin.GEV

IIDC = _PySpin.IIDC

CL = _PySpin.CL

USB = _PySpin.USB

_UndefinedStandardNameSpace = _PySpin._UndefinedStandardNameSpace

Yes = _PySpin.Yes

No = _PySpin.No

_UndefinedYesNo = _PySpin._UndefinedYesNo

Increasing = _PySpin.Increasing

Decreasing = _PySpin.Decreasing

Varying = _PySpin.Varying

Automatic = _PySpin.Automatic

_UndefinedESlope = _PySpin._UndefinedESlope

xvLoad = _PySpin.xvLoad

xvCycles = _PySpin.xvCycles

xvSFNC = _PySpin.xvSFNC

xvDefault = _PySpin.xvDefault

xvAll = _PySpin.xvAll

_UndefinedEXMLValidation = _PySpin._UndefinedEXMLValidation

fnAutomatic = _PySpin.fnAutomatic

fnFixed = _PySpin.fnFixed

fnScientific = _PySpin.fnScientific

_UndefinedEDisplayNotation = _PySpin._UndefinedEDisplayNotation

intfIValue = _PySpin.intfIValue

intfIBase = _PySpin.intfIBase

intfIInteger = _PySpin.intfIInteger

intfIBoolean = _PySpin.intfIBoolean

intfICommand = _PySpin.intfICommand

intfIFloat = _PySpin.intfIFloat

intfIString = _PySpin.intfIString

intfIRegister = _PySpin.intfIRegister

intfICategory = _PySpin.intfICategory

intfIEnumeration = _PySpin.intfIEnumeration

intfIEnumEntry = _PySpin.intfIEnumEntry

intfIPort = _PySpin.intfIPort

ctParentNodes = _PySpin.ctParentNodes

ctReadingChildren = _PySpin.ctReadingChildren

ctWritingChildren = _PySpin.ctWritingChildren

ctInvalidatingChildren = _PySpin.ctInvalidatingChildren

ctDependingNodes = _PySpin.ctDependingNodes

ctTerminalNodes = _PySpin.ctTerminalNodes

noIncrement = _PySpin.noIncrement

fixedIncrement = _PySpin.fixedIncrement

listIncrement = _PySpin.listIncrement

idFrom = _PySpin.idFrom

idTo = _PySpin.idTo

idNone = _PySpin.idNone

v1_0 = _PySpin.v1_0

v1_1 = _PySpin.v1_1

_Undefined = _PySpin._Undefined

class Version_t(object):
    r"""


    Version

    C++ includes: GCTypes.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Major = property(_PySpin.Version_t_Major_get, _PySpin.Version_t_Major_set, doc=r"""Major""")
    Minor = property(_PySpin.Version_t_Minor_get, _PySpin.Version_t_Minor_set, doc=r"""Minor""")
    SubMinor = property(_PySpin.Version_t_SubMinor_get, _PySpin.Version_t_SubMinor_set, doc=r"""SubMinor""")

    def __init__(self):
        r"""__init__(self) -> Version_t"""
        _PySpin.Version_t_swiginit(self, _PySpin.new_Version_t())

# Register Version_t in _PySpin:
_PySpin.Version_t_swigregister(Version_t)

class IBase(object):
    r"""Proxy of C++ Spinnaker::GenApi::IBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.IBase_GetAccessMode(self)

# Register IBase in _PySpin:
_PySpin.IBase_swigregister(IBase)

class gcstring(object):
    r"""Proxy of C++ Spinnaker::GenICam::gcstring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> gcstring
        __init__(self, pc) -> gcstring

        Parameters
        ----------
        pc: char const *

        __init__(self, pc, n) -> gcstring

        Parameters
        ----------
        pc: char const *
        n: size_t

        __init__(self, count, ch) -> gcstring

        Parameters
        ----------
        count: size_t
        ch: char

        __init__(self, str) -> gcstring

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        Spinnaker::GenICam::gcstring::gcstring(const gcstring &str) 
        """
        _PySpin.gcstring_swiginit(self, _PySpin.new_gcstring(*args))
    __swig_destroy__ = _PySpin.delete_gcstring

    def append(self, *args):
        r"""
        append(self, str) -> gcstring

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        append(self, count, ch) -> gcstring

        Parameters
        ----------
        count: size_t
        ch: char

        virtual
        gcstring& Spinnaker::GenICam::gcstring::append(size_t count, char ch)

        """
        return _PySpin.gcstring_append(self, *args)

    def assign(self, *args):
        r"""
        assign(self, str) -> gcstring

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        assign(self, count, ch) -> gcstring

        Parameters
        ----------
        count: size_t
        ch: char

        assign(self, pc) -> gcstring

        Parameters
        ----------
        pc: char const *

        assign(self, pc, n) -> gcstring

        Parameters
        ----------
        pc: char const *
        n: size_t

        virtual
        gcstring& Spinnaker::GenICam::gcstring::assign(const char *pc, size_t
        n) 
        """
        return _PySpin.gcstring_assign(self, *args)

    def compare(self, str):
        r"""
        compare(self, str) -> int

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        virtual
        int Spinnaker::GenICam::gcstring::compare(const gcstring &str) const

        """
        return _PySpin.gcstring_compare(self, str)

    def c_str(self):
        r"""
        c_str(self) -> char const *
        virtual
        const char* Spinnaker::GenICam::gcstring::c_str(void) const 
        """
        return _PySpin.gcstring_c_str(self)

    def empty(self):
        r"""
        empty(self) -> bool
        virtual
        bool Spinnaker::GenICam::gcstring::empty(void) const 
        """
        return _PySpin.gcstring_empty(self)

    def find(self, *args):
        r"""
        find(self, ch, offset=0) -> size_t

        Parameters
        ----------
        ch: char
        offset: size_t

        find(self, str, offset=0) -> size_t

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &
        offset: size_t

        find(self, str, offset, count) -> size_t

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &
        offset: size_t
        count: size_t

        find(self, pc, offset=0) -> size_t

        Parameters
        ----------
        pc: char const *
        offset: size_t

        find(self, pc, offset, count) -> size_t

        Parameters
        ----------
        pc: char const *
        offset: size_t
        count: size_t

        virtual
        size_t Spinnaker::GenICam::gcstring::find(const char *pc, size_t
        offset, size_t count) const 
        """
        return _PySpin.gcstring_find(self, *args)

    def length(self):
        r"""
        length(self) -> size_t
        virtual
        size_t Spinnaker::GenICam::gcstring::length(void) const 
        """
        return _PySpin.gcstring_length(self)

    def size(self):
        r"""
        size(self) -> size_t
        virtual
        size_t Spinnaker::GenICam::gcstring::size(void) const 
        """
        return _PySpin.gcstring_size(self)

    def resize(self, n):
        r"""
        resize(self, n)

        Parameters
        ----------
        n: size_t

        virtual
        void Spinnaker::GenICam::gcstring::resize(size_t n) 
        """
        return _PySpin.gcstring_resize(self, n)

    def max_size(self):
        r"""
        max_size(self) -> size_t
        virtual size_t Spinnaker::GenICam::gcstring::max_size() const 
        """
        return _PySpin.gcstring_max_size(self)

    def substr(self, *args):
        r"""
        substr(self, offset=0, count=size_t(-1)) -> gcstring

        Parameters
        ----------
        offset: size_t
        count: size_t

        virtual
        gcstring Spinnaker::GenICam::gcstring::substr(size_t offset=0, size_t
        count=GCSTRING_NPOS) const 
        """
        return _PySpin.gcstring_substr(self, *args)

    def find_first_of(self, str, offset=0):
        r"""
        find_first_of(self, str, offset=0) -> size_t

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &
        offset: size_t

        virtual size_t Spinnaker::GenICam::gcstring::find_first_of(const
        gcstring &str, size_t offset=0) const 
        """
        return _PySpin.gcstring_find_first_of(self, str, offset)

    def find_first_not_of(self, str, offset=0):
        r"""
        find_first_not_of(self, str, offset=0) -> size_t

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &
        offset: size_t

        virtual size_t Spinnaker::GenICam::gcstring::find_first_not_of(const
        gcstring &str, size_t offset=0) const 
        """
        return _PySpin.gcstring_find_first_not_of(self, str, offset)

    @staticmethod
    def _npos():
        r"""_npos() -> size_t"""
        return _PySpin.gcstring__npos()

    def swap(self, Right):
        r"""
        swap(self, Right)

        Parameters
        ----------
        Right: Spinnaker::GenICam::gcstring &

        virtual
        void Spinnaker::GenICam::gcstring::swap(gcstring &Right) 
        """
        return _PySpin.gcstring_swap(self, Right)

    def __ne__(self, *args):
        r"""
        __ne__(self, str) -> bool

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        __ne__(self, pc) -> bool

        Parameters
        ----------
        pc: char const *

        """
        return _PySpin.gcstring___ne__(self, *args)

    def __eq__(self, *args):
        r"""
        __eq__(self, str) -> bool

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        __eq__(self, pc) -> bool

        Parameters
        ----------
        pc: char const *

        """
        return _PySpin.gcstring___eq__(self, *args)

    def __lt__(self, str):
        r"""
        __lt__(self, str) -> bool

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.gcstring___lt__(self, str)

    def __gt__(self, str):
        r"""
        __gt__(self, str) -> bool

        Parameters
        ----------
        str: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.gcstring___gt__(self, str)

    def __repr__(self):
        r"""__repr__(self) -> char const *"""
        return _PySpin.gcstring___repr__(self)

# Register gcstring in _PySpin:
_PySpin.gcstring_swigregister(gcstring)

def gcstring__npos():
    r"""gcstring__npos() -> size_t"""
    return _PySpin.gcstring__npos()
gcstring.npos = _PySpin.cvar.gcstring_npos


def ThrowBadAlloc():
    r"""
    ThrowBadAlloc()
    SPINNAKER_API void Spinnaker::GenICam::ThrowBadAlloc() 
    """
    return _PySpin.ThrowBadAlloc()
USE_TEMP_CACHE_FILE = _PySpin.USE_TEMP_CACHE_FILE


def DoesEnvironmentVariableExist(VariableName):
    r"""
    DoesEnvironmentVariableExist(VariableName) -> bool

    Parameters
    ----------
    VariableName: Spinnaker::GenICam::gcstring const &

    SPINNAKER_API bool
    Spinnaker::GenICam::DoesEnvironmentVariableExist(const
    Spinnaker::GenICam::gcstring &VariableName)

    Returns true if an environment variable exists 
    """
    return _PySpin.DoesEnvironmentVariableExist(VariableName)

def GetValueOfEnvironmentVariable(*args):
    r"""
    GetValueOfEnvironmentVariable(VariableName) -> gcstring

    Parameters
    ----------
    VariableName: Spinnaker::GenICam::gcstring const &

    GetValueOfEnvironmentVariable(VariableName, VariableContent) -> bool

    Parameters
    ----------
    VariableName: Spinnaker::GenICam::gcstring const &
    VariableContent: Spinnaker::GenICam::gcstring &

    SPINNAKER_API bool
    Spinnaker::GenICam::GetValueOfEnvironmentVariable(const gcstring
    &VariableName, gcstring &VariableContent)

    Retrieve the value of an environment variable true if environment
    variable was found, otherwise false 
    """
    return _PySpin.GetValueOfEnvironmentVariable(*args)

def UrlEncode(Input):
    r"""
    UrlEncode(Input) -> gcstring

    Parameters
    ----------
    Input: Spinnaker::GenICam::gcstring const &

    SPINNAKER_API
    gcstring Spinnaker::GenICam::UrlEncode(const gcstring &Input)

    Converts \\ to / and replaces all unsave characters by their xx
    equivalent 
    """
    return _PySpin.UrlEncode(Input)

def UrlDecode(Input):
    r"""
    UrlDecode(Input) -> gcstring

    Parameters
    ----------
    Input: Spinnaker::GenICam::gcstring const &

    SPINNAKER_API
    gcstring Spinnaker::GenICam::UrlDecode(const gcstring &Input)

    Replaces xx escapes by their char equivalent 
    """
    return _PySpin.UrlDecode(Input)

def ReplaceEnvironmentVariables(Buffer, ReplaceBlankBy20=False):
    r"""
    ReplaceEnvironmentVariables(Buffer, ReplaceBlankBy20=False)

    Parameters
    ----------
    Buffer: Spinnaker::GenICam::gcstring &
    ReplaceBlankBy20: bool

    SPINNAKER_API void
    Spinnaker::GenICam::ReplaceEnvironmentVariables(gcstring &Buffer, bool
    ReplaceBlankBy20=false)

    Replaces  in a string and replace ' ' with %20 
    """
    return _PySpin.ReplaceEnvironmentVariables(Buffer, ReplaceBlankBy20)

def GetGenICamCacheFolder():
    r"""
    GetGenICamCacheFolder() -> gcstring
    SPINNAKER_API gcstring Spinnaker::GenICam::GetGenICamCacheFolder(void)

    Retrieve the path of the GenICam cache folder The path to the cache
    folder can be stored by calling SetGenICamCacheFolder(). If
    GetGenICamCacheFolder() is called before SetGenICamCacheFolder(), it
    will return the value of environment variable GENICAM_CACHE_Vx_y. If
    this environment variable does not exist, an exception will be thrown.

    """
    return _PySpin.GetGenICamCacheFolder()

def GetGenICamLogConfig():
    r"""
    GetGenICamLogConfig() -> gcstring
    SPINNAKER_API gcstring Spinnaker::GenICam::GetGenICamLogConfig(void)

    Retrieve the path of the GenICam logging properties file

    The path to the logging properties file can be stored by calling
    SetGenICamLogConfig(). If GetGenICamLogConfig() is called before
    SetGenICamLogConfig(), it will return the value of environment
    variable GENICAM_LOG_CONFIG_Vx_y. If this environment variable does
    not exist, an exception will be thrown. 
    """
    return _PySpin.GetGenICamLogConfig()

def GetGenICamCLProtocolFolder():
    r"""
    GetGenICamCLProtocolFolder() -> gcstring
    SPINNAKER_API gcstring
    Spinnaker::GenICam::GetGenICamCLProtocolFolder(void)

    Retrieve the path of the CLProtocol folder The path to the CLProtocol
    folder can be stored by calling SetGenICamCLProtocolFolder(). If
    GetGenICamCLProtocolFolder() is called before
    SetGenICamCLProtocolFolder(), it will return the value of environment
    variable GENICAM_CLPROTOCOL. If this environment variable does not
    exist, an exception will be thrown. 
    """
    return _PySpin.GetGenICamCLProtocolFolder()

def SetGenICamCacheFolder(path):
    r"""
    SetGenICamCacheFolder(path)

    Parameters
    ----------
    path: Spinnaker::GenICam::gcstring const &

    SPINNAKER_API void Spinnaker::GenICam::SetGenICamCacheFolder(const
    gcstring &path)

    Stores the path of the GenICam cache folder 
    """
    return _PySpin.SetGenICamCacheFolder(path)

def SetGenICamLogConfig(path):
    r"""
    SetGenICamLogConfig(path)

    Parameters
    ----------
    path: Spinnaker::GenICam::gcstring const &

    SPINNAKER_API void Spinnaker::GenICam::SetGenICamLogConfig(const
    gcstring &path)

    Stores the path of the GenICam logging properties file 
    """
    return _PySpin.SetGenICamLogConfig(path)

def SetGenICamCLProtocolFolder(path):
    r"""
    SetGenICamCLProtocolFolder(path)

    Parameters
    ----------
    path: Spinnaker::GenICam::gcstring const &

    SPINNAKER_API void
    Spinnaker::GenICam::SetGenICamCLProtocolFolder(const gcstring &path)

    Stores the path of the CLProtocol folder 
    """
    return _PySpin.SetGenICamCLProtocolFolder(path)

def Tokenize(*args):
    r"""
    Tokenize(str, delimiters=" ")

    Parameters
    ----------
    str: Spinnaker::GenICam::gcstring const &
    delimiters: Spinnaker::GenICam::gcstring const &

    SPINNAKER_API
    void Spinnaker::GenICam::Tokenize(const gcstring &str, gcstring_vector
    &tokens, const gcstring &delimiters=" ")

    splits str input string into a list of tokens using the delimiter 
    """
    return _PySpin.Tokenize(*args)

def GetFiles(FileTemplate, DirectoriesOnly=False):
    r"""
    GetFiles(FileTemplate, DirectoriesOnly=False)

    Parameters
    ----------
    FileTemplate: Spinnaker::GenICam::gcstring const &
    DirectoriesOnly: bool const

    SPINNAKER_API
    void Spinnaker::GenICam::GetFiles(const gcstring &FileTemplate,
    gcstring_vector &FileNames, const bool DirectoriesOnly=false)

    Gets a list of files or directories matching a given FileTemplate 
    """
    return _PySpin.GetFiles(FileTemplate, DirectoriesOnly)

def GetModulePathFromFunction(pFunction):
    r"""
    GetModulePathFromFunction(pFunction) -> gcstring

    Parameters
    ----------
    pFunction: void *

    SPINNAKER_API gcstring
    Spinnaker::GenICam::GetModulePathFromFunction(void *pFunction)

    true = only subdirectories (ex . and ..) are retrieved; false = only
    files are retrieved

    Gets the full path to the module (DLL/SO) containing the given
    pFunction; empty string if not found. 
    """
    return _PySpin.GetModulePathFromFunction(pFunction)
__LINE_STR__ = _PySpin.__LINE_STR__

__LOCATION__ = _PySpin.__LOCATION__

__WARN__ = _PySpin.__WARN__

__ERR__ = _PySpin.__ERR__

__TODO__ = _PySpin.__TODO__

class int64_autovector_t(object):
    r"""


    Vector of integers with reference counting.

    C++ includes: Autovector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> int64_autovector_t
        __init__(self, obj) -> int64_autovector_t

        Parameters
        ----------
        obj: Spinnaker::GenApi::int64_autovector_t const &

        __init__(self, n) -> int64_autovector_t

        Parameters
        ----------
        n: size_t

        Spinnaker::GenApi::int64_autovector_t::int64_autovector_t(size_t n) 
        """
        _PySpin.int64_autovector_t_swiginit(self, _PySpin.new_int64_autovector_t(*args))
    __swig_destroy__ = _PySpin.delete_int64_autovector_t

    def size(self):
        r"""
        size(self) -> size_t
        size_t Spinnaker::GenApi::int64_autovector_t::size() const 
        """
        return _PySpin.int64_autovector_t_size(self)

    def __getitem__(self, i):
        r"""
        __getitem__(self, i) -> int64_t

        Parameters
        ----------
        i: size_t

        """
        return _PySpin.int64_autovector_t___getitem__(self, i)

    def __len__(self):
        r"""__len__(self) -> size_t"""
        return _PySpin.int64_autovector_t___len__(self)

# Register int64_autovector_t in _PySpin:
_PySpin.int64_autovector_t_swigregister(int64_autovector_t)

class double_autovector_t(object):
    r"""


    Vector of doubles with reference counting.

    C++ includes: Autovector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> double_autovector_t
        __init__(self, obj) -> double_autovector_t

        Parameters
        ----------
        obj: Spinnaker::GenApi::double_autovector_t const &

        __init__(self, n) -> double_autovector_t

        Parameters
        ----------
        n: size_t

        Spinnaker::GenApi::double_autovector_t::double_autovector_t(size_t n)

        """
        _PySpin.double_autovector_t_swiginit(self, _PySpin.new_double_autovector_t(*args))
    __swig_destroy__ = _PySpin.delete_double_autovector_t

    def size(self):
        r"""
        size(self) -> size_t
        size_t Spinnaker::GenApi::double_autovector_t::size() const 
        """
        return _PySpin.double_autovector_t_size(self)

    def __getitem__(self, i):
        r"""
        __getitem__(self, i) -> double

        Parameters
        ----------
        i: size_t

        """
        return _PySpin.double_autovector_t___getitem__(self, i)

    def __len__(self):
        r"""__len__(self) -> size_t"""
        return _PySpin.double_autovector_t___len__(self)

# Register double_autovector_t in _PySpin:
_PySpin.double_autovector_t_swigregister(double_autovector_t)

class IReference(object):
    r"""Proxy of C++ Spinnaker::GenApi::IReference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.IReference_SetReference(self, pBase)

# Register IReference in _PySpin:
_PySpin.IReference_swigregister(IReference)

class IEnumReference(object):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumReference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetEnumReference(self, Index, Name):
        r"""
        SetEnumReference(self, Index, Name)

        Parameters
        ----------
        Index: int
        Name: Spinnaker::GenICam::gcstring

        """
        return _PySpin.IEnumReference_SetEnumReference(self, Index, Name)

    def SetNumEnums(self, NumEnums):
        r"""
        SetNumEnums(self, NumEnums)

        Parameters
        ----------
        NumEnums: int

        """
        return _PySpin.IEnumReference_SetNumEnums(self, NumEnums)

# Register IEnumReference in _PySpin:
_PySpin.IEnumReference_swigregister(IEnumReference)

class ESignClass(object):
    r"""


    Holds conversion methods for the sign enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::ESign *

        """
        return _PySpin.ESignClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::ESign *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::ESign

        """
        return _PySpin.ESignClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> ESignClass"""
        _PySpin.ESignClass_swiginit(self, _PySpin.new_ESignClass())

# Register ESignClass in _PySpin:
_PySpin.ESignClass_swigregister(ESignClass)

def ESignClass_FromString(ValueStr, pValue):
    r"""
    ESignClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::ESign *

    """
    return _PySpin.ESignClass_FromString(ValueStr, pValue)

def ESignClass_ToString(*args):
    r"""
    ESignClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::ESign *

    ESignClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::ESign

    """
    return _PySpin.ESignClass_ToString(*args)

class EEndianessClass(object):
    r"""


    Holds conversion methods for the endianess enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EEndianess *

        """
        return _PySpin.EEndianessClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EEndianess *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EEndianess

        """
        return _PySpin.EEndianessClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EEndianessClass"""
        _PySpin.EEndianessClass_swiginit(self, _PySpin.new_EEndianessClass())

# Register EEndianessClass in _PySpin:
_PySpin.EEndianessClass_swigregister(EEndianessClass)

def EEndianessClass_FromString(ValueStr, pValue):
    r"""
    EEndianessClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EEndianess *

    """
    return _PySpin.EEndianessClass_FromString(ValueStr, pValue)

def EEndianessClass_ToString(*args):
    r"""
    EEndianessClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EEndianess *

    EEndianessClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EEndianess

    """
    return _PySpin.EEndianessClass_ToString(*args)

class ERepresentationClass(object):
    r"""


    Holds conversion methods for the representation enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::ERepresentation *

        """
        return _PySpin.ERepresentationClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::ERepresentation *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::ERepresentation

        """
        return _PySpin.ERepresentationClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> ERepresentationClass"""
        _PySpin.ERepresentationClass_swiginit(self, _PySpin.new_ERepresentationClass())

# Register ERepresentationClass in _PySpin:
_PySpin.ERepresentationClass_swigregister(ERepresentationClass)

def ERepresentationClass_FromString(ValueStr, pValue):
    r"""
    ERepresentationClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::ERepresentation *

    """
    return _PySpin.ERepresentationClass_FromString(ValueStr, pValue)

def ERepresentationClass_ToString(*args):
    r"""
    ERepresentationClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::ERepresentation *

    ERepresentationClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::ERepresentation

    """
    return _PySpin.ERepresentationClass_ToString(*args)

class EVisibilityClass(object):
    r"""


    Holds conversion methods for the visibility enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EVisibility *

        """
        return _PySpin.EVisibilityClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EVisibility *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.EVisibilityClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EVisibilityClass"""
        _PySpin.EVisibilityClass_swiginit(self, _PySpin.new_EVisibilityClass())

# Register EVisibilityClass in _PySpin:
_PySpin.EVisibilityClass_swigregister(EVisibilityClass)

def EVisibilityClass_FromString(ValueStr, pValue):
    r"""
    EVisibilityClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EVisibility *

    """
    return _PySpin.EVisibilityClass_FromString(ValueStr, pValue)

def EVisibilityClass_ToString(*args):
    r"""
    EVisibilityClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EVisibility *

    EVisibilityClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EVisibility

    """
    return _PySpin.EVisibilityClass_ToString(*args)

class EAccessModeClass(object):
    r"""


    Holds conversion methods for the access mode enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EAccessMode *

        """
        return _PySpin.EAccessModeClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EAccessMode *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.EAccessModeClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EAccessModeClass"""
        _PySpin.EAccessModeClass_swiginit(self, _PySpin.new_EAccessModeClass())

# Register EAccessModeClass in _PySpin:
_PySpin.EAccessModeClass_swigregister(EAccessModeClass)

def EAccessModeClass_FromString(ValueStr, pValue):
    r"""
    EAccessModeClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EAccessMode *

    """
    return _PySpin.EAccessModeClass_FromString(ValueStr, pValue)

def EAccessModeClass_ToString(*args):
    r"""
    EAccessModeClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EAccessMode *

    EAccessModeClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EAccessMode

    """
    return _PySpin.EAccessModeClass_ToString(*args)

class ECachingModeClass(object):
    r"""


    Holds conversion methods for the caching mode enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::ECachingMode *

        """
        return _PySpin.ECachingModeClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::ECachingMode *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::ECachingMode

        """
        return _PySpin.ECachingModeClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> ECachingModeClass"""
        _PySpin.ECachingModeClass_swiginit(self, _PySpin.new_ECachingModeClass())

# Register ECachingModeClass in _PySpin:
_PySpin.ECachingModeClass_swigregister(ECachingModeClass)

def ECachingModeClass_FromString(ValueStr, pValue):
    r"""
    ECachingModeClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::ECachingMode *

    """
    return _PySpin.ECachingModeClass_FromString(ValueStr, pValue)

def ECachingModeClass_ToString(*args):
    r"""
    ECachingModeClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::ECachingMode *

    ECachingModeClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::ECachingMode

    """
    return _PySpin.ECachingModeClass_ToString(*args)

class ENameSpaceClass(object):
    r"""


    Holds conversion methods for the namespace enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::ENameSpace *

        """
        return _PySpin.ENameSpaceClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::ENameSpace *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::ENameSpace

        """
        return _PySpin.ENameSpaceClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> ENameSpaceClass"""
        _PySpin.ENameSpaceClass_swiginit(self, _PySpin.new_ENameSpaceClass())

# Register ENameSpaceClass in _PySpin:
_PySpin.ENameSpaceClass_swigregister(ENameSpaceClass)

def ENameSpaceClass_FromString(ValueStr, pValue):
    r"""
    ENameSpaceClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::ENameSpace *

    """
    return _PySpin.ENameSpaceClass_FromString(ValueStr, pValue)

def ENameSpaceClass_ToString(*args):
    r"""
    ENameSpaceClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::ENameSpace *

    ENameSpaceClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::ENameSpace

    """
    return _PySpin.ENameSpaceClass_ToString(*args)

class EYesNoClass(object):
    r"""


    Holds conversion methods for the standard namespace enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EYesNo *

        """
        return _PySpin.EYesNoClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EYesNo *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EYesNo

        """
        return _PySpin.EYesNoClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EYesNoClass"""
        _PySpin.EYesNoClass_swiginit(self, _PySpin.new_EYesNoClass())

# Register EYesNoClass in _PySpin:
_PySpin.EYesNoClass_swigregister(EYesNoClass)

def EYesNoClass_FromString(ValueStr, pValue):
    r"""
    EYesNoClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EYesNo *

    """
    return _PySpin.EYesNoClass_FromString(ValueStr, pValue)

def EYesNoClass_ToString(*args):
    r"""
    EYesNoClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EYesNo *

    EYesNoClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EYesNo

    """
    return _PySpin.EYesNoClass_ToString(*args)

class EStandardNameSpaceClass(object):
    r"""


    Holds conversion methods for the standard namespace enumeration.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EStandardNameSpace *

        """
        return _PySpin.EStandardNameSpaceClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EStandardNameSpace *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EStandardNameSpace

        """
        return _PySpin.EStandardNameSpaceClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EStandardNameSpaceClass"""
        _PySpin.EStandardNameSpaceClass_swiginit(self, _PySpin.new_EStandardNameSpaceClass())

# Register EStandardNameSpaceClass in _PySpin:
_PySpin.EStandardNameSpaceClass_swigregister(EStandardNameSpaceClass)

def EStandardNameSpaceClass_FromString(ValueStr, pValue):
    r"""
    EStandardNameSpaceClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EStandardNameSpace *

    """
    return _PySpin.EStandardNameSpaceClass_FromString(ValueStr, pValue)

def EStandardNameSpaceClass_ToString(*args):
    r"""
    EStandardNameSpaceClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EStandardNameSpace *

    EStandardNameSpaceClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EStandardNameSpace

    """
    return _PySpin.EStandardNameSpaceClass_ToString(*args)

class ESlopeClass(object):
    r"""


    Holds conversion methods for the converter formulas.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::ESlope *

        """
        return _PySpin.ESlopeClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::ESlope *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::ESlope

        """
        return _PySpin.ESlopeClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> ESlopeClass"""
        _PySpin.ESlopeClass_swiginit(self, _PySpin.new_ESlopeClass())

# Register ESlopeClass in _PySpin:
_PySpin.ESlopeClass_swigregister(ESlopeClass)

def ESlopeClass_FromString(ValueStr, pValue):
    r"""
    ESlopeClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::ESlope *

    """
    return _PySpin.ESlopeClass_FromString(ValueStr, pValue)

def ESlopeClass_ToString(*args):
    r"""
    ESlopeClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::ESlope *

    ESlopeClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::ESlope

    """
    return _PySpin.ESlopeClass_ToString(*args)

class EDisplayNotationClass(object):
    r"""


    Holds conversion methods for the notation type of floats.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EDisplayNotation *

        """
        return _PySpin.EDisplayNotationClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EDisplayNotation *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EDisplayNotation

        """
        return _PySpin.EDisplayNotationClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EDisplayNotationClass"""
        _PySpin.EDisplayNotationClass_swiginit(self, _PySpin.new_EDisplayNotationClass())

# Register EDisplayNotationClass in _PySpin:
_PySpin.EDisplayNotationClass_swigregister(EDisplayNotationClass)

def EDisplayNotationClass_FromString(ValueStr, pValue):
    r"""
    EDisplayNotationClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EDisplayNotation *

    """
    return _PySpin.EDisplayNotationClass_FromString(ValueStr, pValue)

def EDisplayNotationClass_ToString(*args):
    r"""
    EDisplayNotationClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EDisplayNotation *

    EDisplayNotationClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EDisplayNotation

    """
    return _PySpin.EDisplayNotationClass_ToString(*args)

class EInputDirectionClass(object):
    r"""


    Holds conversion methods for the notation type of floats.

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EInputDirection *

        """
        return _PySpin.EInputDirectionClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EInputDirection *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EInputDirection

        """
        return _PySpin.EInputDirectionClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EInputDirectionClass"""
        _PySpin.EInputDirectionClass_swiginit(self, _PySpin.new_EInputDirectionClass())

# Register EInputDirectionClass in _PySpin:
_PySpin.EInputDirectionClass_swigregister(EInputDirectionClass)

def EInputDirectionClass_FromString(ValueStr, pValue):
    r"""
    EInputDirectionClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EInputDirection *

    """
    return _PySpin.EInputDirectionClass_FromString(ValueStr, pValue)

def EInputDirectionClass_ToString(*args):
    r"""
    EInputDirectionClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EInputDirection *

    EInputDirectionClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EInputDirection

    """
    return _PySpin.EInputDirectionClass_ToString(*args)

class EGenApiSchemaVersionClass(object):
    r"""


    helper class converting EGenApiSchemaVersion from and to string

    C++ includes: EnumClasses.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromString(ValueStr, pValue):
        r"""
        FromString(ValueStr, pValue) -> bool

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        pValue: Spinnaker::GenApi::EGenApiSchemaVersion *

        """
        return _PySpin.EGenApiSchemaVersionClass_FromString(ValueStr, pValue)

    @staticmethod
    def ToString(*args):
        r"""
        ToString(ValueStr, pValue)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring &
        pValue: Spinnaker::GenApi::EGenApiSchemaVersion *

        ToString(Value) -> gcstring

        Parameters
        ----------
        Value: enum Spinnaker::GenApi::EGenApiSchemaVersion

        """
        return _PySpin.EGenApiSchemaVersionClass_ToString(*args)

    def __init__(self):
        r"""__init__(self) -> EGenApiSchemaVersionClass"""
        _PySpin.EGenApiSchemaVersionClass_swiginit(self, _PySpin.new_EGenApiSchemaVersionClass())

# Register EGenApiSchemaVersionClass in _PySpin:
_PySpin.EGenApiSchemaVersionClass_swigregister(EGenApiSchemaVersionClass)

def EGenApiSchemaVersionClass_FromString(ValueStr, pValue):
    r"""
    EGenApiSchemaVersionClass_FromString(ValueStr, pValue) -> bool

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring const &
    pValue: Spinnaker::GenApi::EGenApiSchemaVersion *

    """
    return _PySpin.EGenApiSchemaVersionClass_FromString(ValueStr, pValue)

def EGenApiSchemaVersionClass_ToString(*args):
    r"""
    EGenApiSchemaVersionClass_ToString(ValueStr, pValue)

    Parameters
    ----------
    ValueStr: Spinnaker::GenICam::gcstring &
    pValue: Spinnaker::GenApi::EGenApiSchemaVersion *

    EGenApiSchemaVersionClass_ToString(Value) -> gcstring

    Parameters
    ----------
    Value: enum Spinnaker::GenApi::EGenApiSchemaVersion

    """
    return _PySpin.EGenApiSchemaVersionClass_ToString(*args)

class ISelector(IBase):
    r"""Proxy of C++ Spinnaker::GenApi::ISelector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.ISelector_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.ISelector_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.ISelector_GetSelectingFeatures(self, arg2)

# Register ISelector in _PySpin:
_PySpin.ISelector_swigregister(ISelector)

class INode(ISelector, IReference):
    r"""Proxy of C++ Spinnaker::GenApi::INode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.INode_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.INode_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.INode_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.INode_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.INode_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.INode_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.INode_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.INode_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.INode_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.INode_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.INode_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.INode_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, Children, LinkType=ctReadingChildren)

        Parameters
        ----------
        Children: Spinnaker::GenApi::NodeList_t &
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.INode_GetChildren(self, *args)

    def GetParents(self, Parents):
        r"""
        GetParents(self, Parents)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.INode_GetParents(self, Parents)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.INode_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.INode_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.INode_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.INode_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.INode_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.INode_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.INode_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.INode_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.INode_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.INode_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.INode_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.INode_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.INode_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.INode_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.INode_IsFeature(self)

    def __eq__(self, nullPtr):
        r"""
        __eq__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: int

        """
        return _PySpin.INode___eq__(self, nullPtr)

    def __ne__(self, nullPtr):
        r"""
        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: int

        """
        return _PySpin.INode___ne__(self, nullPtr)

# Register INode in _PySpin:
_PySpin.INode_swigregister(INode)


def IsVisible(Visibility, MaxVisiblity):
    r"""
    IsVisible(Visibility, MaxVisiblity) -> bool

    Parameters
    ----------
    Visibility: enum Spinnaker::GenApi::EVisibility
    MaxVisiblity: enum Spinnaker::GenApi::EVisibility

    bool
    Spinnaker::GenApi::IsVisible(EVisibility Visibility, EVisibility
    MaxVisiblity)

    Tests Visibility CAVE : this relies on the EVisibility enum's coding

    """
    return _PySpin.IsVisible(Visibility, MaxVisiblity)

def IsCacheable(CachingMode):
    r"""
    IsCacheable(CachingMode) -> bool

    Parameters
    ----------
    CachingMode: enum Spinnaker::GenApi::ECachingMode

    bool
    Spinnaker::GenApi::IsCacheable(ECachingMode CachingMode)

    Tests Cacheability 
    """
    return _PySpin.IsCacheable(CachingMode)

def Combine(*args):
    r"""
    Combine(Peter, Paul) -> Spinnaker::GenApi::EAccessMode

    Parameters
    ----------
    Peter: enum Spinnaker::GenApi::EAccessMode
    Paul: enum Spinnaker::GenApi::EAccessMode

    Combine(Peter, Paul) -> Spinnaker::GenApi::EVisibility

    Parameters
    ----------
    Peter: enum Spinnaker::GenApi::EVisibility
    Paul: enum Spinnaker::GenApi::EVisibility

    Combine(Peter, Paul) -> Spinnaker::GenApi::ECachingMode

    Parameters
    ----------
    Peter: enum Spinnaker::GenApi::ECachingMode
    Paul: enum Spinnaker::GenApi::ECachingMode

    ECachingMode
    Spinnaker::GenApi::Combine(ECachingMode Peter, ECachingMode Paul)

    Computes which CachingMode results from a combination 
    """
    return _PySpin.Combine(*args)
class IValue(INode):
    r"""Proxy of C++ Spinnaker::GenApi::IValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.IValue_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IValue_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.IValue_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.IValue_IsValueCacheValid(self)

# Register IValue in _PySpin:
_PySpin.IValue_swigregister(IValue)

class node_vector(object):
    r"""Proxy of C++ Spinnaker::GenApi::node_vector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> node_vector
        __init__(self, uiSize) -> node_vector

        Parameters
        ----------
        uiSize: size_t

        __init__(self, obj) -> node_vector

        Parameters
        ----------
        obj: Spinnaker::GenApi::node_vector const &

        """
        _PySpin.node_vector_swiginit(self, _PySpin.new_node_vector(*args))
    __swig_destroy__ = _PySpin.delete_node_vector

    def assign(self, n, val):
        r"""
        assign(self, n, val)

        Parameters
        ----------
        n: size_t
        val: Spinnaker::GenApi::node_vector::T const &

        """
        return _PySpin.node_vector_assign(self, n, val)

    def clear(self):
        r"""clear(self)"""
        return _PySpin.node_vector_clear(self)

    def at(self, *args):
        r"""
        at(self, uiIndex) -> INode

        Parameters
        ----------
        uiIndex: size_t

        at(self, uiIndex) -> INode

        Parameters
        ----------
        uiIndex: size_t

        """
        return _PySpin.node_vector_at(self, *args)

    def back(self, *args):
        r"""
        back(self) -> INode
        back(self) -> INode
        """
        return _PySpin.node_vector_back(self, *args)

    def begin(self, *args):
        r"""
        begin(self) -> Spinnaker::GenApi::node_vector::iterator
        begin(self) -> Spinnaker::GenApi::node_vector::const_iterator
        """
        return _PySpin.node_vector_begin(self, *args)

    def capacity(self):
        r"""capacity(self) -> size_t"""
        return _PySpin.node_vector_capacity(self)

    def end(self, *args):
        r"""
        end(self) -> Spinnaker::GenApi::node_vector::iterator
        end(self) -> Spinnaker::GenApi::node_vector::const_iterator
        """
        return _PySpin.node_vector_end(self, *args)

    def front(self, *args):
        r"""
        front(self) -> INode
        front(self) -> INode
        """
        return _PySpin.node_vector_front(self, *args)

    def max_size(self):
        r"""max_size(self) -> size_t"""
        return _PySpin.node_vector_max_size(self)

    def size(self):
        r"""size(self) -> size_t"""
        return _PySpin.node_vector_size(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _PySpin.node_vector_empty(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _PySpin.node_vector_pop_back(self)

    def push_back(self, val):
        r"""
        push_back(self, val)

        Parameters
        ----------
        val: Spinnaker::GenApi::node_vector::T const &

        """
        return _PySpin.node_vector_push_back(self, val)

    def resize(self, uiSize):
        r"""
        resize(self, uiSize)

        Parameters
        ----------
        uiSize: size_t

        """
        return _PySpin.node_vector_resize(self, uiSize)

    def reserve(self, uiSize):
        r"""
        reserve(self, uiSize)

        Parameters
        ----------
        uiSize: size_t

        """
        return _PySpin.node_vector_reserve(self, uiSize)

    def erase(self, *args):
        r"""
        erase(self, pos) -> Spinnaker::GenApi::node_vector::iterator

        Parameters
        ----------
        pos: Spinnaker::GenApi::node_vector::iterator

        erase(self, uiIndex)

        Parameters
        ----------
        uiIndex: size_t

        """
        return _PySpin.node_vector_erase(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, val) -> Spinnaker::GenApi::node_vector::iterator

        Parameters
        ----------
        pos: Spinnaker::GenApi::node_vector::iterator
        val: Spinnaker::GenApi::node_vector::T const &

        insert(self, uiIndex, val)

        Parameters
        ----------
        uiIndex: size_t
        val: Spinnaker::GenApi::node_vector::T const &

        """
        return _PySpin.node_vector_insert(self, *args)

# Register node_vector in _PySpin:
_PySpin.node_vector_swigregister(node_vector)

class value_vector(object):
    r"""Proxy of C++ Spinnaker::GenApi::value_vector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> value_vector
        __init__(self, uiSize) -> value_vector

        Parameters
        ----------
        uiSize: size_t

        __init__(self, obj) -> value_vector

        Parameters
        ----------
        obj: Spinnaker::GenApi::value_vector const &

        """
        _PySpin.value_vector_swiginit(self, _PySpin.new_value_vector(*args))
    __swig_destroy__ = _PySpin.delete_value_vector

    def assign(self, n, obj):
        r"""
        assign(self, n, obj)

        Parameters
        ----------
        n: size_t
        obj: Spinnaker::GenApi::value_vector::T const &

        """
        return _PySpin.value_vector_assign(self, n, obj)

    def clear(self):
        r"""clear(self)"""
        return _PySpin.value_vector_clear(self)

    def at(self, *args):
        r"""
        at(self, uiIndex) -> IValue

        Parameters
        ----------
        uiIndex: size_t

        at(self, uiIndex) -> IValue

        Parameters
        ----------
        uiIndex: size_t

        """
        return _PySpin.value_vector_at(self, *args)

    def back(self, *args):
        r"""
        back(self) -> IValue
        back(self) -> IValue
        """
        return _PySpin.value_vector_back(self, *args)

    def begin(self, *args):
        r"""
        begin(self) -> Spinnaker::GenApi::value_vector::iterator
        begin(self) -> Spinnaker::GenApi::value_vector::const_iterator
        """
        return _PySpin.value_vector_begin(self, *args)

    def capacity(self):
        r"""capacity(self) -> size_t"""
        return _PySpin.value_vector_capacity(self)

    def end(self, *args):
        r"""
        end(self) -> Spinnaker::GenApi::value_vector::iterator
        end(self) -> Spinnaker::GenApi::value_vector::const_iterator
        """
        return _PySpin.value_vector_end(self, *args)

    def front(self, *args):
        r"""
        front(self) -> IValue
        front(self) -> IValue
        """
        return _PySpin.value_vector_front(self, *args)

    def max_size(self):
        r"""max_size(self) -> size_t"""
        return _PySpin.value_vector_max_size(self)

    def size(self):
        r"""size(self) -> size_t"""
        return _PySpin.value_vector_size(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _PySpin.value_vector_empty(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _PySpin.value_vector_pop_back(self)

    def push_back(self, val):
        r"""
        push_back(self, val)

        Parameters
        ----------
        val: Spinnaker::GenApi::value_vector::T const &

        """
        return _PySpin.value_vector_push_back(self, val)

    def resize(self, uiSize, val):
        r"""
        resize(self, uiSize, val)

        Parameters
        ----------
        uiSize: size_t
        val: Spinnaker::GenApi::value_vector::T const &

        """
        return _PySpin.value_vector_resize(self, uiSize, val)

    def reserve(self, uiSize):
        r"""
        reserve(self, uiSize)

        Parameters
        ----------
        uiSize: size_t

        """
        return _PySpin.value_vector_reserve(self, uiSize)

    def erase(self, *args):
        r"""
        erase(self, pos) -> Spinnaker::GenApi::value_vector::iterator

        Parameters
        ----------
        pos: Spinnaker::GenApi::value_vector::iterator

        erase(self, uiIndex)

        Parameters
        ----------
        uiIndex: size_t

        """
        return _PySpin.value_vector_erase(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, val) -> Spinnaker::GenApi::value_vector::iterator

        Parameters
        ----------
        pos: Spinnaker::GenApi::value_vector::iterator
        val: Spinnaker::GenApi::value_vector::T const &

        insert(self, uiIndex, val)

        Parameters
        ----------
        uiIndex: size_t
        val: Spinnaker::GenApi::value_vector::T const &

        """
        return _PySpin.value_vector_insert(self, *args)

# Register value_vector in _PySpin:
_PySpin.value_vector_swigregister(value_vector)

class ICategory(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::ICategory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetFeatures(self):
        r"""GetFeatures(self)"""
        return _PySpin.ICategory_GetFeatures(self)

# Register ICategory in _PySpin:
_PySpin.ICategory_swigregister(ICategory)

class IFloat(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::IFloat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: double
        Verify: bool

        """
        return _PySpin.IFloat_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> double

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IFloat_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> double"""
        return _PySpin.IFloat___call__(self)

    def __ref__(self):
        r"""__ref__(self) -> double"""
        return _PySpin.IFloat___ref__(self)

    def GetMin(self):
        r"""GetMin(self) -> double"""
        return _PySpin.IFloat_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> double"""
        return _PySpin.IFloat_GetMax(self)

    def HasInc(self):
        r"""HasInc(self) -> bool"""
        return _PySpin.IFloat_HasInc(self)

    def GetIncMode(self):
        r"""GetIncMode(self) -> Spinnaker::GenApi::EIncMode"""
        return _PySpin.IFloat_GetIncMode(self)

    def GetInc(self):
        r"""GetInc(self) -> double"""
        return _PySpin.IFloat_GetInc(self)

    def GetListOfValidValues(self, bounded=True):
        r"""
        GetListOfValidValues(self, bounded=True) -> double_autovector_t

        Parameters
        ----------
        bounded: bool

        """
        return _PySpin.IFloat_GetListOfValidValues(self, bounded)

    def GetRepresentation(self):
        r"""GetRepresentation(self) -> Spinnaker::GenApi::ERepresentation"""
        return _PySpin.IFloat_GetRepresentation(self)

    def GetUnit(self):
        r"""GetUnit(self) -> gcstring"""
        return _PySpin.IFloat_GetUnit(self)

    def GetDisplayNotation(self):
        r"""GetDisplayNotation(self) -> Spinnaker::GenApi::EDisplayNotation"""
        return _PySpin.IFloat_GetDisplayNotation(self)

    def GetDisplayPrecision(self):
        r"""GetDisplayPrecision(self) -> int64_t"""
        return _PySpin.IFloat_GetDisplayPrecision(self)

    def ImposeMin(self, Value):
        r"""
        ImposeMin(self, Value)

        Parameters
        ----------
        Value: double

        """
        return _PySpin.IFloat_ImposeMin(self, Value)

    def ImposeMax(self, Value):
        r"""
        ImposeMax(self, Value)

        Parameters
        ----------
        Value: double

        """
        return _PySpin.IFloat_ImposeMax(self, Value)

# Register IFloat in _PySpin:
_PySpin.IFloat_swigregister(IFloat)

class IInteger(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::IInteger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: int64_t
        Verify: bool

        """
        return _PySpin.IInteger_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> int64_t

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IInteger_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> int64_t"""
        return _PySpin.IInteger___call__(self)

    def __ref__(self):
        r"""__ref__(self) -> int64_t"""
        return _PySpin.IInteger___ref__(self)

    def GetMin(self):
        r"""GetMin(self) -> int64_t"""
        return _PySpin.IInteger_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> int64_t"""
        return _PySpin.IInteger_GetMax(self)

    def GetIncMode(self):
        r"""GetIncMode(self) -> Spinnaker::GenApi::EIncMode"""
        return _PySpin.IInteger_GetIncMode(self)

    def GetInc(self):
        r"""GetInc(self) -> int64_t"""
        return _PySpin.IInteger_GetInc(self)

    def GetListOfValidValues(self, bounded=True):
        r"""
        GetListOfValidValues(self, bounded=True) -> int64_autovector_t

        Parameters
        ----------
        bounded: bool

        """
        return _PySpin.IInteger_GetListOfValidValues(self, bounded)

    def GetRepresentation(self):
        r"""GetRepresentation(self) -> Spinnaker::GenApi::ERepresentation"""
        return _PySpin.IInteger_GetRepresentation(self)

    def GetUnit(self):
        r"""GetUnit(self) -> gcstring"""
        return _PySpin.IInteger_GetUnit(self)

    def ImposeMin(self, Value):
        r"""
        ImposeMin(self, Value)

        Parameters
        ----------
        Value: int64_t

        """
        return _PySpin.IInteger_ImposeMin(self, Value)

    def ImposeMax(self, Value):
        r"""
        ImposeMax(self, Value)

        Parameters
        ----------
        Value: int64_t

        """
        return _PySpin.IInteger_ImposeMax(self, Value)

# Register IInteger in _PySpin:
_PySpin.IInteger_swigregister(IInteger)

class IEnumEntry(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumEntry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetValue(self):
        r"""GetValue(self) -> int64_t"""
        return _PySpin.IEnumEntry_GetValue(self)

    def GetSymbolic(self):
        r"""GetSymbolic(self) -> gcstring"""
        return _PySpin.IEnumEntry_GetSymbolic(self)

    def GetNumericValue(self):
        r"""GetNumericValue(self) -> double"""
        return _PySpin.IEnumEntry_GetNumericValue(self)

    def IsSelfClearing(self):
        r"""IsSelfClearing(self) -> bool"""
        return _PySpin.IEnumEntry_IsSelfClearing(self)

# Register IEnumEntry in _PySpin:
_PySpin.IEnumEntry_swigregister(IEnumEntry)

class IRegister(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::IRegister class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Set(self, pBuffer, Verify=True):
        r"""
        Set(self, pBuffer, Verify=True)

        Parameters
        ----------
        pBuffer: uint8_t const *
        Verify: bool


        Set the register's contents with the contents (as 8-bit unsigned ints) of the given array.

        Parameters:
        -----------

        pBuffer:  The NumPy array containing the data to set

        Verify:  Enables AccessMode and Range verification (default = true)

        """
        return _PySpin.IRegister_Set(self, pBuffer, Verify)

    def Get(self, pBuffer, Verify=False, IgnoreCache=False):
        r"""
        Get(self, pBuffer, Verify=False, IgnoreCache=False)

        Parameters
        ----------
        pBuffer: uint8_t *
        Verify: bool
        IgnoreCache: bool


        Gets a NumPy array representing the contents of the register, as 8-bit unsigned ints.

        Parameters:
        -----------

        pBuffer:  The number of bytes to retrieve

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        """
        return _PySpin.IRegister_Get(self, pBuffer, Verify, IgnoreCache)

    def GetLength(self):
        r"""GetLength(self) -> int64_t"""
        return _PySpin.IRegister_GetLength(self)

    def GetAddress(self):
        r"""GetAddress(self) -> int64_t"""
        return _PySpin.IRegister_GetAddress(self)

# Register IRegister in _PySpin:
_PySpin.IRegister_swigregister(IRegister)

class IEnumeration(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumeration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetSymbolics(self, Symbolics):
        r"""
        GetSymbolics(self, Symbolics)

        Parameters
        ----------
        Symbolics: Spinnaker::GenApi::StringList_t &

        """
        return _PySpin.IEnumeration_GetSymbolics(self, Symbolics)

    def GetEntries(self):
        r"""GetEntries(self)"""
        return _PySpin.IEnumeration_GetEntries(self)

    def SetIntValue(self, Value, Verify=True):
        r"""
        SetIntValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: int64_t
        Verify: bool

        """
        return _PySpin.IEnumeration_SetIntValue(self, Value, Verify)

    def __ref__(self):
        r"""__ref__(self) -> gcstring"""
        return _PySpin.IEnumeration___ref__(self)

    def GetIntValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetIntValue(self, Verify=False, IgnoreCache=False) -> int64_t

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumeration_GetIntValue(self, Verify, IgnoreCache)

    def GetEntryByName(self, Symbolic):
        r"""
        GetEntryByName(self, Symbolic) -> IEnumEntry

        Parameters
        ----------
        Symbolic: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.IEnumeration_GetEntryByName(self, Symbolic)

    def GetEntry(self, IntValue):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        """
        return _PySpin.IEnumeration_GetEntry(self, IntValue)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumeration_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumeration in _PySpin:
_PySpin.IEnumeration_swigregister(IEnumeration)

class IBoolean(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::IBoolean class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: bool
        Verify: bool

        """
        return _PySpin.IBoolean_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> bool

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IBoolean_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> bool"""
        return _PySpin.IBoolean___call__(self)

# Register IBoolean in _PySpin:
_PySpin.IBoolean_swigregister(IBoolean)

class ICommand(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::ICommand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Execute(self, Verify=True):
        r"""
        Execute(self, Verify=True)

        Parameters
        ----------
        Verify: bool

        """
        return _PySpin.ICommand_Execute(self, Verify)

    def __call__(self):
        r"""__call__(self)"""
        return _PySpin.ICommand___call__(self)

    def IsDone(self, Verify=True):
        r"""
        IsDone(self, Verify=True) -> bool

        Parameters
        ----------
        Verify: bool

        """
        return _PySpin.ICommand_IsDone(self, Verify)

# Register ICommand in _PySpin:
_PySpin.ICommand_swigregister(ICommand)

class IDestroy(object):
    r"""Proxy of C++ Spinnaker::GenApi::IDestroy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Destroy(self):
        r"""Destroy(self)"""
        return _PySpin.IDestroy_Destroy(self)

# Register IDestroy in _PySpin:
_PySpin.IDestroy_swigregister(IDestroy)

class IDeviceInfo(object):
    r"""Proxy of C++ Spinnaker::GenApi::IDeviceInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetModelName(self):
        r"""GetModelName(self) -> gcstring"""
        return _PySpin.IDeviceInfo_GetModelName(self)

    def GetVendorName(self):
        r"""GetVendorName(self) -> gcstring"""
        return _PySpin.IDeviceInfo_GetVendorName(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.IDeviceInfo_GetToolTip(self)

    def GetStandardNameSpace(self):
        r"""GetStandardNameSpace(self) -> gcstring"""
        return _PySpin.IDeviceInfo_GetStandardNameSpace(self)

    def GetGenApiVersion(self, Version, Build):
        r"""
        GetGenApiVersion(self, Version, Build)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &
        Build: uint16_t &

        """
        return _PySpin.IDeviceInfo_GetGenApiVersion(self, Version, Build)

    def GetSchemaVersion(self, Version):
        r"""
        GetSchemaVersion(self, Version)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &

        """
        return _PySpin.IDeviceInfo_GetSchemaVersion(self, Version)

    def GetDeviceVersion(self, Version):
        r"""
        GetDeviceVersion(self, Version)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &

        """
        return _PySpin.IDeviceInfo_GetDeviceVersion(self, Version)

    def GetProductGuid(self):
        r"""GetProductGuid(self) -> gcstring"""
        return _PySpin.IDeviceInfo_GetProductGuid(self)

    def GetVersionGuid(self):
        r"""GetVersionGuid(self) -> gcstring"""
        return _PySpin.IDeviceInfo_GetVersionGuid(self)

# Register IDeviceInfo in _PySpin:
_PySpin.IDeviceInfo_swigregister(IDeviceInfo)

class IString(IValue):
    r"""Proxy of C++ Spinnaker::GenApi::IString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.IString_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IString_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> gcstring"""
        return _PySpin.IString___call__(self)

    def __ref__(self):
        r"""__ref__(self) -> gcstring"""
        return _PySpin.IString___ref__(self)

    def GetMaxLength(self):
        r"""GetMaxLength(self) -> int64_t"""
        return _PySpin.IString_GetMaxLength(self)

# Register IString in _PySpin:
_PySpin.IString_swigregister(IString)

class INodeMap(object):
    r"""Proxy of C++ Spinnaker::GenApi::INodeMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNodes(self):
        r"""GetNodes(self)"""
        return _PySpin.INodeMap_GetNodes(self)

    def GetNode(self, Name):
        r"""
        GetNode(self, Name) -> INode

        Parameters
        ----------
        Name: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.INodeMap_GetNode(self, Name)

    def InvalidateNodes(self):
        r"""InvalidateNodes(self)"""
        return _PySpin.INodeMap_InvalidateNodes(self)

    def Connect(self, *args):
        r"""
        Connect(self, pPort, PortName) -> bool

        Parameters
        ----------
        pPort: IPort *
        PortName: Spinnaker::GenICam::gcstring const &

        Connect(self, pPort) -> bool

        Parameters
        ----------
        pPort: IPort *

        """
        return _PySpin.INodeMap_Connect(self, *args)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.INodeMap_GetDeviceName(self)

    def Poll(self, ElapsedTime):
        r"""
        Poll(self, ElapsedTime)

        Parameters
        ----------
        ElapsedTime: int64_t

        """
        return _PySpin.INodeMap_Poll(self, ElapsedTime)

    def GetNumNodes(self):
        r"""GetNumNodes(self) -> uint64_t"""
        return _PySpin.INodeMap_GetNumNodes(self)

# Register INodeMap in _PySpin:
_PySpin.INodeMap_swigregister(INodeMap)

class INodeMapDyn(INodeMap):
    r"""Proxy of C++ Spinnaker::GenApi::INodeMapDyn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ClearAllNodes(self):
        r"""ClearAllNodes(self)"""
        return _PySpin.INodeMapDyn_ClearAllNodes(self)

    def LoadXMLFromFile(self, FileName):
        r"""
        LoadXMLFromFile(self, FileName)

        Parameters
        ----------
        FileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.INodeMapDyn_LoadXMLFromFile(self, FileName)

    def LoadXMLFromFileInject(self, TargetFileName, InjectFileName):
        r"""
        LoadXMLFromFileInject(self, TargetFileName, InjectFileName)

        Parameters
        ----------
        TargetFileName: Spinnaker::GenICam::gcstring const &
        InjectFileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.INodeMapDyn_LoadXMLFromFileInject(self, TargetFileName, InjectFileName)

    def LoadXMLFromString(self, XMLData):
        r"""
        LoadXMLFromString(self, XMLData)

        Parameters
        ----------
        XMLData: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.INodeMapDyn_LoadXMLFromString(self, XMLData)

    def LoadXMLFromStringInject(self, TargetXMLData, InjectXMLData):
        r"""
        LoadXMLFromStringInject(self, TargetXMLData, InjectXMLData)

        Parameters
        ----------
        TargetXMLData: Spinnaker::GenICam::gcstring const &
        InjectXMLData: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.INodeMapDyn_LoadXMLFromStringInject(self, TargetXMLData, InjectXMLData)

    def PreprocessXMLFromFile(self, *args):
        r"""
        PreprocessXMLFromFile(self, XMLFileName, StyleSheetFileName, OutputFileName, XMLValidation=xvDefault)

        Parameters
        ----------
        XMLFileName: Spinnaker::GenICam::gcstring const &
        StyleSheetFileName: Spinnaker::GenICam::gcstring const &
        OutputFileName: Spinnaker::GenICam::gcstring const &
        XMLValidation: uint32_t const

        """
        return _PySpin.INodeMapDyn_PreprocessXMLFromFile(self, *args)

    def MergeXMLFiles(self, TargetFileName, InjectedFileName, OutputFileName):
        r"""
        MergeXMLFiles(self, TargetFileName, InjectedFileName, OutputFileName)

        Parameters
        ----------
        TargetFileName: Spinnaker::GenICam::gcstring const &
        InjectedFileName: Spinnaker::GenICam::gcstring const &
        OutputFileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.INodeMapDyn_MergeXMLFiles(self, TargetFileName, InjectedFileName, OutputFileName)

    def ExtractIndependentSubtree(self, XMLData, InjectXMLData, SubTreeRootNodeName, ExtractedSubtree):
        r"""
        ExtractIndependentSubtree(self, XMLData, InjectXMLData, SubTreeRootNodeName, ExtractedSubtree)

        Parameters
        ----------
        XMLData: Spinnaker::GenICam::gcstring const &
        InjectXMLData: Spinnaker::GenICam::gcstring const &
        SubTreeRootNodeName: Spinnaker::GenICam::gcstring const &
        ExtractedSubtree: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.INodeMapDyn_ExtractIndependentSubtree(self, XMLData, InjectXMLData, SubTreeRootNodeName, ExtractedSubtree)

    def GetSupportedSchemaVersions(self):
        r"""GetSupportedSchemaVersions(self)"""
        return _PySpin.INodeMapDyn_GetSupportedSchemaVersions(self)

    def LoadXMLFromZIPFile(self, ZipFileName):
        r"""
        LoadXMLFromZIPFile(self, ZipFileName)

        Parameters
        ----------
        ZipFileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.INodeMapDyn_LoadXMLFromZIPFile(self, ZipFileName)

    def LoadXMLFromZIPData(self, zipData, zipSize):
        r"""
        LoadXMLFromZIPData(self, zipData, zipSize)

        Parameters
        ----------
        zipData: void const *
        zipSize: size_t

        """
        return _PySpin.INodeMapDyn_LoadXMLFromZIPData(self, zipData, zipSize)

    def PreprocessXMLFromZIPFile(self, *args):
        r"""
        PreprocessXMLFromZIPFile(self, XMLFileName, StyleSheetFileName, OutputFileName, XMLValidation=xvDefault)

        Parameters
        ----------
        XMLFileName: Spinnaker::GenICam::gcstring const &
        StyleSheetFileName: Spinnaker::GenICam::gcstring const &
        OutputFileName: Spinnaker::GenICam::gcstring const &
        XMLValidation: uint32_t const

        """
        return _PySpin.INodeMapDyn_PreprocessXMLFromZIPFile(self, *args)

# Register INodeMapDyn in _PySpin:
_PySpin.INodeMapDyn_swigregister(INodeMapDyn)

class ISelectorDigit(object):
    r"""Proxy of C++ Spinnaker::GenApi::ISelectorDigit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFirst(self):
        r"""SetFirst(self) -> bool"""
        return _PySpin.ISelectorDigit_SetFirst(self)

    def SetNext(self, Tick=True):
        r"""
        SetNext(self, Tick=True) -> bool

        Parameters
        ----------
        Tick: bool

        """
        return _PySpin.ISelectorDigit_SetNext(self, Tick)

    def Restore(self):
        r"""Restore(self)"""
        return _PySpin.ISelectorDigit_Restore(self)

    def ToString(self):
        r"""ToString(self) -> gcstring"""
        return _PySpin.ISelectorDigit_ToString(self)

    def GetSelectorList(self, Incremental=False):
        r"""
        GetSelectorList(self, Incremental=False)

        Parameters
        ----------
        Incremental: bool

        """
        return _PySpin.ISelectorDigit_GetSelectorList(self, Incremental)

# Register ISelectorDigit in _PySpin:
_PySpin.ISelectorDigit_swigregister(ISelectorDigit)

class Node(INode):
    r"""


    class common to all nodes

    C++ includes: Node.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_Node

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        virtual
        GenICam::gcstring Spinnaker::GenApi::Node::GetName(bool
        FullQualified=false) const

        Get node name 
        """
        return _PySpin.Node_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""
        GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace
        virtual
        GenApi::ENameSpace Spinnaker::GenApi::Node::GetNameSpace() const

        Get name space 
        """
        return _PySpin.Node_GetNameSpace(self)

    def GetVisibility(self):
        r"""
        GetVisibility(self) -> Spinnaker::GenApi::EVisibility
        virtual EVisibility Spinnaker::GenApi::Node::GetVisibility() const

        Get the recommended visibility of the node 
        """
        return _PySpin.Node_GetVisibility(self)

    def InvalidateNode(self):
        r"""
        InvalidateNode(self)
        virtual void Spinnaker::GenApi::Node::InvalidateNode()

        Indicates that the node's value may have changed. Fires the callback
        on this and all dependent nodes 
        """
        return _PySpin.Node_InvalidateNode(self)

    def IsCachable(self):
        r"""
        IsCachable(self) -> bool
        virtual
        bool Spinnaker::GenApi::Node::IsCachable() const

        Is the node value cacheable 
        """
        return _PySpin.Node_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""
        IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo
        virtual EYesNo Spinnaker::GenApi::Node::IsAccessModeCacheable()
        const

        True if the AccessMode can be cached 
        """
        return _PySpin.Node_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""
        GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode
        virtual ECachingMode Spinnaker::GenApi::Node::GetCachingMode() const

        Get Caching Mode 
        """
        return _PySpin.Node_GetCachingMode(self)

    def GetPollingTime(self):
        r"""
        GetPollingTime(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::Node::GetPollingTime() const

        recommended polling time (for not cacheable nodes) 
        """
        return _PySpin.Node_GetPollingTime(self)

    def GetToolTip(self):
        r"""
        GetToolTip(self) -> gcstring
        virtual
        GenICam::gcstring Spinnaker::GenApi::Node::GetToolTip() const

        Get a short description of the node 
        """
        return _PySpin.Node_GetToolTip(self)

    def GetDescription(self):
        r"""
        GetDescription(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::Node::GetDescription()
        const

        Get a long description of the node 
        """
        return _PySpin.Node_GetDescription(self)

    def GetDisplayName(self):
        r"""
        GetDisplayName(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::Node::GetDisplayName()
        const

        Get a name string for display 
        """
        return _PySpin.Node_GetDisplayName(self)

    def GetDeviceName(self):
        r"""
        GetDeviceName(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::Node::GetDeviceName()
        const

        Get a name of the device 
        """
        return _PySpin.Node_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        virtual
        void Spinnaker::GenApi::Node::GetChildren(GenApi::NodeList_t
        &Children, ELinkType LinkType=ctReadingChildren) const

        Get all nodes this node directly depends on.

        Parameters:
        -----------

        Children:  List of children nodes

        LinkType:  The link type 
        """
        return _PySpin.Node_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)
        virtual
        void Spinnaker::GenApi::Node::GetParents(GenApi::NodeList_t &Parents)
        const

        Gets all nodes this node is directly depending on.

        Parameters:
        -----------

        Parents:  List of parent nodes 
        """
        return _PySpin.Node_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        virtual CallbackHandleType
        Spinnaker::GenApi::Node::RegisterCallback(CNodeCallback *pCallback)

        Register change callback Takes ownership of the CNodeCallback object

        """
        return _PySpin.Node_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        virtual bool
        Spinnaker::GenApi::Node::DeregisterCallback(CallbackHandleType
        hCallback)

        De register change callback Destroys CNodeCallback object true if the
        callback handle was valid 
        """
        return _PySpin.Node_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""
        GetNodeMap(self) -> INodeMap
        virtual
        INodeMap* Spinnaker::GenApi::Node::GetNodeMap() const

        Retrieves the central node map 
        """
        return _PySpin.Node_GetNodeMap(self)

    def GetEventID(self):
        r"""
        GetEventID(self) -> gcstring
        virtual
        GenICam::gcstring Spinnaker::GenApi::Node::GetEventID() const

        Get the EventId of the node 
        """
        return _PySpin.Node_GetEventID(self)

    def IsStreamable(self):
        r"""
        IsStreamable(self) -> bool
        virtual
        bool Spinnaker::GenApi::Node::IsStreamable() const

        True if the node is streamable 
        """
        return _PySpin.Node_IsStreamable(self)

    def GetPropertyNames(self):
        r"""
        GetPropertyNames(self)
        virtual void
        Spinnaker::GenApi::Node::GetPropertyNames(GenICam::gcstring_vector
        &PropertyNames) const

        Returns a list of the names all properties set during initialization

        """
        return _PySpin.Node_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        virtual
        bool Spinnaker::GenApi::Node::GetProperty(const GenICam::gcstring
        &PropertyName, GenICam::gcstring &ValueStr, GenICam::gcstring
        &AttributeStr)

        Retrieves a property plus an additional attribute by name If a
        property has multiple values/attribute they come with Tabs as
        delimiters 
        """
        return _PySpin.Node_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        virtual void Spinnaker::GenApi::Node::ImposeAccessMode(EAccessMode
        ImposedAccessMode)

        Imposes an access mode to the natural access mode of the node 
        """
        return _PySpin.Node_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        virtual void Spinnaker::GenApi::Node::ImposeVisibility(EVisibility
        ImposedVisibility)

        Imposes a visibility to the natural visibility of the node 
        """
        return _PySpin.Node_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""
        GetAlias(self) -> INode
        virtual
        INode* Spinnaker::GenApi::Node::GetAlias() const

        Retrieves the a node which describes the same feature in a different
        way 
        """
        return _PySpin.Node_GetAlias(self)

    def GetCastAlias(self):
        r"""
        GetCastAlias(self) -> INode
        virtual
        INode* Spinnaker::GenApi::Node::GetCastAlias() const

        Retrieves the a node which describes the same feature so that it can
        be casted 
        """
        return _PySpin.Node_GetCastAlias(self)

    def GetDocuURL(self):
        r"""
        GetDocuURL(self) -> gcstring
        virtual
        GenICam::gcstring Spinnaker::GenApi::Node::GetDocuURL() const

        Gets a URL pointing to the documentation of that feature 
        """
        return _PySpin.Node_GetDocuURL(self)

    def IsDeprecated(self):
        r"""
        IsDeprecated(self) -> bool
        virtual
        bool Spinnaker::GenApi::Node::IsDeprecated() const

        True if the node should not be used any more 
        """
        return _PySpin.Node_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""
        GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType
        virtual
        EInterfaceType Spinnaker::GenApi::Node::GetPrincipalInterfaceType()
        const

        Get the type of the main interface of a node 
        """
        return _PySpin.Node_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""
        IsFeature(self) -> bool
        virtual
        bool Spinnaker::GenApi::Node::IsFeature() const

        True if the node can be reached via category nodes from a category
        node named "Root" 
        """
        return _PySpin.Node_IsFeature(self)

    def SetNodeHandle(self, pNodeHandle):
        r"""
        SetNodeHandle(self, pNodeHandle)

        Parameters
        ----------
        pNodeHandle: std::shared_ptr< Spinnaker::GenApi::Node::NodeImpl >

        void
        Spinnaker::GenApi::Node::SetNodeHandle(std::shared_ptr< Node::NodeImpl
        > pNodeHandle)

        Set Node handle 
        """
        return _PySpin.Node_SetNodeHandle(self, pNodeHandle)

    def GetNodeHandle(self):
        r"""
        GetNodeHandle(self) -> std::shared_ptr< Spinnaker::GenApi::Node::NodeImpl >
        std::shared_ptr<Node::NodeImpl>
        Spinnaker::GenApi::Node::GetNodeHandle() const

        Get Node handle 
        """
        return _PySpin.Node_GetNodeHandle(self)

    def GetAccessMode(self):
        r"""
        GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode
        virtual EAccessMode Spinnaker::GenApi::Node::GetAccessMode() const

        Base interface overrides.

        Get the access mode of the node 
        """
        return _PySpin.Node_GetAccessMode(self)

    def IsSelector(self):
        r"""
        IsSelector(self) -> bool
        virtual
        bool Spinnaker::GenApi::Node::IsSelector() const

        Selector interface overrides.

        true if this feature selects a group of features 
        """
        return _PySpin.Node_IsSelector(self)

    def GetSelectedFeatures(self):
        r"""
        GetSelectedFeatures(self)
        virtual void
        Spinnaker::GenApi::Node::GetSelectedFeatures(FeatureList_t &) const

        retrieve the group of selected features 
        """
        return _PySpin.Node_GetSelectedFeatures(self)

    def GetSelectingFeatures(self):
        r"""
        GetSelectingFeatures(self)
        virtual void
        Spinnaker::GenApi::Node::GetSelectingFeatures(FeatureList_t &) const

        retrieve the group of features selecting this node 
        """
        return _PySpin.Node_GetSelectingFeatures(self)

    def SetReference(self, *args):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::ISelector *

        virtual
        void Spinnaker::GenApi::Node::SetReference(ISelector *pBase) 
        """
        return _PySpin.Node_SetReference(self, *args)

    def SetNodeMap(self, pNodeMap):
        r"""
        SetNodeMap(self, pNodeMap)

        Parameters
        ----------
        pNodeMap: Spinnaker::GenApi::INodeMap *

        void
        Spinnaker::GenApi::Node::SetNodeMap(INodeMap *pNodeMap) 
        """
        return _PySpin.Node_SetNodeMap(self, pNodeMap)

    def __eq__(self, nullPtr):
        r"""
        __eq__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: int

        """
        return _PySpin.Node___eq__(self, nullPtr)

    def __ne__(self, nullPtr):
        r"""
        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: int

        """
        return _PySpin.Node___ne__(self, nullPtr)

# Register Node in _PySpin:
_PySpin.Node_swigregister(Node)

class ValueNode(IValue, Node):
    r"""


    Interface for value properties.

    C++ includes: ValueNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ValueNode

    def GetNode(self):
        r"""
        GetNode(self) -> INode
        virtual
        INode* Spinnaker::GenApi::ValueNode::GetNode() 
        """
        return _PySpin.ValueNode_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        virtual GenICam::gcstring Spinnaker::GenApi::ValueNode::ToString(bool
        Verify=false, bool IgnoreCache=false)

        Get content of the node as string

        Parameters:
        -----------

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        The value read 
        """
        return _PySpin.ValueNode_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        virtual void Spinnaker::GenApi::ValueNode::FromString(const
        GenICam::gcstring &ValueStr, bool Verify=true)

        Set content of the node as string

        Parameters:
        -----------

        ValueStr:  The value to set

        Verify:  Enables AccessMode and Range verification (default = true) 
        """
        return _PySpin.ValueNode_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""
        IsValueCacheValid(self) -> bool
        virtual bool Spinnaker::GenApi::ValueNode::IsValueCacheValid() const

        Checks if the value comes from cache or is requested from another node

        """
        return _PySpin.ValueNode_IsValueCacheValid(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::ValueNode::SetReference(INode *pBase)

        overload SetReference for Value 
        """
        return _PySpin.ValueNode_SetReference(self, pBase)

# Register ValueNode in _PySpin:
_PySpin.ValueNode_swigregister(ValueNode)

class BooleanNode(IBoolean, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: BooleanNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_BooleanNode

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: bool
        Verify: bool

        void
        Spinnaker::GenApi::BooleanNode::SetValue(bool Value, bool Verify=true)

        Set node value

        Parameters:
        -----------

        Value:  The value to set.

        Verify:  Enables AccessMode and Range verification (default = true).

        """
        return _PySpin.BooleanNode_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> bool

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        bool
        Spinnaker::GenApi::BooleanNode::GetValue(bool Verify=false, bool
        IgnoreCache=false) const

        Get node value

        Parameters:
        -----------

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked.

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false).

        The value read. 
        """
        return _PySpin.BooleanNode_GetValue(self, Verify, IgnoreCache)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::BooleanNode::SetReference(INode
        *pBase)

        overload SetReference for Value 
        """
        return _PySpin.BooleanNode_SetReference(self, pBase)

# Register BooleanNode in _PySpin:
_PySpin.BooleanNode_swigregister(BooleanNode)

class CategoryNode(ICategory, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: CategoryNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_CategoryNode

    def GetFeatures(self):
        r"""
        GetFeatures(self)
        virtual void
        Spinnaker::GenApi::CategoryNode::GetFeatures(FeatureList_t &Features)
        const

        Get all features of the category (including sub-categories) 
        """
        return _PySpin.CategoryNode_GetFeatures(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::CategoryNode::SetReference(INode
        *pBase)

        overload SetReference for Value 
        """
        return _PySpin.CategoryNode_SetReference(self, pBase)

# Register CategoryNode in _PySpin:
_PySpin.CategoryNode_swigregister(CategoryNode)

class FloatNode(IFloat, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: FloatNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_FloatNode

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: double
        Verify: bool

        virtual void Spinnaker::GenApi::FloatNode::SetValue(double Value, bool
        Verify=true)

        Set node value

        Parameters:
        -----------

        Value:  The value to set

        Verify:  Enables AccessMode and Range verification (default = true) 
        """
        return _PySpin.FloatNode_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> double

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        virtual double Spinnaker::GenApi::FloatNode::GetValue(bool
        Verify=false, bool IgnoreCache=false)

        Get node value

        Parameters:
        -----------

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        The value read 
        """
        return _PySpin.FloatNode_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> double"""
        return _PySpin.FloatNode___call__(self)

    def __ref__(self):
        r"""__ref__(self) -> double"""
        return _PySpin.FloatNode___ref__(self)

    def GetMin(self):
        r"""
        GetMin(self) -> double
        virtual
        double Spinnaker::GenApi::FloatNode::GetMin()

        Get minimum value allowed 
        """
        return _PySpin.FloatNode_GetMin(self)

    def GetMax(self):
        r"""
        GetMax(self) -> double
        virtual
        double Spinnaker::GenApi::FloatNode::GetMax()

        Get maximum value allowed 
        """
        return _PySpin.FloatNode_GetMax(self)

    def HasInc(self):
        r"""
        HasInc(self) -> bool
        virtual
        bool Spinnaker::GenApi::FloatNode::HasInc()

        True if the float has a constant increment 
        """
        return _PySpin.FloatNode_HasInc(self)

    def GetIncMode(self):
        r"""
        GetIncMode(self) -> Spinnaker::GenApi::EIncMode
        virtual EIncMode Spinnaker::GenApi::FloatNode::GetIncMode()

        Get increment mode 
        """
        return _PySpin.FloatNode_GetIncMode(self)

    def GetInc(self):
        r"""
        GetInc(self) -> double
        virtual
        double Spinnaker::GenApi::FloatNode::GetInc()

        Get the constant increment if there is any 
        """
        return _PySpin.FloatNode_GetInc(self)

    def GetListOfValidValues(self, bounded=True):
        r"""
        GetListOfValidValues(self, bounded=True) -> double_autovector_t

        Parameters
        ----------
        bounded: bool

        virtual
        double_autovector_t
        Spinnaker::GenApi::FloatNode::GetListOfValidValues(bool bounded=true)

        Get list of valid value 
        """
        return _PySpin.FloatNode_GetListOfValidValues(self, bounded)

    def GetRepresentation(self):
        r"""
        GetRepresentation(self) -> Spinnaker::GenApi::ERepresentation
        virtual ERepresentation
        Spinnaker::GenApi::FloatNode::GetRepresentation()

        Get recommended representation 
        """
        return _PySpin.FloatNode_GetRepresentation(self)

    def GetUnit(self):
        r"""
        GetUnit(self) -> gcstring
        virtual
        GenICam::gcstring Spinnaker::GenApi::FloatNode::GetUnit() const

        Get the physical unit name 
        """
        return _PySpin.FloatNode_GetUnit(self)

    def GetDisplayNotation(self):
        r"""
        GetDisplayNotation(self) -> Spinnaker::GenApi::EDisplayNotation
        virtual
        EDisplayNotation Spinnaker::GenApi::FloatNode::GetDisplayNotation()
        const

        Get the way the float should be converted to a string 
        """
        return _PySpin.FloatNode_GetDisplayNotation(self)

    def GetDisplayPrecision(self):
        r"""
        GetDisplayPrecision(self) -> int64_t
        virtual int64_t
        Spinnaker::GenApi::FloatNode::GetDisplayPrecision() const

        Get the precision to be used when converting the float to a string 
        """
        return _PySpin.FloatNode_GetDisplayPrecision(self)

    def GetIntAlias(self):
        r"""
        GetIntAlias(self) -> IInteger
        IInteger* Spinnaker::GenApi::FloatNode::GetIntAlias()

        gets the interface of an alias node. 
        """
        return _PySpin.FloatNode_GetIntAlias(self)

    def GetEnumAlias(self):
        r"""
        GetEnumAlias(self) -> IEnumeration
        IEnumeration* Spinnaker::GenApi::FloatNode::GetEnumAlias()

        gets the interface of an alias node. 
        """
        return _PySpin.FloatNode_GetEnumAlias(self)

    def ImposeMin(self, Value):
        r"""
        ImposeMin(self, Value)

        Parameters
        ----------
        Value: double

        virtual void Spinnaker::GenApi::FloatNode::ImposeMin(double Value)

        Restrict minimum value 
        """
        return _PySpin.FloatNode_ImposeMin(self, Value)

    def ImposeMax(self, Value):
        r"""
        ImposeMax(self, Value)

        Parameters
        ----------
        Value: double

        virtual void Spinnaker::GenApi::FloatNode::ImposeMax(double Value)

        Restrict maximum value 
        """
        return _PySpin.FloatNode_ImposeMax(self, Value)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::FloatNode::SetReference(INode *pBase)

        overload SetReference for Float 
        """
        return _PySpin.FloatNode_SetReference(self, pBase)

# Register FloatNode in _PySpin:
_PySpin.FloatNode_swigregister(FloatNode)

class IntegerNode(IInteger, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: IntegerNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IntegerNode

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: int64_t
        Verify: bool

        virtual void Spinnaker::GenApi::IntegerNode::SetValue(int64_t Value,
        bool Verify=true)

        Set node value

        Parameters:
        -----------

        Value:  The value to set

        Verify:  Enables AccessMode and Range verification (default = true) 
        """
        return _PySpin.IntegerNode_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> int64_t

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        virtual int64_t Spinnaker::GenApi::IntegerNode::GetValue(bool
        Verify=false, bool IgnoreCache=false)

        Get node value

        Parameters:
        -----------

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        The value read 
        """
        return _PySpin.IntegerNode_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> int64_t"""
        return _PySpin.IntegerNode___call__(self)

    def __ref__(self):
        r"""__ref__(self) -> int64_t"""
        return _PySpin.IntegerNode___ref__(self)

    def GetMin(self):
        r"""
        GetMin(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::IntegerNode::GetMin()

        Get minimum value allowed 
        """
        return _PySpin.IntegerNode_GetMin(self)

    def GetMax(self):
        r"""
        GetMax(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::IntegerNode::GetMax()

        Get maximum value allowed 
        """
        return _PySpin.IntegerNode_GetMax(self)

    def GetIncMode(self):
        r"""
        GetIncMode(self) -> Spinnaker::GenApi::EIncMode
        virtual EIncMode Spinnaker::GenApi::IntegerNode::GetIncMode()

        Get increment mode 
        """
        return _PySpin.IntegerNode_GetIncMode(self)

    def GetInc(self):
        r"""
        GetInc(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::IntegerNode::GetInc()

        Get increment 
        """
        return _PySpin.IntegerNode_GetInc(self)

    def GetListOfValidValues(self, bounded=True):
        r"""
        GetListOfValidValues(self, bounded=True) -> int64_autovector_t

        Parameters
        ----------
        bounded: bool

        virtual
        int64_autovector_t
        Spinnaker::GenApi::IntegerNode::GetListOfValidValues(bool
        bounded=true)

        Get list of valid value 
        """
        return _PySpin.IntegerNode_GetListOfValidValues(self, bounded)

    def GetRepresentation(self):
        r"""
        GetRepresentation(self) -> Spinnaker::GenApi::ERepresentation
        virtual
        ERepresentation Spinnaker::GenApi::IntegerNode::GetRepresentation()

        Get recommended representation 
        """
        return _PySpin.IntegerNode_GetRepresentation(self)

    def GetUnit(self):
        r"""
        GetUnit(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::IntegerNode::GetUnit()

        Get the physical unit name 
        """
        return _PySpin.IntegerNode_GetUnit(self)

    def GetFloatAlias(self):
        r"""
        GetFloatAlias(self) -> IFloat
        virtual IFloat* Spinnaker::GenApi::IntegerNode::GetFloatAlias()

        gets the interface of an alias node. 
        """
        return _PySpin.IntegerNode_GetFloatAlias(self)

    def ImposeMin(self, Value):
        r"""
        ImposeMin(self, Value)

        Parameters
        ----------
        Value: int64_t

        virtual void Spinnaker::GenApi::IntegerNode::ImposeMin(int64_t Value)

        Restrict minimum value 
        """
        return _PySpin.IntegerNode_ImposeMin(self, Value)

    def ImposeMax(self, Value):
        r"""
        ImposeMax(self, Value)

        Parameters
        ----------
        Value: int64_t

        virtual void Spinnaker::GenApi::IntegerNode::ImposeMax(int64_t Value)

        Restrict maximum value 
        """
        return _PySpin.IntegerNode_ImposeMax(self, Value)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::IntegerNode::SetReference(INode
        *pBase)

        overload SetReference for Integer 
        """
        return _PySpin.IntegerNode_SetReference(self, pBase)

# Register IntegerNode in _PySpin:
_PySpin.IntegerNode_swigregister(IntegerNode)

class EnumNode(IEnumeration, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: EnumNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_EnumNode

    def GetSymbolics(self, Symbolics):
        r"""
        GetSymbolics(self, Symbolics)

        Parameters
        ----------
        Symbolics: Spinnaker::GenApi::StringList_t &

        virtual void Spinnaker::GenApi::EnumNode::GetSymbolics(StringList_t
        &Symbolics)

        Get list of symbolic Values 
        """
        return _PySpin.EnumNode_GetSymbolics(self, Symbolics)

    def GetEntries(self):
        r"""
        GetEntries(self)
        virtual void Spinnaker::GenApi::EnumNode::GetEntries(NodeList_t
        &Entries)

        Get list of entry nodes 
        """
        return _PySpin.EnumNode_GetEntries(self)

    def SetIntValue(self, Value, Verify=True):
        r"""
        SetIntValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: int64_t
        Verify: bool

        virtual void Spinnaker::GenApi::EnumNode::SetIntValue(int64_t Value,
        bool Verify=true)

        Set integer node value

        Parameters:
        -----------

        Value:  The value to set

        Verify:  Enables AccessMode and Range verification (default = true) 
        """
        return _PySpin.EnumNode_SetIntValue(self, Value, Verify)

    def __ref__(self):
        r"""__ref__(self) -> gcstring"""
        return _PySpin.EnumNode___ref__(self)

    def GetIntValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetIntValue(self, Verify=False, IgnoreCache=False) -> int64_t

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        virtual int64_t Spinnaker::GenApi::EnumNode::GetIntValue(bool
        Verify=false, bool IgnoreCache=false)

        Get integer node value

        Parameters:
        -----------

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        The value read 
        """
        return _PySpin.EnumNode_GetIntValue(self, Verify, IgnoreCache)

    def GetEntryByName(self, Symbolic):
        r"""
        GetEntryByName(self, Symbolic) -> IEnumEntry

        Parameters
        ----------
        Symbolic: Spinnaker::GenICam::gcstring const &

        virtual IEnumEntry* Spinnaker::GenApi::EnumNode::GetEntryByName(const
        GenICam::gcstring &Symbolic)

        Get an entry node by name 
        """
        return _PySpin.EnumNode_GetEntryByName(self, Symbolic)

    def GetEntry(self, IntValue):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        virtual
        IEnumEntry* Spinnaker::GenApi::EnumNode::GetEntry(const int64_t
        IntValue)

        Get an entry node by its IntValue 
        """
        return _PySpin.EnumNode_GetEntry(self, IntValue)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        virtual IEnumEntry* Spinnaker::GenApi::EnumNode::GetCurrentEntry(bool
        Verify=false, bool IgnoreCache=false)

        Get the current entry 
        """
        return _PySpin.EnumNode_GetCurrentEntry(self, Verify, IgnoreCache)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::EnumNode::SetReference(INode *pBase)

        overload SetReference for Enumeration 
        """
        return _PySpin.EnumNode_SetReference(self, pBase)

# Register EnumNode in _PySpin:
_PySpin.EnumNode_swigregister(EnumNode)

class StringNode(IString, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: StringNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_StringNode

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: Spinnaker::GenICam::gcstring const &
        Verify: bool

        virtual void Spinnaker::GenApi::StringNode::SetValue(const
        GenICam::gcstring &Value, bool Verify=true)

        Set node value

        Parameters:
        -----------

        Value:  The value to set

        Verify:  Enables AccessMode and Range verification (default = true) 
        """
        return _PySpin.StringNode_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        virtual GenICam::gcstring Spinnaker::GenApi::StringNode::GetValue(bool
        Verify=false, bool IgnoreCache=false)

        Get node value

        Parameters:
        -----------

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        The value read 
        """
        return _PySpin.StringNode_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> gcstring"""
        return _PySpin.StringNode___call__(self)

    def __ref__(self):
        r"""__ref__(self) -> gcstring"""
        return _PySpin.StringNode___ref__(self)

    def GetMaxLength(self):
        r"""
        GetMaxLength(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::StringNode::GetMaxLength()

        Retrieves the maximum length of the string in bytes 
        """
        return _PySpin.StringNode_GetMaxLength(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::StringNode::SetReference(INode *pBase)

        overload SetReference for Value 
        """
        return _PySpin.StringNode_SetReference(self, pBase)

# Register StringNode in _PySpin:
_PySpin.StringNode_swigregister(StringNode)

class CommandNode(ICommand, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: CommandNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_CommandNode

    def Execute(self, Verify=True):
        r"""
        Execute(self, Verify=True)

        Parameters
        ----------
        Verify: bool

        virtual void Spinnaker::GenApi::CommandNode::Execute(bool Verify=true)

        Execute the command

        Parameters:
        -----------

        Verify:  Enables AccessMode and Range verification (default = true) 
        """
        return _PySpin.CommandNode_Execute(self, Verify)

    def __call__(self):
        r"""__call__(self)"""
        return _PySpin.CommandNode___call__(self)

    def IsDone(self, Verify=True):
        r"""
        IsDone(self, Verify=True) -> bool

        Parameters
        ----------
        Verify: bool

        virtual bool Spinnaker::GenApi::CommandNode::IsDone(bool Verify=true)

        Query whether the command is executed

        Parameters:
        -----------

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        True if the Execute command has finished; false otherwise 
        """
        return _PySpin.CommandNode_IsDone(self, Verify)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::CommandNode::SetReference(INode
        *pBase)

        overload SetReference for Value 
        """
        return _PySpin.CommandNode_SetReference(self, pBase)

# Register CommandNode in _PySpin:
_PySpin.CommandNode_swigregister(CommandNode)

class EnumEntryNode(IEnumEntry, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: EnumEntryNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_EnumEntryNode

    def GetValue(self):
        r"""
        GetValue(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::EnumEntryNode::GetValue()

        Get numeric enum value 
        """
        return _PySpin.EnumEntryNode_GetValue(self)

    def GetSymbolic(self):
        r"""
        GetSymbolic(self) -> gcstring
        virtual GenICam::gcstring
        Spinnaker::GenApi::EnumEntryNode::GetSymbolic() const

        Get symbolic enum value 
        """
        return _PySpin.EnumEntryNode_GetSymbolic(self)

    def GetNumericValue(self):
        r"""
        GetNumericValue(self) -> double
        virtual double
        Spinnaker::GenApi::EnumEntryNode::GetNumericValue()

        Get double number associated with the entry 
        """
        return _PySpin.EnumEntryNode_GetNumericValue(self)

    def IsSelfClearing(self):
        r"""
        IsSelfClearing(self) -> bool
        virtual bool
        Spinnaker::GenApi::EnumEntryNode::IsSelfClearing()

        Indicates if the corresponding EnumEntry is self clearing 
        """
        return _PySpin.EnumEntryNode_IsSelfClearing(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::EnumEntryNode::SetReference(INode
        *pBase)

        overload SetReference for EnumEntry 
        """
        return _PySpin.EnumEntryNode_SetReference(self, pBase)

# Register EnumEntryNode in _PySpin:
_PySpin.EnumEntryNode_swigregister(EnumEntryNode)

class _SWIG_CFltPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> _SWIG_CFltPtr
        __init__(self, pB) -> _SWIG_CFltPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin._SWIG_CFltPtr_swiginit(self, _PySpin.new__SWIG_CFltPtr(*args))
    __swig_destroy__ = _PySpin.delete__SWIG_CFltPtr

    def __ref__(self):
        r"""__ref__(self) -> IFloat"""
        return _PySpin._SWIG_CFltPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IFloat"""
        return _PySpin._SWIG_CFltPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IFloat"""
        return _PySpin._SWIG_CFltPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin._SWIG_CFltPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin._SWIG_CFltPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IFloat *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IFloat,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin._SWIG_CFltPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IFloat,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IFloat *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin._SWIG_CFltPtr___ne__(self, *args)

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: double
        Verify: bool

        """
        return _PySpin._SWIG_CFltPtr_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> double

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin._SWIG_CFltPtr_GetValue(self, Verify, IgnoreCache)

    def GetMin(self):
        r"""GetMin(self) -> double"""
        return _PySpin._SWIG_CFltPtr_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> double"""
        return _PySpin._SWIG_CFltPtr_GetMax(self)

    def HasInc(self):
        r"""HasInc(self) -> bool"""
        return _PySpin._SWIG_CFltPtr_HasInc(self)

    def GetIncMode(self):
        r"""GetIncMode(self) -> Spinnaker::GenApi::EIncMode"""
        return _PySpin._SWIG_CFltPtr_GetIncMode(self)

    def GetInc(self):
        r"""GetInc(self) -> double"""
        return _PySpin._SWIG_CFltPtr_GetInc(self)

    def GetListOfValidValues(self, bounded=True):
        r"""
        GetListOfValidValues(self, bounded=True) -> double_autovector_t

        Parameters
        ----------
        bounded: bool

        """
        return _PySpin._SWIG_CFltPtr_GetListOfValidValues(self, bounded)

    def GetRepresentation(self):
        r"""GetRepresentation(self) -> Spinnaker::GenApi::ERepresentation"""
        return _PySpin._SWIG_CFltPtr_GetRepresentation(self)

    def GetUnit(self):
        r"""GetUnit(self) -> gcstring"""
        return _PySpin._SWIG_CFltPtr_GetUnit(self)

    def GetDisplayNotation(self):
        r"""GetDisplayNotation(self) -> Spinnaker::GenApi::EDisplayNotation"""
        return _PySpin._SWIG_CFltPtr_GetDisplayNotation(self)

    def GetDisplayPrecision(self):
        r"""GetDisplayPrecision(self) -> int64_t"""
        return _PySpin._SWIG_CFltPtr_GetDisplayPrecision(self)

    def ImposeMin(self, Value):
        r"""
        ImposeMin(self, Value)

        Parameters
        ----------
        Value: double

        """
        return _PySpin._SWIG_CFltPtr_ImposeMin(self, Value)

    def ImposeMax(self, Value):
        r"""
        ImposeMax(self, Value)

        Parameters
        ----------
        Value: double

        """
        return _PySpin._SWIG_CFltPtr_ImposeMax(self, Value)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin._SWIG_CFltPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin._SWIG_CFltPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin._SWIG_CFltPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin._SWIG_CFltPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin._SWIG_CFltPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin._SWIG_CFltPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin._SWIG_CFltPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin._SWIG_CFltPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin._SWIG_CFltPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin._SWIG_CFltPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin._SWIG_CFltPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin._SWIG_CFltPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin._SWIG_CFltPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin._SWIG_CFltPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin._SWIG_CFltPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin._SWIG_CFltPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin._SWIG_CFltPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin._SWIG_CFltPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin._SWIG_CFltPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin._SWIG_CFltPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin._SWIG_CFltPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin._SWIG_CFltPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin._SWIG_CFltPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin._SWIG_CFltPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin._SWIG_CFltPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin._SWIG_CFltPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin._SWIG_CFltPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin._SWIG_CFltPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin._SWIG_CFltPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin._SWIG_CFltPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin._SWIG_CFltPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin._SWIG_CFltPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin._SWIG_CFltPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin._SWIG_CFltPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin._SWIG_CFltPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin._SWIG_CFltPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin._SWIG_CFltPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin._SWIG_CFltPtr_SetReference(self, pBase)

# Register _SWIG_CFltPtr in _PySpin:
_PySpin._SWIG_CFltPtr_swigregister(_SWIG_CFltPtr)

class CFloatPtr(_SWIG_CFltPtr):
    r"""


    SmartPointer for IFloat interface pointer

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CFloatPtr
        __init__(self, pB) -> CFloatPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CFloatPtr::CFloatPtr(IBase *pB)

        Constructor from IBase pointer type. 
        """
        _PySpin.CFloatPtr_swiginit(self, _PySpin.new_CFloatPtr(*args))

    def GetIntAlias(self):
        r"""
        GetIntAlias(self) -> IInteger
        IInteger* Spinnaker::GenApi::CFloatPtr::GetIntAlias()

        gets the interface of an integer alias node. 
        """
        return _PySpin.CFloatPtr_GetIntAlias(self)

    def GetEnumAlias(self):
        r"""
        GetEnumAlias(self) -> IEnumeration
        IEnumeration* Spinnaker::GenApi::CFloatPtr::GetEnumAlias()

        gets the interface of an enum alias node. 
        """
        return _PySpin.CFloatPtr_GetEnumAlias(self)

# Register CFloatPtr in _PySpin:
_PySpin.CFloatPtr_swigregister(CFloatPtr)


def GetInterfaceName(pBase):
    r"""
    GetInterfaceName(pBase) -> gcstring

    Parameters
    ----------
    pBase: Spinnaker::GenApi::IBase *

    GenICam::gcstring Spinnaker::GenApi::GetInterfaceName(IBase *pBase)

    Returns the name of the main interface as string DEPRICATED, use
    IBase::GetPrincipalInterfaceType() instead 
    """
    return _PySpin.GetInterfaceName(pBase)
class CBasePtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CBasePtr
        __init__(self, pB) -> CBasePtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CBasePtr_swiginit(self, _PySpin.new_CBasePtr(*args))
    __swig_destroy__ = _PySpin.delete_CBasePtr

    def __ref__(self):
        r"""__ref__(self) -> IBase"""
        return _PySpin.CBasePtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IBase"""
        return _PySpin.CBasePtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IBase"""
        return _PySpin.CBasePtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CBasePtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CBasePtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IBase *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBase,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CBasePtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBase,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IBase *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CBasePtr___ne__(self, *args)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CBasePtr_GetAccessMode(self)

# Register CBasePtr in _PySpin:
_PySpin.CBasePtr_swigregister(CBasePtr)

class CNodePtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CNodePtr
        __init__(self, pB) -> CNodePtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CNodePtr_swiginit(self, _PySpin.new_CNodePtr(*args))
    __swig_destroy__ = _PySpin.delete_CNodePtr

    def __ref__(self):
        r"""__ref__(self) -> INode"""
        return _PySpin.CNodePtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> INode"""
        return _PySpin.CNodePtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> INode"""
        return _PySpin.CNodePtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CNodePtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CNodePtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::INode *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INode,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CNodePtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INode,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::INode *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CNodePtr___ne__(self, *args)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CNodePtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CNodePtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CNodePtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CNodePtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CNodePtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CNodePtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CNodePtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CNodePtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CNodePtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CNodePtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CNodePtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CNodePtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CNodePtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CNodePtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CNodePtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CNodePtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CNodePtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CNodePtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CNodePtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CNodePtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CNodePtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CNodePtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CNodePtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CNodePtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CNodePtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CNodePtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CNodePtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CNodePtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CNodePtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CNodePtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CNodePtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CNodePtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CNodePtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CNodePtr_SetReference(self, pBase)

# Register CNodePtr in _PySpin:
_PySpin.CNodePtr_swigregister(CNodePtr)

class CValuePtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CValuePtr
        __init__(self, pB) -> CValuePtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CValuePtr_swiginit(self, _PySpin.new_CValuePtr(*args))
    __swig_destroy__ = _PySpin.delete_CValuePtr

    def __ref__(self):
        r"""__ref__(self) -> IValue"""
        return _PySpin.CValuePtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IValue"""
        return _PySpin.CValuePtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IValue"""
        return _PySpin.CValuePtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CValuePtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CValuePtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IValue *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IValue,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CValuePtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IValue,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IValue *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CValuePtr___ne__(self, *args)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CValuePtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CValuePtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CValuePtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CValuePtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CValuePtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CValuePtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CValuePtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CValuePtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CValuePtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CValuePtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CValuePtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CValuePtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CValuePtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CValuePtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CValuePtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CValuePtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CValuePtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CValuePtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CValuePtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CValuePtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CValuePtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CValuePtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CValuePtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CValuePtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CValuePtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CValuePtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CValuePtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CValuePtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CValuePtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CValuePtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CValuePtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CValuePtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CValuePtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CValuePtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CValuePtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CValuePtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CValuePtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CValuePtr_SetReference(self, pBase)

# Register CValuePtr in _PySpin:
_PySpin.CValuePtr_swigregister(CValuePtr)

class CCategoryPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CCategoryPtr
        __init__(self, pB) -> CCategoryPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CCategoryPtr_swiginit(self, _PySpin.new_CCategoryPtr(*args))
    __swig_destroy__ = _PySpin.delete_CCategoryPtr

    def __ref__(self):
        r"""__ref__(self) -> ICategory"""
        return _PySpin.CCategoryPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> ICategory"""
        return _PySpin.CCategoryPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> ICategory"""
        return _PySpin.CCategoryPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CCategoryPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CCategoryPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::ICategory *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICategory,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CCategoryPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICategory,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::ICategory *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CCategoryPtr___ne__(self, *args)

    def GetFeatures(self):
        r"""GetFeatures(self)"""
        return _PySpin.CCategoryPtr_GetFeatures(self)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CCategoryPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CCategoryPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CCategoryPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CCategoryPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CCategoryPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CCategoryPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CCategoryPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CCategoryPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CCategoryPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CCategoryPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CCategoryPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CCategoryPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CCategoryPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CCategoryPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CCategoryPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CCategoryPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CCategoryPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CCategoryPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CCategoryPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CCategoryPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CCategoryPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CCategoryPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CCategoryPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CCategoryPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CCategoryPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CCategoryPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CCategoryPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CCategoryPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CCategoryPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CCategoryPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CCategoryPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CCategoryPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CCategoryPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CCategoryPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CCategoryPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CCategoryPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CCategoryPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CCategoryPtr_SetReference(self, pBase)

# Register CCategoryPtr in _PySpin:
_PySpin.CCategoryPtr_swigregister(CCategoryPtr)

class CBooleanPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CBooleanPtr
        __init__(self, pB) -> CBooleanPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CBooleanPtr_swiginit(self, _PySpin.new_CBooleanPtr(*args))
    __swig_destroy__ = _PySpin.delete_CBooleanPtr

    def __ref__(self):
        r"""__ref__(self) -> IBoolean"""
        return _PySpin.CBooleanPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IBoolean"""
        return _PySpin.CBooleanPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IBoolean"""
        return _PySpin.CBooleanPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CBooleanPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CBooleanPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IBoolean *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBoolean,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CBooleanPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBoolean,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IBoolean *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CBooleanPtr___ne__(self, *args)

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: bool
        Verify: bool

        """
        return _PySpin.CBooleanPtr_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> bool

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CBooleanPtr_GetValue(self, Verify, IgnoreCache)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CBooleanPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CBooleanPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CBooleanPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CBooleanPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CBooleanPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CBooleanPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CBooleanPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CBooleanPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CBooleanPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CBooleanPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CBooleanPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CBooleanPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CBooleanPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CBooleanPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CBooleanPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CBooleanPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CBooleanPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CBooleanPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CBooleanPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CBooleanPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CBooleanPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CBooleanPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CBooleanPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CBooleanPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CBooleanPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CBooleanPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CBooleanPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CBooleanPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CBooleanPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CBooleanPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CBooleanPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CBooleanPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CBooleanPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CBooleanPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CBooleanPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CBooleanPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CBooleanPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CBooleanPtr_SetReference(self, pBase)

# Register CBooleanPtr in _PySpin:
_PySpin.CBooleanPtr_swigregister(CBooleanPtr)

class CIntegerPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CIntegerPtr
        __init__(self, pB) -> CIntegerPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CIntegerPtr_swiginit(self, _PySpin.new_CIntegerPtr(*args))
    __swig_destroy__ = _PySpin.delete_CIntegerPtr

    def __ref__(self):
        r"""__ref__(self) -> IInteger"""
        return _PySpin.CIntegerPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IInteger"""
        return _PySpin.CIntegerPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IInteger"""
        return _PySpin.CIntegerPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CIntegerPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CIntegerPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IInteger *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IInteger,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CIntegerPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IInteger,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IInteger *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CIntegerPtr___ne__(self, *args)

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: int64_t
        Verify: bool

        """
        return _PySpin.CIntegerPtr_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> int64_t

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CIntegerPtr_GetValue(self, Verify, IgnoreCache)

    def GetMin(self):
        r"""GetMin(self) -> int64_t"""
        return _PySpin.CIntegerPtr_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> int64_t"""
        return _PySpin.CIntegerPtr_GetMax(self)

    def GetIncMode(self):
        r"""GetIncMode(self) -> Spinnaker::GenApi::EIncMode"""
        return _PySpin.CIntegerPtr_GetIncMode(self)

    def GetInc(self):
        r"""GetInc(self) -> int64_t"""
        return _PySpin.CIntegerPtr_GetInc(self)

    def GetListOfValidValues(self, bounded=True):
        r"""
        GetListOfValidValues(self, bounded=True) -> int64_autovector_t

        Parameters
        ----------
        bounded: bool

        """
        return _PySpin.CIntegerPtr_GetListOfValidValues(self, bounded)

    def GetRepresentation(self):
        r"""GetRepresentation(self) -> Spinnaker::GenApi::ERepresentation"""
        return _PySpin.CIntegerPtr_GetRepresentation(self)

    def GetUnit(self):
        r"""GetUnit(self) -> gcstring"""
        return _PySpin.CIntegerPtr_GetUnit(self)

    def ImposeMin(self, Value):
        r"""
        ImposeMin(self, Value)

        Parameters
        ----------
        Value: int64_t

        """
        return _PySpin.CIntegerPtr_ImposeMin(self, Value)

    def ImposeMax(self, Value):
        r"""
        ImposeMax(self, Value)

        Parameters
        ----------
        Value: int64_t

        """
        return _PySpin.CIntegerPtr_ImposeMax(self, Value)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CIntegerPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CIntegerPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CIntegerPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CIntegerPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CIntegerPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CIntegerPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CIntegerPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CIntegerPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CIntegerPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CIntegerPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CIntegerPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CIntegerPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CIntegerPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CIntegerPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CIntegerPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CIntegerPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CIntegerPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CIntegerPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CIntegerPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CIntegerPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CIntegerPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CIntegerPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CIntegerPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CIntegerPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CIntegerPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CIntegerPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CIntegerPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CIntegerPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CIntegerPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CIntegerPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CIntegerPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CIntegerPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CIntegerPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CIntegerPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CIntegerPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CIntegerPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CIntegerPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CIntegerPtr_SetReference(self, pBase)

# Register CIntegerPtr in _PySpin:
_PySpin.CIntegerPtr_swigregister(CIntegerPtr)

class CStringPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CStringPtr
        __init__(self, pB) -> CStringPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CStringPtr_swiginit(self, _PySpin.new_CStringPtr(*args))
    __swig_destroy__ = _PySpin.delete_CStringPtr

    def __ref__(self):
        r"""__ref__(self) -> IString"""
        return _PySpin.CStringPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IString"""
        return _PySpin.CStringPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IString"""
        return _PySpin.CStringPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CStringPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CStringPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IString *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IString,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CStringPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IString,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IString *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CStringPtr___ne__(self, *args)

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CStringPtr_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CStringPtr_GetValue(self, Verify, IgnoreCache)

    def GetMaxLength(self):
        r"""GetMaxLength(self) -> int64_t"""
        return _PySpin.CStringPtr_GetMaxLength(self)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CStringPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CStringPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CStringPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CStringPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CStringPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CStringPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CStringPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CStringPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CStringPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CStringPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CStringPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CStringPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CStringPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CStringPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CStringPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CStringPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CStringPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CStringPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CStringPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CStringPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CStringPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CStringPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CStringPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CStringPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CStringPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CStringPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CStringPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CStringPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CStringPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CStringPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CStringPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CStringPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CStringPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CStringPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CStringPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CStringPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CStringPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CStringPtr_SetReference(self, pBase)

# Register CStringPtr in _PySpin:
_PySpin.CStringPtr_swigregister(CStringPtr)

class CRegisterPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CRegisterPtr
        __init__(self, pB) -> CRegisterPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CRegisterPtr_swiginit(self, _PySpin.new_CRegisterPtr(*args))
    __swig_destroy__ = _PySpin.delete_CRegisterPtr

    def __ref__(self):
        r"""__ref__(self) -> IRegister"""
        return _PySpin.CRegisterPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IRegister"""
        return _PySpin.CRegisterPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IRegister"""
        return _PySpin.CRegisterPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CRegisterPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CRegisterPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IRegister *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IRegister,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CRegisterPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IRegister,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IRegister *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CRegisterPtr___ne__(self, *args)

    def Set(self, pBuffer, Verify=True):
        r"""
        Set(self, pBuffer, Verify=True)

        Parameters
        ----------
        pBuffer: uint8_t const *
        Verify: bool


        Set the register's contents with the contents (as 8-bit unsigned ints) of the given array.

        Parameters:
        -----------

        pBuffer:  The NumPy array containing the data to set

        Verify:  Enables AccessMode and Range verification (default = true)

        """
        return _PySpin.CRegisterPtr_Set(self, pBuffer, Verify)

    def Get(self, pBuffer, Verify=False, IgnoreCache=False):
        r"""
        Get(self, pBuffer, Verify=False, IgnoreCache=False)

        Parameters
        ----------
        pBuffer: uint8_t *
        Verify: bool
        IgnoreCache: bool


        Gets a NumPy array representing the contents of the register, as 8-bit unsigned ints.

        Parameters:
        -----------

        pBuffer:  The number of bytes to retrieve

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        """
        return _PySpin.CRegisterPtr_Get(self, pBuffer, Verify, IgnoreCache)

    def GetLength(self):
        r"""GetLength(self) -> int64_t"""
        return _PySpin.CRegisterPtr_GetLength(self)

    def GetAddress(self):
        r"""GetAddress(self) -> int64_t"""
        return _PySpin.CRegisterPtr_GetAddress(self)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CRegisterPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CRegisterPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CRegisterPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CRegisterPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CRegisterPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CRegisterPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CRegisterPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CRegisterPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CRegisterPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CRegisterPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CRegisterPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CRegisterPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CRegisterPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CRegisterPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CRegisterPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CRegisterPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CRegisterPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CRegisterPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CRegisterPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CRegisterPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CRegisterPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CRegisterPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CRegisterPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CRegisterPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CRegisterPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CRegisterPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CRegisterPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CRegisterPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CRegisterPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CRegisterPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CRegisterPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CRegisterPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CRegisterPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CRegisterPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CRegisterPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CRegisterPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CRegisterPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CRegisterPtr_SetReference(self, pBase)

# Register CRegisterPtr in _PySpin:
_PySpin.CRegisterPtr_swigregister(CRegisterPtr)

class CEnumerationPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CEnumerationPtr
        __init__(self, pB) -> CEnumerationPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CEnumerationPtr_swiginit(self, _PySpin.new_CEnumerationPtr(*args))
    __swig_destroy__ = _PySpin.delete_CEnumerationPtr

    def __ref__(self):
        r"""__ref__(self) -> IEnumeration"""
        return _PySpin.CEnumerationPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IEnumeration"""
        return _PySpin.CEnumerationPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IEnumeration"""
        return _PySpin.CEnumerationPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CEnumerationPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CEnumerationPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IEnumeration *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumeration,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CEnumerationPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumeration,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IEnumeration *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CEnumerationPtr___ne__(self, *args)

    def GetSymbolics(self, Symbolics):
        r"""
        GetSymbolics(self, Symbolics)

        Parameters
        ----------
        Symbolics: Spinnaker::GenApi::StringList_t &

        """
        return _PySpin.CEnumerationPtr_GetSymbolics(self, Symbolics)

    def GetEntries(self):
        r"""GetEntries(self)"""
        return _PySpin.CEnumerationPtr_GetEntries(self)

    def SetIntValue(self, Value, Verify=True):
        r"""
        SetIntValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: int64_t
        Verify: bool

        """
        return _PySpin.CEnumerationPtr_SetIntValue(self, Value, Verify)

    def GetIntValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetIntValue(self, Verify=False, IgnoreCache=False) -> int64_t

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CEnumerationPtr_GetIntValue(self, Verify, IgnoreCache)

    def GetEntryByName(self, Symbolic):
        r"""
        GetEntryByName(self, Symbolic) -> IEnumEntry

        Parameters
        ----------
        Symbolic: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CEnumerationPtr_GetEntryByName(self, Symbolic)

    def GetEntry(self, IntValue):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        """
        return _PySpin.CEnumerationPtr_GetEntry(self, IntValue)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CEnumerationPtr_GetCurrentEntry(self, Verify, IgnoreCache)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CEnumerationPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CEnumerationPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CEnumerationPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CEnumerationPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CEnumerationPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CEnumerationPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CEnumerationPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CEnumerationPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CEnumerationPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CEnumerationPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CEnumerationPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CEnumerationPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CEnumerationPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CEnumerationPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CEnumerationPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CEnumerationPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CEnumerationPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CEnumerationPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CEnumerationPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CEnumerationPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CEnumerationPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CEnumerationPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CEnumerationPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CEnumerationPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CEnumerationPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CEnumerationPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CEnumerationPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CEnumerationPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CEnumerationPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CEnumerationPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CEnumerationPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CEnumerationPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CEnumerationPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CEnumerationPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CEnumerationPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CEnumerationPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CEnumerationPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CEnumerationPtr_SetReference(self, pBase)

# Register CEnumerationPtr in _PySpin:
_PySpin.CEnumerationPtr_swigregister(CEnumerationPtr)

class CEnumEntryPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CEnumEntryPtr
        __init__(self, pB) -> CEnumEntryPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CEnumEntryPtr_swiginit(self, _PySpin.new_CEnumEntryPtr(*args))
    __swig_destroy__ = _PySpin.delete_CEnumEntryPtr

    def __ref__(self):
        r"""__ref__(self) -> IEnumEntry"""
        return _PySpin.CEnumEntryPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IEnumEntry"""
        return _PySpin.CEnumEntryPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IEnumEntry"""
        return _PySpin.CEnumEntryPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CEnumEntryPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CEnumEntryPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IEnumEntry *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumEntry,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CEnumEntryPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumEntry,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IEnumEntry *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CEnumEntryPtr___ne__(self, *args)

    def GetValue(self):
        r"""GetValue(self) -> int64_t"""
        return _PySpin.CEnumEntryPtr_GetValue(self)

    def GetSymbolic(self):
        r"""GetSymbolic(self) -> gcstring"""
        return _PySpin.CEnumEntryPtr_GetSymbolic(self)

    def GetNumericValue(self):
        r"""GetNumericValue(self) -> double"""
        return _PySpin.CEnumEntryPtr_GetNumericValue(self)

    def IsSelfClearing(self):
        r"""IsSelfClearing(self) -> bool"""
        return _PySpin.CEnumEntryPtr_IsSelfClearing(self)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CEnumEntryPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CEnumEntryPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CEnumEntryPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CEnumEntryPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CEnumEntryPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CEnumEntryPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CEnumEntryPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CEnumEntryPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CEnumEntryPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CEnumEntryPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CEnumEntryPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CEnumEntryPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CEnumEntryPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CEnumEntryPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CEnumEntryPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CEnumEntryPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CEnumEntryPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CEnumEntryPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CEnumEntryPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CEnumEntryPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CEnumEntryPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CEnumEntryPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CEnumEntryPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CEnumEntryPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CEnumEntryPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CEnumEntryPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CEnumEntryPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CEnumEntryPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CEnumEntryPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CEnumEntryPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CEnumEntryPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CEnumEntryPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CEnumEntryPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CEnumEntryPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CEnumEntryPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CEnumEntryPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CEnumEntryPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CEnumEntryPtr_SetReference(self, pBase)

# Register CEnumEntryPtr in _PySpin:
_PySpin.CEnumEntryPtr_swigregister(CEnumEntryPtr)

class CSelectorPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CSelectorPtr
        __init__(self, pB) -> CSelectorPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CSelectorPtr_swiginit(self, _PySpin.new_CSelectorPtr(*args))
    __swig_destroy__ = _PySpin.delete_CSelectorPtr

    def __ref__(self):
        r"""__ref__(self) -> ISelector"""
        return _PySpin.CSelectorPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> ISelector"""
        return _PySpin.CSelectorPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> ISelector"""
        return _PySpin.CSelectorPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CSelectorPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CSelectorPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::ISelector *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ISelector,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CSelectorPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ISelector,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::ISelector *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CSelectorPtr___ne__(self, *args)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CSelectorPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CSelectorPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CSelectorPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CSelectorPtr_GetAccessMode(self)

# Register CSelectorPtr in _PySpin:
_PySpin.CSelectorPtr_swigregister(CSelectorPtr)

class CCommandPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CCommandPtr
        __init__(self, pB) -> CCommandPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::IBase *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CCommandPtr_swiginit(self, _PySpin.new_CCommandPtr(*args))
    __swig_destroy__ = _PySpin.delete_CCommandPtr

    def __ref__(self):
        r"""__ref__(self) -> ICommand"""
        return _PySpin.CCommandPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> ICommand"""
        return _PySpin.CCommandPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> ICommand"""
        return _PySpin.CCommandPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CCommandPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CCommandPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::ICommand *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICommand,Spinnaker::GenApi::IBase > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CCommandPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICommand,Spinnaker::GenApi::IBase > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::ICommand *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CCommandPtr___ne__(self, *args)

    def Execute(self, Verify=True):
        r"""
        Execute(self, Verify=True)

        Parameters
        ----------
        Verify: bool

        """
        return _PySpin.CCommandPtr_Execute(self, Verify)

    def IsDone(self, Verify=True):
        r"""
        IsDone(self, Verify=True) -> bool

        Parameters
        ----------
        Verify: bool

        """
        return _PySpin.CCommandPtr_IsDone(self, Verify)

    def GetNode(self):
        r"""GetNode(self) -> INode"""
        return _PySpin.CCommandPtr_GetNode(self)

    def ToString(self, Verify=False, IgnoreCache=False):
        r"""
        ToString(self, Verify=False, IgnoreCache=False) -> gcstring

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.CCommandPtr_ToString(self, Verify, IgnoreCache)

    def FromString(self, ValueStr, Verify=True):
        r"""
        FromString(self, ValueStr, Verify=True)

        Parameters
        ----------
        ValueStr: Spinnaker::GenICam::gcstring const &
        Verify: bool

        """
        return _PySpin.CCommandPtr_FromString(self, ValueStr, Verify)

    def IsValueCacheValid(self):
        r"""IsValueCacheValid(self) -> bool"""
        return _PySpin.CCommandPtr_IsValueCacheValid(self)

    def GetName(self, FullQualified=False):
        r"""
        GetName(self, FullQualified=False) -> gcstring

        Parameters
        ----------
        FullQualified: bool

        """
        return _PySpin.CCommandPtr_GetName(self, FullQualified)

    def GetNameSpace(self):
        r"""GetNameSpace(self) -> Spinnaker::GenApi::ENameSpace"""
        return _PySpin.CCommandPtr_GetNameSpace(self)

    def GetVisibility(self):
        r"""GetVisibility(self) -> Spinnaker::GenApi::EVisibility"""
        return _PySpin.CCommandPtr_GetVisibility(self)

    def InvalidateNode(self):
        r"""InvalidateNode(self)"""
        return _PySpin.CCommandPtr_InvalidateNode(self)

    def IsCachable(self):
        r"""IsCachable(self) -> bool"""
        return _PySpin.CCommandPtr_IsCachable(self)

    def IsAccessModeCacheable(self):
        r"""IsAccessModeCacheable(self) -> Spinnaker::GenApi::EYesNo"""
        return _PySpin.CCommandPtr_IsAccessModeCacheable(self)

    def GetCachingMode(self):
        r"""GetCachingMode(self) -> Spinnaker::GenApi::ECachingMode"""
        return _PySpin.CCommandPtr_GetCachingMode(self)

    def GetPollingTime(self):
        r"""GetPollingTime(self) -> int64_t"""
        return _PySpin.CCommandPtr_GetPollingTime(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CCommandPtr_GetToolTip(self)

    def GetDescription(self):
        r"""GetDescription(self) -> gcstring"""
        return _PySpin.CCommandPtr_GetDescription(self)

    def GetDisplayName(self):
        r"""GetDisplayName(self) -> gcstring"""
        return _PySpin.CCommandPtr_GetDisplayName(self)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CCommandPtr_GetDeviceName(self)

    def GetChildren(self, *args):
        r"""
        GetChildren(self, LinkType=ctReadingChildren)

        Parameters
        ----------
        LinkType: enum Spinnaker::GenApi::ELinkType

        """
        return _PySpin.CCommandPtr_GetChildren(self, *args)

    def GetParents(self):
        r"""
        GetParents(self)

        Parameters
        ----------
        Parents: Spinnaker::GenApi::NodeList_t &

        """
        return _PySpin.CCommandPtr_GetParents(self)

    def RegisterCallback(self, pCallback):
        r"""
        RegisterCallback(self, pCallback) -> Spinnaker::GenApi::CallbackHandleType

        Parameters
        ----------
        pCallback: Spinnaker::GenApi::CNodeCallback *

        """
        return _PySpin.CCommandPtr_RegisterCallback(self, pCallback)

    def DeregisterCallback(self, hCallback):
        r"""
        DeregisterCallback(self, hCallback) -> bool

        Parameters
        ----------
        hCallback: Spinnaker::GenApi::CallbackHandleType

        """
        return _PySpin.CCommandPtr_DeregisterCallback(self, hCallback)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.CCommandPtr_GetNodeMap(self)

    def GetEventID(self):
        r"""GetEventID(self) -> gcstring"""
        return _PySpin.CCommandPtr_GetEventID(self)

    def IsStreamable(self):
        r"""IsStreamable(self) -> bool"""
        return _PySpin.CCommandPtr_IsStreamable(self)

    def GetPropertyNames(self):
        r"""GetPropertyNames(self)"""
        return _PySpin.CCommandPtr_GetPropertyNames(self)

    def GetProperty(self, PropertyName, ValueStr, AttributeStr):
        r"""
        GetProperty(self, PropertyName, ValueStr, AttributeStr) -> bool

        Parameters
        ----------
        PropertyName: Spinnaker::GenICam::gcstring const &
        ValueStr: Spinnaker::GenICam::gcstring &
        AttributeStr: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CCommandPtr_GetProperty(self, PropertyName, ValueStr, AttributeStr)

    def ImposeAccessMode(self, ImposedAccessMode):
        r"""
        ImposeAccessMode(self, ImposedAccessMode)

        Parameters
        ----------
        ImposedAccessMode: enum Spinnaker::GenApi::EAccessMode

        """
        return _PySpin.CCommandPtr_ImposeAccessMode(self, ImposedAccessMode)

    def ImposeVisibility(self, ImposedVisibility):
        r"""
        ImposeVisibility(self, ImposedVisibility)

        Parameters
        ----------
        ImposedVisibility: enum Spinnaker::GenApi::EVisibility

        """
        return _PySpin.CCommandPtr_ImposeVisibility(self, ImposedVisibility)

    def GetAlias(self):
        r"""GetAlias(self) -> INode"""
        return _PySpin.CCommandPtr_GetAlias(self)

    def GetCastAlias(self):
        r"""GetCastAlias(self) -> INode"""
        return _PySpin.CCommandPtr_GetCastAlias(self)

    def GetDocuURL(self):
        r"""GetDocuURL(self) -> gcstring"""
        return _PySpin.CCommandPtr_GetDocuURL(self)

    def IsDeprecated(self):
        r"""IsDeprecated(self) -> bool"""
        return _PySpin.CCommandPtr_IsDeprecated(self)

    def GetPrincipalInterfaceType(self):
        r"""GetPrincipalInterfaceType(self) -> Spinnaker::GenApi::EInterfaceType"""
        return _PySpin.CCommandPtr_GetPrincipalInterfaceType(self)

    def IsFeature(self):
        r"""IsFeature(self) -> bool"""
        return _PySpin.CCommandPtr_IsFeature(self)

    def IsSelector(self):
        r"""IsSelector(self) -> bool"""
        return _PySpin.CCommandPtr_IsSelector(self)

    def GetSelectedFeatures(self, arg2):
        r"""
        GetSelectedFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CCommandPtr_GetSelectedFeatures(self, arg2)

    def GetSelectingFeatures(self, arg2):
        r"""
        GetSelectingFeatures(self, arg2)

        Parameters
        ----------
        arg2: FeatureList_t &

        """
        return _PySpin.CCommandPtr_GetSelectingFeatures(self, arg2)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.CCommandPtr_GetAccessMode(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: INode *

        """
        return _PySpin.CCommandPtr_SetReference(self, pBase)

# Register CCommandPtr in _PySpin:
_PySpin.CCommandPtr_swigregister(CCommandPtr)


def IsAvailable(*args):
    r"""
    IsAvailable(AccessMode) -> bool

    Parameters
    ----------
    AccessMode: enum Spinnaker::GenApi::EAccessMode

    IsAvailable(p) -> bool

    Parameters
    ----------
    p: Spinnaker::GenApi::IBase const *

    IsAvailable(r) -> bool

    Parameters
    ----------
    r: Spinnaker::GenApi::IBase const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBase,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INode,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IValue,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICategory,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBoolean,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IInteger,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IString,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IRegister,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumeration,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumEntry,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ISelector,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICommand,Spinnaker::GenApi::IBase > const &

    IsAvailable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IFloat,Spinnaker::GenApi::IBase > const &

    bool
    Spinnaker::GenApi::IsAvailable(const Spinnaker::GenApi::CPointer< T, B
    > &ptr)

    Checks if a node is Available 
    """
    return _PySpin.IsAvailable(*args)

def IsReadable(*args):
    r"""
    IsReadable(AccessMode) -> bool

    Parameters
    ----------
    AccessMode: enum Spinnaker::GenApi::EAccessMode

    IsReadable(p) -> bool

    Parameters
    ----------
    p: Spinnaker::GenApi::IBase const *

    IsReadable(r) -> bool

    Parameters
    ----------
    r: Spinnaker::GenApi::IBase const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBase,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INode,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IValue,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICategory,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBoolean,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IInteger,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IString,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IRegister,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumeration,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumEntry,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ISelector,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICommand,Spinnaker::GenApi::IBase > const &

    IsReadable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IFloat,Spinnaker::GenApi::IBase > const &

    bool
    Spinnaker::GenApi::IsReadable(const Spinnaker::GenApi::CPointer< T, B
    > &ptr)

    Checks if a node is readable 
    """
    return _PySpin.IsReadable(*args)

def IsWritable(*args):
    r"""
    IsWritable(AccessMode) -> bool

    Parameters
    ----------
    AccessMode: enum Spinnaker::GenApi::EAccessMode

    IsWritable(p) -> bool

    Parameters
    ----------
    p: Spinnaker::GenApi::IBase const *

    IsWritable(r) -> bool

    Parameters
    ----------
    r: Spinnaker::GenApi::IBase const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBase,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INode,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IValue,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICategory,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBoolean,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IInteger,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IString,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IRegister,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumeration,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumEntry,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ISelector,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICommand,Spinnaker::GenApi::IBase > const &

    IsWritable(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IFloat,Spinnaker::GenApi::IBase > const &

    bool
    Spinnaker::GenApi::IsWritable(const Spinnaker::GenApi::CPointer< T, B
    > &ptr)

    Checks if a node is Writable 
    """
    return _PySpin.IsWritable(*args)

def IsImplemented(*args):
    r"""
    IsImplemented(AccessMode) -> bool

    Parameters
    ----------
    AccessMode: enum Spinnaker::GenApi::EAccessMode

    IsImplemented(p) -> bool

    Parameters
    ----------
    p: Spinnaker::GenApi::IBase const *

    IsImplemented(r) -> bool

    Parameters
    ----------
    r: Spinnaker::GenApi::IBase const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBase,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INode,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IValue,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICategory,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IBoolean,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IInteger,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IString,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IRegister,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumeration,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IEnumEntry,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ISelector,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::ICommand,Spinnaker::GenApi::IBase > const &

    IsImplemented(ptr) -> bool

    Parameters
    ----------
    ptr: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IFloat,Spinnaker::GenApi::IBase > const &

    bool
    Spinnaker::GenApi::IsImplemented(const Spinnaker::GenApi::CPointer< T,
    B > &ptr)

    Checks if a node is Implemented 
    """
    return _PySpin.IsImplemented(*args)
class CNodeMapPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CNodeMapPtr
        __init__(self, pB) -> CNodeMapPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::INodeMap *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CNodeMapPtr_swiginit(self, _PySpin.new_CNodeMapPtr(*args))
    __swig_destroy__ = _PySpin.delete_CNodeMapPtr

    def __ref__(self):
        r"""__ref__(self) -> INodeMap"""
        return _PySpin.CNodeMapPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> INodeMap"""
        return _PySpin.CNodeMapPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> INodeMap"""
        return _PySpin.CNodeMapPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CNodeMapPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CNodeMapPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::INodeMap *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INodeMap,Spinnaker::GenApi::INodeMap > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CNodeMapPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INodeMap,Spinnaker::GenApi::INodeMap > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::INodeMap *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CNodeMapPtr___ne__(self, *args)

    def GetNodes(self):
        r"""GetNodes(self)"""
        return _PySpin.CNodeMapPtr_GetNodes(self)

    def GetNode(self, Name):
        r"""
        GetNode(self, Name) -> INode

        Parameters
        ----------
        Name: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapPtr_GetNode(self, Name)

    def InvalidateNodes(self):
        r"""InvalidateNodes(self)"""
        return _PySpin.CNodeMapPtr_InvalidateNodes(self)

    def Connect(self, *args):
        r"""
        Connect(self, pPort, PortName) -> bool

        Parameters
        ----------
        pPort: IPort *
        PortName: Spinnaker::GenICam::gcstring const &

        Connect(self, pPort) -> bool

        Parameters
        ----------
        pPort: IPort *

        """
        return _PySpin.CNodeMapPtr_Connect(self, *args)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CNodeMapPtr_GetDeviceName(self)

    def Poll(self, ElapsedTime):
        r"""
        Poll(self, ElapsedTime)

        Parameters
        ----------
        ElapsedTime: int64_t

        """
        return _PySpin.CNodeMapPtr_Poll(self, ElapsedTime)

    def GetNumNodes(self):
        r"""GetNumNodes(self) -> uint64_t"""
        return _PySpin.CNodeMapPtr_GetNumNodes(self)

# Register CNodeMapPtr in _PySpin:
_PySpin.CNodeMapPtr_swigregister(CNodeMapPtr)

class CNodeMapDynPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CNodeMapDynPtr
        __init__(self, pB) -> CNodeMapDynPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::INodeMap *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CNodeMapDynPtr_swiginit(self, _PySpin.new_CNodeMapDynPtr(*args))
    __swig_destroy__ = _PySpin.delete_CNodeMapDynPtr

    def __ref__(self):
        r"""__ref__(self) -> INodeMapDyn"""
        return _PySpin.CNodeMapDynPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> INodeMapDyn"""
        return _PySpin.CNodeMapDynPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> INodeMapDyn"""
        return _PySpin.CNodeMapDynPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CNodeMapDynPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CNodeMapDynPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::INodeMapDyn *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INodeMapDyn,Spinnaker::GenApi::INodeMap > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CNodeMapDynPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::INodeMapDyn,Spinnaker::GenApi::INodeMap > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::INodeMapDyn *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CNodeMapDynPtr___ne__(self, *args)

    def ClearAllNodes(self):
        r"""ClearAllNodes(self)"""
        return _PySpin.CNodeMapDynPtr_ClearAllNodes(self)

    def LoadXMLFromFile(self, FileName):
        r"""
        LoadXMLFromFile(self, FileName)

        Parameters
        ----------
        FileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapDynPtr_LoadXMLFromFile(self, FileName)

    def LoadXMLFromFileInject(self, TargetFileName, InjectFileName):
        r"""
        LoadXMLFromFileInject(self, TargetFileName, InjectFileName)

        Parameters
        ----------
        TargetFileName: Spinnaker::GenICam::gcstring const &
        InjectFileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapDynPtr_LoadXMLFromFileInject(self, TargetFileName, InjectFileName)

    def LoadXMLFromString(self, XMLData):
        r"""
        LoadXMLFromString(self, XMLData)

        Parameters
        ----------
        XMLData: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapDynPtr_LoadXMLFromString(self, XMLData)

    def LoadXMLFromStringInject(self, TargetXMLData, InjectXMLData):
        r"""
        LoadXMLFromStringInject(self, TargetXMLData, InjectXMLData)

        Parameters
        ----------
        TargetXMLData: Spinnaker::GenICam::gcstring const &
        InjectXMLData: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapDynPtr_LoadXMLFromStringInject(self, TargetXMLData, InjectXMLData)

    def PreprocessXMLFromFile(self, *args):
        r"""
        PreprocessXMLFromFile(self, XMLFileName, StyleSheetFileName, OutputFileName, XMLValidation=xvDefault)

        Parameters
        ----------
        XMLFileName: Spinnaker::GenICam::gcstring const &
        StyleSheetFileName: Spinnaker::GenICam::gcstring const &
        OutputFileName: Spinnaker::GenICam::gcstring const &
        XMLValidation: uint32_t const

        """
        return _PySpin.CNodeMapDynPtr_PreprocessXMLFromFile(self, *args)

    def MergeXMLFiles(self, TargetFileName, InjectedFileName, OutputFileName):
        r"""
        MergeXMLFiles(self, TargetFileName, InjectedFileName, OutputFileName)

        Parameters
        ----------
        TargetFileName: Spinnaker::GenICam::gcstring const &
        InjectedFileName: Spinnaker::GenICam::gcstring const &
        OutputFileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapDynPtr_MergeXMLFiles(self, TargetFileName, InjectedFileName, OutputFileName)

    def ExtractIndependentSubtree(self, XMLData, InjectXMLData, SubTreeRootNodeName, ExtractedSubtree):
        r"""
        ExtractIndependentSubtree(self, XMLData, InjectXMLData, SubTreeRootNodeName, ExtractedSubtree)

        Parameters
        ----------
        XMLData: Spinnaker::GenICam::gcstring const &
        InjectXMLData: Spinnaker::GenICam::gcstring const &
        SubTreeRootNodeName: Spinnaker::GenICam::gcstring const &
        ExtractedSubtree: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.CNodeMapDynPtr_ExtractIndependentSubtree(self, XMLData, InjectXMLData, SubTreeRootNodeName, ExtractedSubtree)

    def GetSupportedSchemaVersions(self):
        r"""GetSupportedSchemaVersions(self)"""
        return _PySpin.CNodeMapDynPtr_GetSupportedSchemaVersions(self)

    def LoadXMLFromZIPFile(self, ZipFileName):
        r"""
        LoadXMLFromZIPFile(self, ZipFileName)

        Parameters
        ----------
        ZipFileName: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapDynPtr_LoadXMLFromZIPFile(self, ZipFileName)

    def LoadXMLFromZIPData(self, zipData, zipSize):
        r"""
        LoadXMLFromZIPData(self, zipData, zipSize)

        Parameters
        ----------
        zipData: void const *
        zipSize: size_t

        """
        return _PySpin.CNodeMapDynPtr_LoadXMLFromZIPData(self, zipData, zipSize)

    def PreprocessXMLFromZIPFile(self, *args):
        r"""
        PreprocessXMLFromZIPFile(self, XMLFileName, StyleSheetFileName, OutputFileName, XMLValidation=xvDefault)

        Parameters
        ----------
        XMLFileName: Spinnaker::GenICam::gcstring const &
        StyleSheetFileName: Spinnaker::GenICam::gcstring const &
        OutputFileName: Spinnaker::GenICam::gcstring const &
        XMLValidation: uint32_t const

        """
        return _PySpin.CNodeMapDynPtr_PreprocessXMLFromZIPFile(self, *args)

    def GetNodes(self):
        r"""GetNodes(self)"""
        return _PySpin.CNodeMapDynPtr_GetNodes(self)

    def GetNode(self, Name):
        r"""
        GetNode(self, Name) -> INode

        Parameters
        ----------
        Name: Spinnaker::GenICam::gcstring const &

        """
        return _PySpin.CNodeMapDynPtr_GetNode(self, Name)

    def InvalidateNodes(self):
        r"""InvalidateNodes(self)"""
        return _PySpin.CNodeMapDynPtr_InvalidateNodes(self)

    def Connect(self, *args):
        r"""
        Connect(self, pPort, PortName) -> bool

        Parameters
        ----------
        pPort: IPort *
        PortName: Spinnaker::GenICam::gcstring const &

        Connect(self, pPort) -> bool

        Parameters
        ----------
        pPort: IPort *

        """
        return _PySpin.CNodeMapDynPtr_Connect(self, *args)

    def GetDeviceName(self):
        r"""GetDeviceName(self) -> gcstring"""
        return _PySpin.CNodeMapDynPtr_GetDeviceName(self)

    def Poll(self, ElapsedTime):
        r"""
        Poll(self, ElapsedTime)

        Parameters
        ----------
        ElapsedTime: int64_t

        """
        return _PySpin.CNodeMapDynPtr_Poll(self, ElapsedTime)

    def GetNumNodes(self):
        r"""GetNumNodes(self) -> uint64_t"""
        return _PySpin.CNodeMapDynPtr_GetNumNodes(self)

# Register CNodeMapDynPtr in _PySpin:
_PySpin.CNodeMapDynPtr_swigregister(CNodeMapDynPtr)

class CDeviceInfoPtr(object):
    r"""


    Encapsulates a GenApi pointer dealing with the dynamic_cast
    automatically.

    C++ includes: Pointer.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CDeviceInfoPtr
        __init__(self, pB) -> CDeviceInfoPtr

        Parameters
        ----------
        pB: Spinnaker::GenApi::INodeMap *

        Spinnaker::GenApi::CPointer< T, B >::CPointer(B *pB)

        Constructor from INode pointer type. 
        """
        _PySpin.CDeviceInfoPtr_swiginit(self, _PySpin.new_CDeviceInfoPtr(*args))
    __swig_destroy__ = _PySpin.delete_CDeviceInfoPtr

    def __ref__(self):
        r"""__ref__(self) -> IDeviceInfo"""
        return _PySpin.CDeviceInfoPtr___ref__(self)

    def __call__(self):
        r"""__call__(self) -> IDeviceInfo"""
        return _PySpin.CDeviceInfoPtr___call__(self)

    def __deref__(self):
        r"""__deref__(self) -> IDeviceInfo"""
        return _PySpin.CDeviceInfoPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::GenApi::CPointer< T, B >::IsValid() const  throw () true if
        the pointer is valid 
        """
        return _PySpin.CDeviceInfoPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin.CDeviceInfoPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IDeviceInfo *

        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IDeviceInfo,Spinnaker::GenApi::INodeMap > const &

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        """
        return _PySpin.CDeviceInfoPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::GenApi::CPointer< Spinnaker::GenApi::IDeviceInfo,Spinnaker::GenApi::INodeMap > const &

        __ne__(self, pT) -> bool

        Parameters
        ----------
        pT: Spinnaker::GenApi::IDeviceInfo *

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long const

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int const

        __ne__(self, nullPtr) -> bool

        Parameters
        ----------
        nullPtr: std::nullptr_t const

        """
        return _PySpin.CDeviceInfoPtr___ne__(self, *args)

    def GetModelName(self):
        r"""GetModelName(self) -> gcstring"""
        return _PySpin.CDeviceInfoPtr_GetModelName(self)

    def GetVendorName(self):
        r"""GetVendorName(self) -> gcstring"""
        return _PySpin.CDeviceInfoPtr_GetVendorName(self)

    def GetToolTip(self):
        r"""GetToolTip(self) -> gcstring"""
        return _PySpin.CDeviceInfoPtr_GetToolTip(self)

    def GetStandardNameSpace(self):
        r"""GetStandardNameSpace(self) -> gcstring"""
        return _PySpin.CDeviceInfoPtr_GetStandardNameSpace(self)

    def GetGenApiVersion(self, Version, Build):
        r"""
        GetGenApiVersion(self, Version, Build)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &
        Build: uint16_t &

        """
        return _PySpin.CDeviceInfoPtr_GetGenApiVersion(self, Version, Build)

    def GetSchemaVersion(self, Version):
        r"""
        GetSchemaVersion(self, Version)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &

        """
        return _PySpin.CDeviceInfoPtr_GetSchemaVersion(self, Version)

    def GetDeviceVersion(self, Version):
        r"""
        GetDeviceVersion(self, Version)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &

        """
        return _PySpin.CDeviceInfoPtr_GetDeviceVersion(self, Version)

    def GetProductGuid(self):
        r"""GetProductGuid(self) -> gcstring"""
        return _PySpin.CDeviceInfoPtr_GetProductGuid(self)

    def GetVersionGuid(self):
        r"""GetVersionGuid(self) -> gcstring"""
        return _PySpin.CDeviceInfoPtr_GetVersionGuid(self)

# Register CDeviceInfoPtr in _PySpin:
_PySpin.CDeviceInfoPtr_swigregister(CDeviceInfoPtr)

class RegisterNode(IRegister, ValueNode):
    r"""


    Interface for string properties.

    C++ includes: RegisterNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_RegisterNode

    def Set(self, pBuffer, Verify=True):
        r"""
        Set(self, pBuffer, Verify=True)

        Parameters
        ----------
        pBuffer: uint8_t const *
        Verify: bool

        virtual
        void Spinnaker::GenApi::RegisterNode::Set(const uint8_t *pBuffer,
        int64_t Length, bool Verify=true)

        Set the register's contents

        Parameters:
        -----------

        pBuffer:  The buffer containing the data to set

        Length:  The number of bytes in pBuffer

        Verify:  Enables AccessMode and Range verification (default = true) 
        """
        return _PySpin.RegisterNode_Set(self, pBuffer, Verify)

    def Get(self, pBuffer, Verify=False, IgnoreCache=False):
        r"""
        Get(self, pBuffer, Verify=False, IgnoreCache=False)

        Parameters
        ----------
        pBuffer: uint8_t *
        Verify: bool
        IgnoreCache: bool

        virtual
        void Spinnaker::GenApi::RegisterNode::Get(uint8_t *pBuffer, int64_t
        Length, bool Verify=false, bool IgnoreCache=false)

        Fills a buffer with the register's contents

        Parameters:
        -----------

        pBuffer:  The buffer receiving the data to read

        Length:  The number of bytes to retrieve

        Verify:  Enables Range verification (default = false). The AccessMode
        is always checked

        IgnoreCache:  If true the value is read ignoring any caches (default =
        false)

        The value read 
        """
        return _PySpin.RegisterNode_Get(self, pBuffer, Verify, IgnoreCache)

    def GetLength(self):
        r"""
        GetLength(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::RegisterNode::GetLength()

        Retrieves the Length of the register [Bytes] 
        """
        return _PySpin.RegisterNode_GetLength(self)

    def GetAddress(self):
        r"""
        GetAddress(self) -> int64_t
        virtual int64_t Spinnaker::GenApi::RegisterNode::GetAddress()

        Retrieves the Address of the register 
        """
        return _PySpin.RegisterNode_GetAddress(self)

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::RegisterNode::SetReference(INode
        *pBase)

        overload SetReference for Register 
        """
        return _PySpin.RegisterNode_SetReference(self, pBase)

# Register RegisterNode in _PySpin:
_PySpin.RegisterNode_swigregister(RegisterNode)

class IntRegNode(IntegerNode, RegisterNode):
    r"""


    Interface for string properties.

    C++ includes: IntRegNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IntRegNode

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::IntRegNode::SetReference(INode *pBase)

        overload SetReference for Value 
        """
        return _PySpin.IntRegNode_SetReference(self, pBase)

# Register IntRegNode in _PySpin:
_PySpin.IntRegNode_swigregister(IntRegNode)

class FloatRegNode(FloatNode, RegisterNode):
    r"""


    Interface for string properties.

    C++ includes: FloatRegNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_FloatRegNode

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::FloatRegNode::SetReference(INode
        *pBase)

        overload SetReference for Value 
        """
        return _PySpin.FloatRegNode_SetReference(self, pBase)

# Register FloatRegNode in _PySpin:
_PySpin.FloatRegNode_swigregister(FloatRegNode)

class StringRegNode(StringNode, RegisterNode):
    r"""


    Interface for string properties.

    C++ includes: StringRegNode.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_StringRegNode

    def SetReference(self, pBase):
        r"""
        SetReference(self, pBase)

        Parameters
        ----------
        pBase: Spinnaker::GenApi::INode *

        virtual void Spinnaker::GenApi::StringRegNode::SetReference(INode
        *pBase)

        overload SetReference for Value 
        """
        return _PySpin.StringRegNode_SetReference(self, pBase)

# Register StringRegNode in _PySpin:
_PySpin.StringRegNode_swigregister(StringRegNode)

class CSelectorSet(Node):
    r"""


    The set of selectors selecting a given node

    C++ includes: SelectorSet.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_CSelectorSet

    def IsEmpty(self):
        r"""
        IsEmpty(self) -> bool
        bool
        Spinnaker::GenApi::CSelectorSet::IsEmpty()

        returns true if no selectors are present 
        """
        return _PySpin.CSelectorSet_IsEmpty(self)

    def SetFirst(self):
        r"""
        SetFirst(self) -> bool
        virtual bool Spinnaker::GenApi::CSelectorSet::SetFirst() 
        """
        return _PySpin.CSelectorSet_SetFirst(self)

    def SetNext(self, Tick=True):
        r"""
        SetNext(self, Tick=True) -> bool

        Parameters
        ----------
        Tick: bool

        virtual bool Spinnaker::GenApi::CSelectorSet::SetNext(bool Tick=true)

        """
        return _PySpin.CSelectorSet_SetNext(self, Tick)

    def Restore(self):
        r"""
        Restore(self)
        virtual void Spinnaker::GenApi::CSelectorSet::Restore() 
        """
        return _PySpin.CSelectorSet_Restore(self)

    def ToString(self):
        r"""
        ToString(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::CSelectorSet::ToString()

        """
        return _PySpin.CSelectorSet_ToString(self)

    def GetSelectorList(self, Incremental=False):
        r"""
        GetSelectorList(self, Incremental=False)

        Parameters
        ----------
        Incremental: bool

        virtual void
        Spinnaker::GenApi::CSelectorSet::GetSelectorList(FeatureList_t
        &SelectorList, bool Incremental=false) 
        """
        return _PySpin.CSelectorSet_GetSelectorList(self, Incremental)

# Register CSelectorSet in _PySpin:
_PySpin.CSelectorSet_swigregister(CSelectorSet)

class NodeCallback(object):
    r"""Proxy of C++ NodeCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> NodeCallback

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == NodeCallback:
            _self = None
        else:
            _self = self
        _PySpin.NodeCallback_swiginit(self, _PySpin.new_NodeCallback(_self, ))
    __swig_destroy__ = _PySpin.delete_NodeCallback

    def CallbackFunction(self, node):
        r"""
        CallbackFunction(self, node)

        Parameters
        ----------
        node: Spinnaker::GenApi::INode *


        Callback function used in node callbacks (see NodeMapCallback example for more details). Users should override this function
        when using node callbacks.

        Parameters:
        -----------

        node: INode passed to the function during the callback. 
        """
        return _PySpin.NodeCallback_CallbackFunction(self, node)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_NodeCallback(self)
        return weakref.proxy(self)

# Register NodeCallback in _PySpin:
_PySpin.NodeCallback_swigregister(NodeCallback)


def RegisterNodeCallback(pNode, f):
    r"""
    RegisterNodeCallback(pNode, f)

    Parameters
    ----------
    pNode: Spinnaker::GenApi::INode *
    f: NodeCallback &

    """
    return _PySpin.RegisterNodeCallback(pNode, f)

def DeregisterNodeCallback(f):
    r"""
    DeregisterNodeCallback(f)

    Parameters
    ----------
    f: NodeCallback &

    """
    return _PySpin.DeregisterNodeCallback(f)
class NodeMap(INodeMap, IDeviceInfo):
    r"""


    Smart pointer template for NodeMaps with create function.

    Parameters:
    -----------

    TCameraParams:  The camera specific parameter class (auto generated
    from camera xml file)

    C++ includes: NodeMap.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, DeviceName="Device") -> NodeMap

        Parameters
        ----------
        DeviceName: Spinnaker::GenICam::gcstring

        Spinnaker::GenApi::NodeMap::NodeMap(GenICam::gcstring
        DeviceName="Device")

        Constructor 
        """
        _PySpin.NodeMap_swiginit(self, _PySpin.new_NodeMap(*args))
    __swig_destroy__ = _PySpin.delete_NodeMap

    def Destroy(self):
        r"""
        Destroy(self)
        void
        Spinnaker::GenApi::NodeMap::Destroy()

        Destroys the node map 
        """
        return _PySpin.NodeMap_Destroy(self)

    def LoadXMLFromFile(self, FileName):
        r"""
        LoadXMLFromFile(self, FileName)

        Parameters
        ----------
        FileName: Spinnaker::GenICam::gcstring

        void Spinnaker::GenApi::NodeMap::LoadXMLFromFile(GenICam::gcstring
        FileName)

        ! Creates the object from the default DLL ! note Can only be used if
        the class TCameraParams was auto generated from a specific camera xml
        file void LoadDLL(void);

        ! Creates the object from a DLL whose name is deduced from vendor and
        model name void LoadDLL(GenICam::gcstring VendorName,
        GenICam::gcstring ModelName);

        ! Creates the object from a DLL with given file name void
        LoadDLL(GenICam::gcstring FileName); Creates the object from a XML
        file with given file name 
        """
        return _PySpin.NodeMap_LoadXMLFromFile(self, FileName)

    def LoadXMLFromZIPFile(self, ZipFileName):
        r"""
        LoadXMLFromZIPFile(self, ZipFileName)

        Parameters
        ----------
        ZipFileName: Spinnaker::GenICam::gcstring

        void
        Spinnaker::GenApi::NodeMap::LoadXMLFromZIPFile(GenICam::gcstring
        ZipFileName)

        Creates the object from a ZIP'd XML file with given file name 
        """
        return _PySpin.NodeMap_LoadXMLFromZIPFile(self, ZipFileName)

    def LoadXMLFromZIPData(self, zipData, zipSize):
        r"""
        LoadXMLFromZIPData(self, zipData, zipSize)

        Parameters
        ----------
        zipData: void const *
        zipSize: size_t

        void Spinnaker::GenApi::NodeMap::LoadXMLFromZIPData(const void
        *zipData, size_t zipSize)

        Creates the object from a ZIP'd XML file given in a string 
        """
        return _PySpin.NodeMap_LoadXMLFromZIPData(self, zipData, zipSize)

    def LoadXMLFromFileInject(self, TargetFileName, InjectFileName):
        r"""
        LoadXMLFromFileInject(self, TargetFileName, InjectFileName)

        Parameters
        ----------
        TargetFileName: Spinnaker::GenICam::gcstring
        InjectFileName: Spinnaker::GenICam::gcstring

        void
        Spinnaker::GenApi::NodeMap::LoadXMLFromFileInject(GenICam::gcstring
        TargetFileName, GenICam::gcstring InjectFileName)

        Creates the object from a XML target and an inject file with given
        file name 
        """
        return _PySpin.NodeMap_LoadXMLFromFileInject(self, TargetFileName, InjectFileName)

    def LoadXMLFromString(self, XMLData):
        r"""
        LoadXMLFromString(self, XMLData)

        Parameters
        ----------
        XMLData: Spinnaker::GenICam::gcstring const &

        void Spinnaker::GenApi::NodeMap::LoadXMLFromString(const
        GenICam::gcstring &XMLData)

        Creates the object from XML data given in a string 
        """
        return _PySpin.NodeMap_LoadXMLFromString(self, XMLData)

    def LoadXMLFromStringInject(self, TargetXMLDataconst, InjectXMLData):
        r"""
        LoadXMLFromStringInject(self, TargetXMLDataconst, InjectXMLData)

        Parameters
        ----------
        TargetXMLDataconst: Spinnaker::GenICam::gcstring const &
        InjectXMLData: Spinnaker::GenICam::gcstring const &

        void
        Spinnaker::GenApi::NodeMap::LoadXMLFromStringInject(const
        GenICam::gcstring &TargetXMLDataconst, const GenICam::gcstring
        &InjectXMLData)

        Creates the object from XML data given in a string with injection 
        """
        return _PySpin.NodeMap_LoadXMLFromStringInject(self, TargetXMLDataconst, InjectXMLData)

    def GetSupportedSchemaVersions(self):
        r"""
        GetSupportedSchemaVersions(self)
        virtual void 
        Spinnaker::GenApi::NodeMap::GetSupportedSchemaVersions(GenICam::gcstri
        ng_vector &SchemaVersions)

        ! Loads an XML, checks it for correctness, applies a style-sheet and
        outputs it void PreprocessXMLFromFile(const GenICam::gcstring&
        XMLFileName, const GenICam::gcstring& StyleSheetFileName, const
        GenICam::gcstring& OutputFileName, const uint32_t XMLValidation =
        xvDefault);

        ! Loads a Zipped XML, checks it for correctness, applies a style-sheet
        and outputs it void PreprocessXMLFromZIPFile(const GenICam::gcstring&
        ZIPFileName, const GenICam::gcstring& StyleSheetFileName, const
        GenICam::gcstring& OutputFileName, const uint32_t XMLValidation =
        xvDefault);

        ! Injects an XML file into a target file virtual void MergeXMLFiles(
        const GenICam::gcstring& TargetFileName, *< Name of the target XML
        file to process const GenICam::gcstring& InjectedFileName, *< Name of
        the Injected XML file to process const GenICam::gcstring&
        OutputFileName *< Name of the output file );

        ! Extract independent subtree virtual void ExtractIndependentSubtree(
        const GenICam::gcstring& XMLData, *< The XML data the subtree is
        extracted from. const GenICam::gcstring& InjectXMLData, *< Optional
        XML data that is injected before extracting the subtree. No effect if
        an empty string is passed. const GenICam::gcstring&
        SubTreeRootNodeName,*< The name of the node that represents the root
        of the subtree that shall be extracted. GenICam::gcstring&
        ExtractedSubtree *< The returned extracted subtree as string. ); Gets
        a list of supported schema versionsEach list entry is a string with
        the format "{Major}.{Minor}" were {Major} and {Minor} are integers
        Example: {"1.1", "1.2"} indicates that the schema v1.1 and v1.2
        are supported. The SubMinor version number is not given since it is
        for fully compatible bug fixes only 
        """
        return _PySpin.NodeMap_GetSupportedSchemaVersions(self)

    def GetDeviceName(self):
        r"""
        GetDeviceName(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::NodeMap::GetDeviceName()

        Get device name 
        """
        return _PySpin.NodeMap_GetDeviceName(self)

    def Poll(self, ElapsedTime):
        r"""
        Poll(self, ElapsedTime)

        Parameters
        ----------
        ElapsedTime: int64_t

        virtual void
        Spinnaker::GenApi::NodeMap::Poll(int64_t ElapsedTime)

        Fires nodes which have a polling time 
        """
        return _PySpin.NodeMap_Poll(self, ElapsedTime)

    @staticmethod
    def ClearXMLCache():
        r"""ClearXMLCache() -> bool"""
        return _PySpin.NodeMap_ClearXMLCache()

    def GetNodes(self):
        r"""
        GetNodes(self)
        virtual
        void Spinnaker::GenApi::NodeMap::GetNodes(NodeList_t &Nodes) const

        Retrieves all nodes in the node map 
        """
        return _PySpin.NodeMap_GetNodes(self)

    def GetNode(self, key):
        r"""
        GetNode(self, key) -> INode

        Parameters
        ----------
        key: Spinnaker::GenICam::gcstring const &

        virtual
        INode* Spinnaker::GenApi::NodeMap::GetNode(const GenICam::gcstring
        &key) const

        Retrieves the node from the central map by name 
        """
        return _PySpin.NodeMap_GetNode(self, key)

    def InvalidateNodes(self):
        r"""
        InvalidateNodes(self)
        virtual void Spinnaker::GenApi::NodeMap::InvalidateNodes() const

        Invalidates all nodes 
        """
        return _PySpin.NodeMap_InvalidateNodes(self)

    def Connect(self, *args):
        r"""
        Connect(self, pPort, PortName) -> bool

        Parameters
        ----------
        pPort: IPort *
        PortName: Spinnaker::GenICam::gcstring const &

        Connect(self, pPort) -> bool

        Parameters
        ----------
        pPort: IPort *

        virtual
        bool Spinnaker::GenApi::NodeMap::Connect(IPort *pPort) const

        Connects a port to the standard port "Device" 
        """
        return _PySpin.NodeMap_Connect(self, *args)

    def GetNumNodes(self):
        r"""
        GetNumNodes(self) -> uint64_t
        virtual uint64_t Spinnaker::GenApi::NodeMap::GetNumNodes() const

        Get the number of nodes in the map 
        """
        return _PySpin.NodeMap_GetNumNodes(self)
    _Ptr = property(_PySpin.NodeMap__Ptr_get, _PySpin.NodeMap__Ptr_set, doc=r"""_Ptr""")

    def GetNodeMapHandle(self):
        r"""
        GetNodeMapHandle(self) -> void *
        void* Spinnaker::GenApi::NodeMap::GetNodeMapHandle() const 
        """
        return _PySpin.NodeMap_GetNodeMapHandle(self)

    def GetModelName(self):
        r"""
        GetModelName(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::NodeMap::GetModelName()

        Get the model name 
        """
        return _PySpin.NodeMap_GetModelName(self)

    def GetVendorName(self):
        r"""
        GetVendorName(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::NodeMap::GetVendorName()

        Get the vendor name 
        """
        return _PySpin.NodeMap_GetVendorName(self)

    def GetToolTip(self):
        r"""
        GetToolTip(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::NodeMap::GetToolTip()

        Get tool tip 
        """
        return _PySpin.NodeMap_GetToolTip(self)

    def GetStandardNameSpace(self):
        r"""
        GetStandardNameSpace(self) -> gcstring
        virtual
        GenICam::gcstring Spinnaker::GenApi::NodeMap::GetStandardNameSpace()

        Get the standard name space 
        """
        return _PySpin.NodeMap_GetStandardNameSpace(self)

    def GetGenApiVersion(self, Version, Build):
        r"""
        GetGenApiVersion(self, Version, Build)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &
        Build: uint16_t &

        virtual void
        Spinnaker::GenApi::NodeMap::GetGenApiVersion(GenICam::Version_t
        &Version, uint16_t &Build)

        Get the version of the DLL's GenApi implementation 
        """
        return _PySpin.NodeMap_GetGenApiVersion(self, Version, Build)

    def GetSchemaVersion(self, Version):
        r"""
        GetSchemaVersion(self, Version)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &

        virtual void
        Spinnaker::GenApi::NodeMap::GetSchemaVersion(GenICam::Version_t
        &Version)

        Get the schema version number 
        """
        return _PySpin.NodeMap_GetSchemaVersion(self, Version)

    def GetDeviceVersion(self, Version):
        r"""
        GetDeviceVersion(self, Version)

        Parameters
        ----------
        Version: Spinnaker::GenICam::Version_t &

        virtual void
        Spinnaker::GenApi::NodeMap::GetDeviceVersion(GenICam::Version_t
        &Version)

        Get the version of the device description file 
        """
        return _PySpin.NodeMap_GetDeviceVersion(self, Version)

    def GetProductGuid(self):
        r"""
        GetProductGuid(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::NodeMap::GetProductGuid()

        Get the GUID describing the product 
        """
        return _PySpin.NodeMap_GetProductGuid(self)

    def GetVersionGuid(self):
        r"""
        GetVersionGuid(self) -> gcstring
        virtual GenICam::gcstring Spinnaker::GenApi::NodeMap::GetVersionGuid()

        Get the GUID describing the product version 
        """
        return _PySpin.NodeMap_GetVersionGuid(self)

# Register NodeMap in _PySpin:
_PySpin.NodeMap_swigregister(NodeMap)

def NodeMap_ClearXMLCache():
    r"""NodeMap_ClearXMLCache() -> bool"""
    return _PySpin.NodeMap_ClearXMLCache()

class IPersistScript(object):
    r"""Proxy of C++ Spinnaker::GenApi::IPersistScript class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInfo(self, Info):
        r"""
        SetInfo(self, Info)

        Parameters
        ----------
        Info: Spinnaker::GenICam::gcstring &

        """
        return _PySpin.IPersistScript_SetInfo(self, Info)

    def PersistFeature(self, item):
        r"""
        PersistFeature(self, item)

        Parameters
        ----------
        item: Spinnaker::GenApi::IValue &

        """
        return _PySpin.IPersistScript_PersistFeature(self, item)

# Register IPersistScript in _PySpin:
_PySpin.IPersistScript_swigregister(IPersistScript)

class CFeatureBag(IPersistScript):
    r"""


    Bag holding streamable features of a nodetree.

    C++ includes: Persistence.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> CFeatureBag
        Spinnaker::GenApi::CFeatureBag::CFeatureBag() 
        """
        _PySpin.CFeatureBag_swiginit(self, _PySpin.new_CFeatureBag())
    __swig_destroy__ = _PySpin.delete_CFeatureBag

    def SetInfo(self, Info):
        r"""
        SetInfo(self, Info)

        Parameters
        ----------
        Info: Spinnaker::GenICam::gcstring &

        virtual void Spinnaker::GenApi::CFeatureBag::SetInfo(GenICam::gcstring
        &Info)

        sets information about the node map 
        """
        return _PySpin.CFeatureBag_SetInfo(self, Info)

    def PersistFeature(self, item):
        r"""
        PersistFeature(self, item)

        Parameters
        ----------
        item: Spinnaker::GenApi::IValue &

        virtual void Spinnaker::GenApi::CFeatureBag::PersistFeature(IValue
        &item)

        Stores a feature 
        """
        return _PySpin.CFeatureBag_PersistFeature(self, item)

    def LoadFromBag(self, pNodeMap, Verify=True, pErrorList=None):
        r"""
        LoadFromBag(self, pNodeMap, Verify=True, pErrorList=None) -> bool

        Parameters
        ----------
        pNodeMap: Spinnaker::GenApi::INodeMap *
        Verify: bool
        pErrorList: Spinnaker::GenICam::gcstring_vector *

        bool Spinnaker::GenApi::CFeatureBag::LoadFromBag(INodeMap *pNodeMap,
        bool Verify=true, GenICam::gcstring_vector *pErrorList=NULL)

        Loads the features from the bag to the node tree

        Parameters:
        -----------

        pNodeMap:  The node map

        Verify:  If true, all streamable features are read back

        pErrorList:  If an error occurs during loading the error message is
        stored in the list and the loading continues

        For Verify=true the list of names in the feature bag is replayed
        again. If a node is a selector it's value is set to the value from the
        feature bag If not the value is read from the camera and compared with
        the value from the feature bag. 
        """
        return _PySpin.CFeatureBag_LoadFromBag(self, pNodeMap, Verify, pErrorList)

    def StoreToBag(self, pNodeMap, MaxNumPersistSkriptEntries=-1):
        r"""
        StoreToBag(self, pNodeMap, MaxNumPersistSkriptEntries=-1) -> int64_t

        Parameters
        ----------
        pNodeMap: Spinnaker::GenApi::INodeMap *
        MaxNumPersistSkriptEntries: int const

        int64_t Spinnaker::GenApi::CFeatureBag::StoreToBag(INodeMap *pNodeMap,
        const int MaxNumPersistSkriptEntries=-1)

        Stores the streamable nodes to this feature bag.

        Parameters:
        -----------

        pNodeMap:  The node map to persist

        MaxNumPersistSkriptEntries:  The max number of entries in the
        container; -1 means unlimited

        number of entries in the bag 
        """
        return _PySpin.CFeatureBag_StoreToBag(self, pNodeMap, MaxNumPersistSkriptEntries)

    def __eq__(self, FeatureBag):
        r"""
        __eq__(self, FeatureBag) -> bool

        Parameters
        ----------
        FeatureBag: Spinnaker::GenApi::CFeatureBag const &

        """
        return _PySpin.CFeatureBag___eq__(self, FeatureBag)

    def GetFeatureBagHandle(self):
        r"""
        GetFeatureBagHandle(self) -> void *
        void*
        Spinnaker::GenApi::CFeatureBag::GetFeatureBagHandle() 
        """
        return _PySpin.CFeatureBag_GetFeatureBagHandle(self)

# Register CFeatureBag in _PySpin:
_PySpin.CFeatureBag_swigregister(CFeatureBag)


def EatComments(_is):
    r"""
    EatComments(_is) -> std::istream &

    Parameters
    ----------
    is: std::istream &

    SPINNAKER_API
    std::istream& Spinnaker::GenApi::EatComments(std::istream &is)

    Helper function ignoring lines starting with comment character '#'. 
    """
    return _PySpin.EatComments(_is)

def __rshift__(_is, FeatureBag):
    r"""
    __rshift__(_is, FeatureBag) -> std::istream &

    Parameters
    ----------
    is: std::istream &
    FeatureBag: Spinnaker::GenApi::CFeatureBag &

    """
    return _PySpin.__rshift__(_is, FeatureBag)

def __lshift__(os, FeatureBag):
    r"""
    __lshift__(os, FeatureBag) -> std::ostream &

    Parameters
    ----------
    os: std::ostream &
    FeatureBag: Spinnaker::GenApi::CFeatureBag const &

    """
    return _PySpin.__lshift__(os, FeatureBag)
StreamType_GigEVision = _PySpin.StreamType_GigEVision

StreamType_CameraLink = _PySpin.StreamType_CameraLink

StreamType_CameraLinkHS = _PySpin.StreamType_CameraLinkHS

StreamType_CoaXPress = _PySpin.StreamType_CoaXPress

StreamType_USB3Vision = _PySpin.StreamType_USB3Vision

StreamType_Custom = _PySpin.StreamType_Custom

NUMSTREAMTYPE = _PySpin.NUMSTREAMTYPE

StreamMode_Socket = _PySpin.StreamMode_Socket

StreamMode_LWF = _PySpin.StreamMode_LWF

StreamMode_MVA = _PySpin.StreamMode_MVA

NUMSTREAMMODE = _PySpin.NUMSTREAMMODE

StreamBufferCountMode_Manual = _PySpin.StreamBufferCountMode_Manual

NUMSTREAMBUFFERCOUNTMODE = _PySpin.NUMSTREAMBUFFERCOUNTMODE

StreamBufferHandlingMode_OldestFirst = _PySpin.StreamBufferHandlingMode_OldestFirst

StreamBufferHandlingMode_OldestFirstOverwrite = _PySpin.StreamBufferHandlingMode_OldestFirstOverwrite

StreamBufferHandlingMode_NewestOnly = _PySpin.StreamBufferHandlingMode_NewestOnly

StreamBufferHandlingMode_NewestFirst = _PySpin.StreamBufferHandlingMode_NewestFirst

NUMSTREAMBUFFERHANDLINGMODE = _PySpin.NUMSTREAMBUFFERHANDLINGMODE

DeviceType_GigEVision = _PySpin.DeviceType_GigEVision

DeviceType_CameraLink = _PySpin.DeviceType_CameraLink

DeviceType_CameraLinkHS = _PySpin.DeviceType_CameraLinkHS

DeviceType_CoaXPress = _PySpin.DeviceType_CoaXPress

DeviceType_USB3Vision = _PySpin.DeviceType_USB3Vision

DeviceType_Custom = _PySpin.DeviceType_Custom

NUMDEVICETYPE = _PySpin.NUMDEVICETYPE

DeviceAccessStatus_Unknown = _PySpin.DeviceAccessStatus_Unknown

DeviceAccessStatus_ReadWrite = _PySpin.DeviceAccessStatus_ReadWrite

DeviceAccessStatus_ReadOnly = _PySpin.DeviceAccessStatus_ReadOnly

DeviceAccessStatus_NoAccess = _PySpin.DeviceAccessStatus_NoAccess

DeviceAccessStatus_Busy = _PySpin.DeviceAccessStatus_Busy

DeviceAccessStatus_OpenReadWrite = _PySpin.DeviceAccessStatus_OpenReadWrite

DeviceAccessStatus_OpenReadOnly = _PySpin.DeviceAccessStatus_OpenReadOnly

NUMDEVICEACCESSSTATUS = _PySpin.NUMDEVICEACCESSSTATUS

GenICamXMLLocation_Device = _PySpin.GenICamXMLLocation_Device

GenICamXMLLocation_Host = _PySpin.GenICamXMLLocation_Host

NUMGENICAMXMLLOCATION = _PySpin.NUMGENICAMXMLLOCATION

GUIXMLLocation_Device = _PySpin.GUIXMLLocation_Device

GUIXMLLocation_Host = _PySpin.GUIXMLLocation_Host

NUMGUIXMLLOCATION = _PySpin.NUMGUIXMLLOCATION

GevCCP_EnumEntry_GevCCP_OpenAccess = _PySpin.GevCCP_EnumEntry_GevCCP_OpenAccess

GevCCP_EnumEntry_GevCCP_ExclusiveAccess = _PySpin.GevCCP_EnumEntry_GevCCP_ExclusiveAccess

GevCCP_EnumEntry_GevCCP_ControlAccess = _PySpin.GevCCP_EnumEntry_GevCCP_ControlAccess

NUMGEVCCP = _PySpin.NUMGEVCCP

DeviceEndianessMechanism_Legacy = _PySpin.DeviceEndianessMechanism_Legacy

DeviceEndianessMechanism_Standard = _PySpin.DeviceEndianessMechanism_Standard

NUMDEVICEENDIANESSMECHANISM = _PySpin.NUMDEVICEENDIANESSMECHANISM

DeviceCurrentSpeed_UnknownSpeed = _PySpin.DeviceCurrentSpeed_UnknownSpeed

DeviceCurrentSpeed_LowSpeed = _PySpin.DeviceCurrentSpeed_LowSpeed

DeviceCurrentSpeed_FullSpeed = _PySpin.DeviceCurrentSpeed_FullSpeed

DeviceCurrentSpeed_HighSpeed = _PySpin.DeviceCurrentSpeed_HighSpeed

DeviceCurrentSpeed_SuperSpeed = _PySpin.DeviceCurrentSpeed_SuperSpeed

NUMDEVICECURRENTSPEED = _PySpin.NUMDEVICECURRENTSPEED

InterfaceType_GigEVision = _PySpin.InterfaceType_GigEVision

InterfaceType_CameraLink = _PySpin.InterfaceType_CameraLink

InterfaceType_CameraLinkHS = _PySpin.InterfaceType_CameraLinkHS

InterfaceType_CoaXPress = _PySpin.InterfaceType_CoaXPress

InterfaceType_USB3Vision = _PySpin.InterfaceType_USB3Vision

InterfaceType_Custom = _PySpin.InterfaceType_Custom

NUMINTERFACETYPE = _PySpin.NUMINTERFACETYPE

POEStatus_NotSupported = _PySpin.POEStatus_NotSupported

POEStatus_PowerOff = _PySpin.POEStatus_PowerOff

POEStatus_PowerOn = _PySpin.POEStatus_PowerOn

NUMPOESTATUS = _PySpin.NUMPOESTATUS

FilterDriverStatus_NotSupported = _PySpin.FilterDriverStatus_NotSupported

FilterDriverStatus_Disabled = _PySpin.FilterDriverStatus_Disabled

FilterDriverStatus_Enabled = _PySpin.FilterDriverStatus_Enabled

NUMFILTERDRIVERSTATUS = _PySpin.NUMFILTERDRIVERSTATUS

TLType_GigEVision = _PySpin.TLType_GigEVision

TLType_CameraLink = _PySpin.TLType_CameraLink

TLType_CameraLinkHS = _PySpin.TLType_CameraLinkHS

TLType_CoaXPress = _PySpin.TLType_CoaXPress

TLType_USB3Vision = _PySpin.TLType_USB3Vision

TLType_Mixed = _PySpin.TLType_Mixed

TLType_Custom = _PySpin.TLType_Custom

NUMTLTYPE = _PySpin.NUMTLTYPE

class IEnumerationT_TLTypeEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TLTypeEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TLTypeEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_TLTypeEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TLTypeEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TLTypeEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TLTypeEnum"""
        return _PySpin.IEnumerationT_TLTypeEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TLTypeEnum const

        """
        return _PySpin.IEnumerationT_TLTypeEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TLTypeEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TLTypeEnum in _PySpin:
_PySpin.IEnumerationT_TLTypeEnum_swigregister(IEnumerationT_TLTypeEnum)

class TransportLayerSystem(object):
    r"""


    Part of the QuickSpin API to provide access to system information.

    C++ includes: TransportLayerSystem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nodeMapTLDevice):
        r"""
        __init__(self, nodeMapTLDevice) -> TransportLayerSystem

        Parameters
        ----------
        nodeMapTLDevice: Spinnaker::GenApi::INodeMap *

        Spinnake
        r::TransportLayerSystem::TransportLayerSystem(GenApi::INodeMap
        *nodeMapTLDevice) 
        """
        _PySpin.TransportLayerSystem_swiginit(self, _PySpin.new_TransportLayerSystem(nodeMapTLDevice))
    __swig_destroy__ = _PySpin.delete_TransportLayerSystem
    TLID = property(_PySpin.TransportLayerSystem_TLID_get, _PySpin.TransportLayerSystem_TLID_set, doc=r"""TLID""")
    TLVendorName = property(_PySpin.TransportLayerSystem_TLVendorName_get, _PySpin.TransportLayerSystem_TLVendorName_set, doc=r"""TLVendorName""")
    TLModelName = property(_PySpin.TransportLayerSystem_TLModelName_get, _PySpin.TransportLayerSystem_TLModelName_set, doc=r"""TLModelName""")
    TLVersion = property(_PySpin.TransportLayerSystem_TLVersion_get, _PySpin.TransportLayerSystem_TLVersion_set, doc=r"""TLVersion""")
    TLFileName = property(_PySpin.TransportLayerSystem_TLFileName_get, _PySpin.TransportLayerSystem_TLFileName_set, doc=r"""TLFileName""")
    TLDisplayName = property(_PySpin.TransportLayerSystem_TLDisplayName_get, _PySpin.TransportLayerSystem_TLDisplayName_set, doc=r"""TLDisplayName""")
    TLPath = property(_PySpin.TransportLayerSystem_TLPath_get, _PySpin.TransportLayerSystem_TLPath_set, doc=r"""TLPath""")
    TLType = property(_PySpin.TransportLayerSystem_TLType_get, _PySpin.TransportLayerSystem_TLType_set, doc=r"""TLType""")
    GenTLVersionMajor = property(_PySpin.TransportLayerSystem_GenTLVersionMajor_get, _PySpin.TransportLayerSystem_GenTLVersionMajor_set, doc=r"""GenTLVersionMajor""")
    GenTLVersionMinor = property(_PySpin.TransportLayerSystem_GenTLVersionMinor_get, _PySpin.TransportLayerSystem_GenTLVersionMinor_set, doc=r"""GenTLVersionMinor""")
    GenTLSFNCVersionMajor = property(_PySpin.TransportLayerSystem_GenTLSFNCVersionMajor_get, _PySpin.TransportLayerSystem_GenTLSFNCVersionMajor_set, doc=r"""GenTLSFNCVersionMajor""")
    GenTLSFNCVersionMinor = property(_PySpin.TransportLayerSystem_GenTLSFNCVersionMinor_get, _PySpin.TransportLayerSystem_GenTLSFNCVersionMinor_set, doc=r"""GenTLSFNCVersionMinor""")
    GenTLSFNCVersionSubMinor = property(_PySpin.TransportLayerSystem_GenTLSFNCVersionSubMinor_get, _PySpin.TransportLayerSystem_GenTLSFNCVersionSubMinor_set, doc=r"""GenTLSFNCVersionSubMinor""")
    GevVersionMajor = property(_PySpin.TransportLayerSystem_GevVersionMajor_get, _PySpin.TransportLayerSystem_GevVersionMajor_set, doc=r"""GevVersionMajor""")
    GevVersionMinor = property(_PySpin.TransportLayerSystem_GevVersionMinor_get, _PySpin.TransportLayerSystem_GevVersionMinor_set, doc=r"""GevVersionMinor""")
    InterfaceUpdateList = property(_PySpin.TransportLayerSystem_InterfaceUpdateList_get, _PySpin.TransportLayerSystem_InterfaceUpdateList_set, doc=r"""InterfaceUpdateList""")
    InterfaceSelector = property(_PySpin.TransportLayerSystem_InterfaceSelector_get, _PySpin.TransportLayerSystem_InterfaceSelector_set, doc=r"""InterfaceSelector""")
    InterfaceID = property(_PySpin.TransportLayerSystem_InterfaceID_get, _PySpin.TransportLayerSystem_InterfaceID_set, doc=r"""InterfaceID""")
    InterfaceDisplayName = property(_PySpin.TransportLayerSystem_InterfaceDisplayName_get, _PySpin.TransportLayerSystem_InterfaceDisplayName_set, doc=r"""InterfaceDisplayName""")
    GevInterfaceMACAddress = property(_PySpin.TransportLayerSystem_GevInterfaceMACAddress_get, _PySpin.TransportLayerSystem_GevInterfaceMACAddress_set, doc=r"""GevInterfaceMACAddress""")
    GevInterfaceDefaultIPAddress = property(_PySpin.TransportLayerSystem_GevInterfaceDefaultIPAddress_get, _PySpin.TransportLayerSystem_GevInterfaceDefaultIPAddress_set, doc=r"""GevInterfaceDefaultIPAddress""")
    GevInterfaceDefaultSubnetMask = property(_PySpin.TransportLayerSystem_GevInterfaceDefaultSubnetMask_get, _PySpin.TransportLayerSystem_GevInterfaceDefaultSubnetMask_set, doc=r"""GevInterfaceDefaultSubnetMask""")
    GevInterfaceDefaultGateway = property(_PySpin.TransportLayerSystem_GevInterfaceDefaultGateway_get, _PySpin.TransportLayerSystem_GevInterfaceDefaultGateway_set, doc=r"""GevInterfaceDefaultGateway""")
    EnumerateGEVInterfaces = property(_PySpin.TransportLayerSystem_EnumerateGEVInterfaces_get, _PySpin.TransportLayerSystem_EnumerateGEVInterfaces_set, doc=r"""EnumerateGEVInterfaces""")
    EnumerateUSBInterfaces = property(_PySpin.TransportLayerSystem_EnumerateUSBInterfaces_get, _PySpin.TransportLayerSystem_EnumerateUSBInterfaces_set, doc=r"""EnumerateUSBInterfaces""")
    EnumerateGen2Cameras = property(_PySpin.TransportLayerSystem_EnumerateGen2Cameras_get, _PySpin.TransportLayerSystem_EnumerateGen2Cameras_set, doc=r"""EnumerateGen2Cameras""")

# Register TransportLayerSystem in _PySpin:
_PySpin.TransportLayerSystem_swigregister(TransportLayerSystem)

class IEnumerationT_InterfaceTypeEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< InterfaceTypeEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::InterfaceTypeEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_InterfaceTypeEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::InterfaceTypeEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_InterfaceTypeEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::InterfaceTypeEnum"""
        return _PySpin.IEnumerationT_InterfaceTypeEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::InterfaceTypeEnum const

        """
        return _PySpin.IEnumerationT_InterfaceTypeEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_InterfaceTypeEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_InterfaceTypeEnum in _PySpin:
_PySpin.IEnumerationT_InterfaceTypeEnum_swigregister(IEnumerationT_InterfaceTypeEnum)

class IEnumerationT_POEStatusEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< POEStatusEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::POEStatusEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_POEStatusEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::POEStatusEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_POEStatusEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::POEStatusEnum"""
        return _PySpin.IEnumerationT_POEStatusEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::POEStatusEnum const

        """
        return _PySpin.IEnumerationT_POEStatusEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_POEStatusEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_POEStatusEnum in _PySpin:
_PySpin.IEnumerationT_POEStatusEnum_swigregister(IEnumerationT_POEStatusEnum)

class IEnumerationT_FilterDriverStatusEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< FilterDriverStatusEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::FilterDriverStatusEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_FilterDriverStatusEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::FilterDriverStatusEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FilterDriverStatusEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::FilterDriverStatusEnum"""
        return _PySpin.IEnumerationT_FilterDriverStatusEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::FilterDriverStatusEnum const

        """
        return _PySpin.IEnumerationT_FilterDriverStatusEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FilterDriverStatusEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_FilterDriverStatusEnum in _PySpin:
_PySpin.IEnumerationT_FilterDriverStatusEnum_swigregister(IEnumerationT_FilterDriverStatusEnum)

class IEnumerationT_DeviceAccessStatusEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceAccessStatusEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceAccessStatusEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceAccessStatusEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceAccessStatusEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceAccessStatusEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceAccessStatusEnum"""
        return _PySpin.IEnumerationT_DeviceAccessStatusEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceAccessStatusEnum const

        """
        return _PySpin.IEnumerationT_DeviceAccessStatusEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceAccessStatusEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceAccessStatusEnum in _PySpin:
_PySpin.IEnumerationT_DeviceAccessStatusEnum_swigregister(IEnumerationT_DeviceAccessStatusEnum)

class TransportLayerInterface(object):
    r"""


    Part of the QuickSpin API to provide access to camera information
    without having to first initialize the camera.

    C++ includes: TransportLayerInterface.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nodeMapTLDevice):
        r"""
        __init__(self, nodeMapTLDevice) -> TransportLayerInterface

        Parameters
        ----------
        nodeMapTLDevice: Spinnaker::GenApi::INodeMap *

        Spinnake
        r::TransportLayerInterface::TransportLayerInterface(GenApi::INodeMap
        *nodeMapTLDevice) 
        """
        _PySpin.TransportLayerInterface_swiginit(self, _PySpin.new_TransportLayerInterface(nodeMapTLDevice))
    __swig_destroy__ = _PySpin.delete_TransportLayerInterface
    InterfaceID = property(_PySpin.TransportLayerInterface_InterfaceID_get, _PySpin.TransportLayerInterface_InterfaceID_set, doc=r"""InterfaceID""")
    InterfaceDisplayName = property(_PySpin.TransportLayerInterface_InterfaceDisplayName_get, _PySpin.TransportLayerInterface_InterfaceDisplayName_set, doc=r"""InterfaceDisplayName""")
    InterfaceType = property(_PySpin.TransportLayerInterface_InterfaceType_get, _PySpin.TransportLayerInterface_InterfaceType_set, doc=r"""InterfaceType""")
    GevInterfaceGatewaySelector = property(_PySpin.TransportLayerInterface_GevInterfaceGatewaySelector_get, _PySpin.TransportLayerInterface_GevInterfaceGatewaySelector_set, doc=r"""GevInterfaceGatewaySelector""")
    GevInterfaceGateway = property(_PySpin.TransportLayerInterface_GevInterfaceGateway_get, _PySpin.TransportLayerInterface_GevInterfaceGateway_set, doc=r"""GevInterfaceGateway""")
    GevInterfaceMACAddress = property(_PySpin.TransportLayerInterface_GevInterfaceMACAddress_get, _PySpin.TransportLayerInterface_GevInterfaceMACAddress_set, doc=r"""GevInterfaceMACAddress""")
    GevInterfaceSubnetSelector = property(_PySpin.TransportLayerInterface_GevInterfaceSubnetSelector_get, _PySpin.TransportLayerInterface_GevInterfaceSubnetSelector_set, doc=r"""GevInterfaceSubnetSelector""")
    GevInterfaceSubnetIPAddress = property(_PySpin.TransportLayerInterface_GevInterfaceSubnetIPAddress_get, _PySpin.TransportLayerInterface_GevInterfaceSubnetIPAddress_set, doc=r"""GevInterfaceSubnetIPAddress""")
    GevInterfaceSubnetMask = property(_PySpin.TransportLayerInterface_GevInterfaceSubnetMask_get, _PySpin.TransportLayerInterface_GevInterfaceSubnetMask_set, doc=r"""GevInterfaceSubnetMask""")
    GevInterfaceTransmitLinkSpeed = property(_PySpin.TransportLayerInterface_GevInterfaceTransmitLinkSpeed_get, _PySpin.TransportLayerInterface_GevInterfaceTransmitLinkSpeed_set, doc=r"""GevInterfaceTransmitLinkSpeed""")
    GevInterfaceReceiveLinkSpeed = property(_PySpin.TransportLayerInterface_GevInterfaceReceiveLinkSpeed_get, _PySpin.TransportLayerInterface_GevInterfaceReceiveLinkSpeed_set, doc=r"""GevInterfaceReceiveLinkSpeed""")
    GevInterfaceMTU = property(_PySpin.TransportLayerInterface_GevInterfaceMTU_get, _PySpin.TransportLayerInterface_GevInterfaceMTU_set, doc=r"""GevInterfaceMTU""")
    POEStatus = property(_PySpin.TransportLayerInterface_POEStatus_get, _PySpin.TransportLayerInterface_POEStatus_set, doc=r"""POEStatus""")
    FilterDriverStatus = property(_PySpin.TransportLayerInterface_FilterDriverStatus_get, _PySpin.TransportLayerInterface_FilterDriverStatus_set, doc=r"""FilterDriverStatus""")
    GevActionDeviceKey = property(_PySpin.TransportLayerInterface_GevActionDeviceKey_get, _PySpin.TransportLayerInterface_GevActionDeviceKey_set, doc=r"""GevActionDeviceKey""")
    GevActionGroupKey = property(_PySpin.TransportLayerInterface_GevActionGroupKey_get, _PySpin.TransportLayerInterface_GevActionGroupKey_set, doc=r"""GevActionGroupKey""")
    GevActionGroupMask = property(_PySpin.TransportLayerInterface_GevActionGroupMask_get, _PySpin.TransportLayerInterface_GevActionGroupMask_set, doc=r"""GevActionGroupMask""")
    GevActionTime = property(_PySpin.TransportLayerInterface_GevActionTime_get, _PySpin.TransportLayerInterface_GevActionTime_set, doc=r"""GevActionTime""")
    ActionCommand = property(_PySpin.TransportLayerInterface_ActionCommand_get, _PySpin.TransportLayerInterface_ActionCommand_set, doc=r"""ActionCommand""")
    DeviceUnlock = property(_PySpin.TransportLayerInterface_DeviceUnlock_get, _PySpin.TransportLayerInterface_DeviceUnlock_set, doc=r"""DeviceUnlock""")
    DeviceUpdateList = property(_PySpin.TransportLayerInterface_DeviceUpdateList_get, _PySpin.TransportLayerInterface_DeviceUpdateList_set, doc=r"""DeviceUpdateList""")
    DeviceCount = property(_PySpin.TransportLayerInterface_DeviceCount_get, _PySpin.TransportLayerInterface_DeviceCount_set, doc=r"""DeviceCount""")
    DeviceSelector = property(_PySpin.TransportLayerInterface_DeviceSelector_get, _PySpin.TransportLayerInterface_DeviceSelector_set, doc=r"""DeviceSelector""")
    DeviceID = property(_PySpin.TransportLayerInterface_DeviceID_get, _PySpin.TransportLayerInterface_DeviceID_set, doc=r"""DeviceID""")
    DeviceVendorName = property(_PySpin.TransportLayerInterface_DeviceVendorName_get, _PySpin.TransportLayerInterface_DeviceVendorName_set, doc=r"""DeviceVendorName""")
    DeviceModelName = property(_PySpin.TransportLayerInterface_DeviceModelName_get, _PySpin.TransportLayerInterface_DeviceModelName_set, doc=r"""DeviceModelName""")
    DeviceSerialNumber = property(_PySpin.TransportLayerInterface_DeviceSerialNumber_get, _PySpin.TransportLayerInterface_DeviceSerialNumber_set, doc=r"""DeviceSerialNumber""")
    DeviceAccessStatus = property(_PySpin.TransportLayerInterface_DeviceAccessStatus_get, _PySpin.TransportLayerInterface_DeviceAccessStatus_set, doc=r"""DeviceAccessStatus""")
    GevDeviceIPAddress = property(_PySpin.TransportLayerInterface_GevDeviceIPAddress_get, _PySpin.TransportLayerInterface_GevDeviceIPAddress_set, doc=r"""GevDeviceIPAddress""")
    GevDeviceSubnetMask = property(_PySpin.TransportLayerInterface_GevDeviceSubnetMask_get, _PySpin.TransportLayerInterface_GevDeviceSubnetMask_set, doc=r"""GevDeviceSubnetMask""")
    GevDeviceGateway = property(_PySpin.TransportLayerInterface_GevDeviceGateway_get, _PySpin.TransportLayerInterface_GevDeviceGateway_set, doc=r"""GevDeviceGateway""")
    GevDeviceMACAddress = property(_PySpin.TransportLayerInterface_GevDeviceMACAddress_get, _PySpin.TransportLayerInterface_GevDeviceMACAddress_set, doc=r"""GevDeviceMACAddress""")
    IncompatibleDeviceCount = property(_PySpin.TransportLayerInterface_IncompatibleDeviceCount_get, _PySpin.TransportLayerInterface_IncompatibleDeviceCount_set, doc=r"""IncompatibleDeviceCount""")
    IncompatibleDeviceSelector = property(_PySpin.TransportLayerInterface_IncompatibleDeviceSelector_get, _PySpin.TransportLayerInterface_IncompatibleDeviceSelector_set, doc=r"""IncompatibleDeviceSelector""")
    IncompatibleDeviceID = property(_PySpin.TransportLayerInterface_IncompatibleDeviceID_get, _PySpin.TransportLayerInterface_IncompatibleDeviceID_set, doc=r"""IncompatibleDeviceID""")
    IncompatibleDeviceVendorName = property(_PySpin.TransportLayerInterface_IncompatibleDeviceVendorName_get, _PySpin.TransportLayerInterface_IncompatibleDeviceVendorName_set, doc=r"""IncompatibleDeviceVendorName""")
    IncompatibleDeviceModelName = property(_PySpin.TransportLayerInterface_IncompatibleDeviceModelName_get, _PySpin.TransportLayerInterface_IncompatibleDeviceModelName_set, doc=r"""IncompatibleDeviceModelName""")
    IncompatibleGevDeviceIPAddress = property(_PySpin.TransportLayerInterface_IncompatibleGevDeviceIPAddress_get, _PySpin.TransportLayerInterface_IncompatibleGevDeviceIPAddress_set, doc=r"""IncompatibleGevDeviceIPAddress""")
    IncompatibleGevDeviceSubnetMask = property(_PySpin.TransportLayerInterface_IncompatibleGevDeviceSubnetMask_get, _PySpin.TransportLayerInterface_IncompatibleGevDeviceSubnetMask_set, doc=r"""IncompatibleGevDeviceSubnetMask""")
    IncompatibleGevDeviceMACAddress = property(_PySpin.TransportLayerInterface_IncompatibleGevDeviceMACAddress_get, _PySpin.TransportLayerInterface_IncompatibleGevDeviceMACAddress_set, doc=r"""IncompatibleGevDeviceMACAddress""")
    GevDeviceForceIP = property(_PySpin.TransportLayerInterface_GevDeviceForceIP_get, _PySpin.TransportLayerInterface_GevDeviceForceIP_set, doc=r"""GevDeviceForceIP""")
    GevDeviceForceIPAddress = property(_PySpin.TransportLayerInterface_GevDeviceForceIPAddress_get, _PySpin.TransportLayerInterface_GevDeviceForceIPAddress_set, doc=r"""GevDeviceForceIPAddress""")
    GevDeviceForceSubnetMask = property(_PySpin.TransportLayerInterface_GevDeviceForceSubnetMask_get, _PySpin.TransportLayerInterface_GevDeviceForceSubnetMask_set, doc=r"""GevDeviceForceSubnetMask""")
    GevDeviceForceGateway = property(_PySpin.TransportLayerInterface_GevDeviceForceGateway_get, _PySpin.TransportLayerInterface_GevDeviceForceGateway_set, doc=r"""GevDeviceForceGateway""")
    GevDeviceAutoForceIP = property(_PySpin.TransportLayerInterface_GevDeviceAutoForceIP_get, _PySpin.TransportLayerInterface_GevDeviceAutoForceIP_set, doc=r"""GevDeviceAutoForceIP""")
    HostAdapterName = property(_PySpin.TransportLayerInterface_HostAdapterName_get, _PySpin.TransportLayerInterface_HostAdapterName_set, doc=r"""HostAdapterName""")
    HostAdapterVendor = property(_PySpin.TransportLayerInterface_HostAdapterVendor_get, _PySpin.TransportLayerInterface_HostAdapterVendor_set, doc=r"""HostAdapterVendor""")
    HostAdapterDriverVersion = property(_PySpin.TransportLayerInterface_HostAdapterDriverVersion_get, _PySpin.TransportLayerInterface_HostAdapterDriverVersion_set, doc=r"""HostAdapterDriverVersion""")

# Register TransportLayerInterface in _PySpin:
_PySpin.TransportLayerInterface_swigregister(TransportLayerInterface)

class IEnumerationT_StreamTypeEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< StreamTypeEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::StreamTypeEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_StreamTypeEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::StreamTypeEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamTypeEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::StreamTypeEnum"""
        return _PySpin.IEnumerationT_StreamTypeEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::StreamTypeEnum const

        """
        return _PySpin.IEnumerationT_StreamTypeEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamTypeEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_StreamTypeEnum in _PySpin:
_PySpin.IEnumerationT_StreamTypeEnum_swigregister(IEnumerationT_StreamTypeEnum)

class IEnumerationT_StreamModeEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< StreamModeEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::StreamModeEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_StreamModeEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::StreamModeEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamModeEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::StreamModeEnum"""
        return _PySpin.IEnumerationT_StreamModeEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::StreamModeEnum const

        """
        return _PySpin.IEnumerationT_StreamModeEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamModeEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_StreamModeEnum in _PySpin:
_PySpin.IEnumerationT_StreamModeEnum_swigregister(IEnumerationT_StreamModeEnum)

class IEnumerationT_StreamBufferCountModeEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< StreamBufferCountModeEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::StreamBufferCountModeEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_StreamBufferCountModeEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::StreamBufferCountModeEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamBufferCountModeEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::StreamBufferCountModeEnum"""
        return _PySpin.IEnumerationT_StreamBufferCountModeEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::StreamBufferCountModeEnum const

        """
        return _PySpin.IEnumerationT_StreamBufferCountModeEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamBufferCountModeEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_StreamBufferCountModeEnum in _PySpin:
_PySpin.IEnumerationT_StreamBufferCountModeEnum_swigregister(IEnumerationT_StreamBufferCountModeEnum)

class IEnumerationT_StreamBufferHandlingModeEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< StreamBufferHandlingModeEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::StreamBufferHandlingModeEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_StreamBufferHandlingModeEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::StreamBufferHandlingModeEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamBufferHandlingModeEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::StreamBufferHandlingModeEnum"""
        return _PySpin.IEnumerationT_StreamBufferHandlingModeEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::StreamBufferHandlingModeEnum const

        """
        return _PySpin.IEnumerationT_StreamBufferHandlingModeEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_StreamBufferHandlingModeEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_StreamBufferHandlingModeEnum in _PySpin:
_PySpin.IEnumerationT_StreamBufferHandlingModeEnum_swigregister(IEnumerationT_StreamBufferHandlingModeEnum)

class TransportLayerStream(object):
    r"""


    Part of the QuickSpin API to provide access to camera information
    without having to first initialize the camera.

    C++ includes: TransportLayerStream.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nodeMapTLDevice):
        r"""
        __init__(self, nodeMapTLDevice) -> TransportLayerStream

        Parameters
        ----------
        nodeMapTLDevice: Spinnaker::GenApi::INodeMap *

        Spinnaker::TransportLayerStream::TransportLayerStream(GenApi::INodeMap
        *nodeMapTLDevice) 
        """
        _PySpin.TransportLayerStream_swiginit(self, _PySpin.new_TransportLayerStream(nodeMapTLDevice))
    __swig_destroy__ = _PySpin.delete_TransportLayerStream
    StreamID = property(_PySpin.TransportLayerStream_StreamID_get, _PySpin.TransportLayerStream_StreamID_set, doc=r"""StreamID""")
    StreamType = property(_PySpin.TransportLayerStream_StreamType_get, _PySpin.TransportLayerStream_StreamType_set, doc=r"""StreamType""")
    StreamMode = property(_PySpin.TransportLayerStream_StreamMode_get, _PySpin.TransportLayerStream_StreamMode_set, doc=r"""StreamMode""")
    StreamBufferCountManual = property(_PySpin.TransportLayerStream_StreamBufferCountManual_get, _PySpin.TransportLayerStream_StreamBufferCountManual_set, doc=r"""StreamBufferCountManual""")
    StreamBufferCountResult = property(_PySpin.TransportLayerStream_StreamBufferCountResult_get, _PySpin.TransportLayerStream_StreamBufferCountResult_set, doc=r"""StreamBufferCountResult""")
    StreamBufferCountMax = property(_PySpin.TransportLayerStream_StreamBufferCountMax_get, _PySpin.TransportLayerStream_StreamBufferCountMax_set, doc=r"""StreamBufferCountMax""")
    StreamBufferCountMode = property(_PySpin.TransportLayerStream_StreamBufferCountMode_get, _PySpin.TransportLayerStream_StreamBufferCountMode_set, doc=r"""StreamBufferCountMode""")
    StreamBufferHandlingMode = property(_PySpin.TransportLayerStream_StreamBufferHandlingMode_get, _PySpin.TransportLayerStream_StreamBufferHandlingMode_set, doc=r"""StreamBufferHandlingMode""")
    StreamAnnounceBufferMinimum = property(_PySpin.TransportLayerStream_StreamAnnounceBufferMinimum_get, _PySpin.TransportLayerStream_StreamAnnounceBufferMinimum_set, doc=r"""StreamAnnounceBufferMinimum""")
    StreamAnnouncedBufferCount = property(_PySpin.TransportLayerStream_StreamAnnouncedBufferCount_get, _PySpin.TransportLayerStream_StreamAnnouncedBufferCount_set, doc=r"""StreamAnnouncedBufferCount""")
    StreamStartedFrameCount = property(_PySpin.TransportLayerStream_StreamStartedFrameCount_get, _PySpin.TransportLayerStream_StreamStartedFrameCount_set, doc=r"""StreamStartedFrameCount""")
    StreamDeliveredFrameCount = property(_PySpin.TransportLayerStream_StreamDeliveredFrameCount_get, _PySpin.TransportLayerStream_StreamDeliveredFrameCount_set, doc=r"""StreamDeliveredFrameCount""")
    StreamReceivedFrameCount = property(_PySpin.TransportLayerStream_StreamReceivedFrameCount_get, _PySpin.TransportLayerStream_StreamReceivedFrameCount_set, doc=r"""StreamReceivedFrameCount""")
    StreamIncompleteFrameCount = property(_PySpin.TransportLayerStream_StreamIncompleteFrameCount_get, _PySpin.TransportLayerStream_StreamIncompleteFrameCount_set, doc=r"""StreamIncompleteFrameCount""")
    StreamLostFrameCount = property(_PySpin.TransportLayerStream_StreamLostFrameCount_get, _PySpin.TransportLayerStream_StreamLostFrameCount_set, doc=r"""StreamLostFrameCount""")
    StreamDroppedFrameCount = property(_PySpin.TransportLayerStream_StreamDroppedFrameCount_get, _PySpin.TransportLayerStream_StreamDroppedFrameCount_set, doc=r"""StreamDroppedFrameCount""")
    StreamInputBufferCount = property(_PySpin.TransportLayerStream_StreamInputBufferCount_get, _PySpin.TransportLayerStream_StreamInputBufferCount_set, doc=r"""StreamInputBufferCount""")
    StreamOutputBufferCount = property(_PySpin.TransportLayerStream_StreamOutputBufferCount_get, _PySpin.TransportLayerStream_StreamOutputBufferCount_set, doc=r"""StreamOutputBufferCount""")
    StreamIsGrabbing = property(_PySpin.TransportLayerStream_StreamIsGrabbing_get, _PySpin.TransportLayerStream_StreamIsGrabbing_set, doc=r"""StreamIsGrabbing""")
    StreamChunkCountMaximum = property(_PySpin.TransportLayerStream_StreamChunkCountMaximum_get, _PySpin.TransportLayerStream_StreamChunkCountMaximum_set, doc=r"""StreamChunkCountMaximum""")
    StreamBufferAlignment = property(_PySpin.TransportLayerStream_StreamBufferAlignment_get, _PySpin.TransportLayerStream_StreamBufferAlignment_set, doc=r"""StreamBufferAlignment""")
    StreamCRCCheckEnable = property(_PySpin.TransportLayerStream_StreamCRCCheckEnable_get, _PySpin.TransportLayerStream_StreamCRCCheckEnable_set, doc=r"""StreamCRCCheckEnable""")
    StreamReceivedPacketCount = property(_PySpin.TransportLayerStream_StreamReceivedPacketCount_get, _PySpin.TransportLayerStream_StreamReceivedPacketCount_set, doc=r"""StreamReceivedPacketCount""")
    StreamMissedPacketCount = property(_PySpin.TransportLayerStream_StreamMissedPacketCount_get, _PySpin.TransportLayerStream_StreamMissedPacketCount_set, doc=r"""StreamMissedPacketCount""")
    StreamPacketResendEnable = property(_PySpin.TransportLayerStream_StreamPacketResendEnable_get, _PySpin.TransportLayerStream_StreamPacketResendEnable_set, doc=r"""StreamPacketResendEnable""")
    StreamPacketResendTimeout = property(_PySpin.TransportLayerStream_StreamPacketResendTimeout_get, _PySpin.TransportLayerStream_StreamPacketResendTimeout_set, doc=r"""StreamPacketResendTimeout""")
    StreamPacketResendMaxRequests = property(_PySpin.TransportLayerStream_StreamPacketResendMaxRequests_get, _PySpin.TransportLayerStream_StreamPacketResendMaxRequests_set, doc=r"""StreamPacketResendMaxRequests""")
    StreamPacketResendRequestCount = property(_PySpin.TransportLayerStream_StreamPacketResendRequestCount_get, _PySpin.TransportLayerStream_StreamPacketResendRequestCount_set, doc=r"""StreamPacketResendRequestCount""")
    StreamPacketResendRequestSuccessCount = property(_PySpin.TransportLayerStream_StreamPacketResendRequestSuccessCount_get, _PySpin.TransportLayerStream_StreamPacketResendRequestSuccessCount_set, doc=r"""StreamPacketResendRequestSuccessCount""")
    StreamPacketResendRequestedPacketCount = property(_PySpin.TransportLayerStream_StreamPacketResendRequestedPacketCount_get, _PySpin.TransportLayerStream_StreamPacketResendRequestedPacketCount_set, doc=r"""StreamPacketResendRequestedPacketCount""")
    StreamPacketResendReceivedPacketCount = property(_PySpin.TransportLayerStream_StreamPacketResendReceivedPacketCount_get, _PySpin.TransportLayerStream_StreamPacketResendReceivedPacketCount_set, doc=r"""StreamPacketResendReceivedPacketCount""")
    StreamBlockTransferSize = property(_PySpin.TransportLayerStream_StreamBlockTransferSize_get, _PySpin.TransportLayerStream_StreamBlockTransferSize_set, doc=r"""StreamBlockTransferSize""")

# Register TransportLayerStream in _PySpin:
_PySpin.TransportLayerStream_swigregister(TransportLayerStream)

class IEnumerationT_DeviceTypeEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceTypeEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTypeEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceTypeEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceTypeEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTypeEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceTypeEnum"""
        return _PySpin.IEnumerationT_DeviceTypeEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTypeEnum const

        """
        return _PySpin.IEnumerationT_DeviceTypeEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTypeEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceTypeEnum in _PySpin:
_PySpin.IEnumerationT_DeviceTypeEnum_swigregister(IEnumerationT_DeviceTypeEnum)

class IEnumerationT_GenICamXMLLocationEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GenICamXMLLocationEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GenICamXMLLocationEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_GenICamXMLLocationEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GenICamXMLLocationEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GenICamXMLLocationEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GenICamXMLLocationEnum"""
        return _PySpin.IEnumerationT_GenICamXMLLocationEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GenICamXMLLocationEnum const

        """
        return _PySpin.IEnumerationT_GenICamXMLLocationEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GenICamXMLLocationEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GenICamXMLLocationEnum in _PySpin:
_PySpin.IEnumerationT_GenICamXMLLocationEnum_swigregister(IEnumerationT_GenICamXMLLocationEnum)

class IEnumerationT_GUIXMLLocationEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GUIXMLLocationEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GUIXMLLocationEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_GUIXMLLocationEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GUIXMLLocationEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GUIXMLLocationEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GUIXMLLocationEnum"""
        return _PySpin.IEnumerationT_GUIXMLLocationEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GUIXMLLocationEnum const

        """
        return _PySpin.IEnumerationT_GUIXMLLocationEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GUIXMLLocationEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GUIXMLLocationEnum in _PySpin:
_PySpin.IEnumerationT_GUIXMLLocationEnum_swigregister(IEnumerationT_GUIXMLLocationEnum)

class IEnumerationT_GevCCPEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevCCPEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevCCPEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevCCPEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevCCPEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevCCPEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevCCPEnum"""
        return _PySpin.IEnumerationT_GevCCPEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevCCPEnum const

        """
        return _PySpin.IEnumerationT_GevCCPEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevCCPEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevCCPEnum in _PySpin:
_PySpin.IEnumerationT_GevCCPEnum_swigregister(IEnumerationT_GevCCPEnum)

class IEnumerationT_DeviceEndianessMechanismEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceEndianessMechanismEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceEndianessMechanismEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceEndianessMechanismEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceEndianessMechanismEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceEndianessMechanismEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceEndianessMechanismEnum"""
        return _PySpin.IEnumerationT_DeviceEndianessMechanismEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceEndianessMechanismEnum const

        """
        return _PySpin.IEnumerationT_DeviceEndianessMechanismEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceEndianessMechanismEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceEndianessMechanismEnum in _PySpin:
_PySpin.IEnumerationT_DeviceEndianessMechanismEnum_swigregister(IEnumerationT_DeviceEndianessMechanismEnum)

class IEnumerationT_DeviceCurrentSpeedEnum(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceCurrentSpeedEnum > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceCurrentSpeedEnum
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceCurrentSpeedEnum_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceCurrentSpeedEnum

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceCurrentSpeedEnum_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceCurrentSpeedEnum"""
        return _PySpin.IEnumerationT_DeviceCurrentSpeedEnum___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceCurrentSpeedEnum const

        """
        return _PySpin.IEnumerationT_DeviceCurrentSpeedEnum_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceCurrentSpeedEnum_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceCurrentSpeedEnum in _PySpin:
_PySpin.IEnumerationT_DeviceCurrentSpeedEnum_swigregister(IEnumerationT_DeviceCurrentSpeedEnum)

class TransportLayerDevice(object):
    r"""


    Part of the QuickSpin API to provide access to camera information
    without having to first initialize the camera.

    C++ includes: TransportLayerDevice.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nodeMapTLDevice):
        r"""
        __init__(self, nodeMapTLDevice) -> TransportLayerDevice

        Parameters
        ----------
        nodeMapTLDevice: Spinnaker::GenApi::INodeMap *

        Spinnaker::TransportLayerDevice::TransportLayerDevice(GenApi::INodeMap
        *nodeMapTLDevice) 
        """
        _PySpin.TransportLayerDevice_swiginit(self, _PySpin.new_TransportLayerDevice(nodeMapTLDevice))
    __swig_destroy__ = _PySpin.delete_TransportLayerDevice
    DeviceID = property(_PySpin.TransportLayerDevice_DeviceID_get, _PySpin.TransportLayerDevice_DeviceID_set, doc=r"""DeviceID""")
    DeviceSerialNumber = property(_PySpin.TransportLayerDevice_DeviceSerialNumber_get, _PySpin.TransportLayerDevice_DeviceSerialNumber_set, doc=r"""DeviceSerialNumber""")
    DeviceUserID = property(_PySpin.TransportLayerDevice_DeviceUserID_get, _PySpin.TransportLayerDevice_DeviceUserID_set, doc=r"""DeviceUserID""")
    DeviceVendorName = property(_PySpin.TransportLayerDevice_DeviceVendorName_get, _PySpin.TransportLayerDevice_DeviceVendorName_set, doc=r"""DeviceVendorName""")
    DeviceModelName = property(_PySpin.TransportLayerDevice_DeviceModelName_get, _PySpin.TransportLayerDevice_DeviceModelName_set, doc=r"""DeviceModelName""")
    DeviceVersion = property(_PySpin.TransportLayerDevice_DeviceVersion_get, _PySpin.TransportLayerDevice_DeviceVersion_set, doc=r"""DeviceVersion""")
    DeviceBootloaderVersion = property(_PySpin.TransportLayerDevice_DeviceBootloaderVersion_get, _PySpin.TransportLayerDevice_DeviceBootloaderVersion_set, doc=r"""DeviceBootloaderVersion""")
    DeviceType = property(_PySpin.TransportLayerDevice_DeviceType_get, _PySpin.TransportLayerDevice_DeviceType_set, doc=r"""DeviceType""")
    DeviceDisplayName = property(_PySpin.TransportLayerDevice_DeviceDisplayName_get, _PySpin.TransportLayerDevice_DeviceDisplayName_set, doc=r"""DeviceDisplayName""")
    DeviceAccessStatus = property(_PySpin.TransportLayerDevice_DeviceAccessStatus_get, _PySpin.TransportLayerDevice_DeviceAccessStatus_set, doc=r"""DeviceAccessStatus""")
    DeviceLinkSpeed = property(_PySpin.TransportLayerDevice_DeviceLinkSpeed_get, _PySpin.TransportLayerDevice_DeviceLinkSpeed_set, doc=r"""DeviceLinkSpeed""")
    DeviceDriverVersion = property(_PySpin.TransportLayerDevice_DeviceDriverVersion_get, _PySpin.TransportLayerDevice_DeviceDriverVersion_set, doc=r"""DeviceDriverVersion""")
    DeviceIsUpdater = property(_PySpin.TransportLayerDevice_DeviceIsUpdater_get, _PySpin.TransportLayerDevice_DeviceIsUpdater_set, doc=r"""DeviceIsUpdater""")
    GenICamXMLLocation = property(_PySpin.TransportLayerDevice_GenICamXMLLocation_get, _PySpin.TransportLayerDevice_GenICamXMLLocation_set, doc=r"""GenICamXMLLocation""")
    GenICamXMLPath = property(_PySpin.TransportLayerDevice_GenICamXMLPath_get, _PySpin.TransportLayerDevice_GenICamXMLPath_set, doc=r"""GenICamXMLPath""")
    GUIXMLLocation = property(_PySpin.TransportLayerDevice_GUIXMLLocation_get, _PySpin.TransportLayerDevice_GUIXMLLocation_set, doc=r"""GUIXMLLocation""")
    GUIXMLPath = property(_PySpin.TransportLayerDevice_GUIXMLPath_get, _PySpin.TransportLayerDevice_GUIXMLPath_set, doc=r"""GUIXMLPath""")
    GevCCP = property(_PySpin.TransportLayerDevice_GevCCP_get, _PySpin.TransportLayerDevice_GevCCP_set, doc=r"""GevCCP""")
    GevDeviceMACAddress = property(_PySpin.TransportLayerDevice_GevDeviceMACAddress_get, _PySpin.TransportLayerDevice_GevDeviceMACAddress_set, doc=r"""GevDeviceMACAddress""")
    GevDeviceIPAddress = property(_PySpin.TransportLayerDevice_GevDeviceIPAddress_get, _PySpin.TransportLayerDevice_GevDeviceIPAddress_set, doc=r"""GevDeviceIPAddress""")
    GevDeviceSubnetMask = property(_PySpin.TransportLayerDevice_GevDeviceSubnetMask_get, _PySpin.TransportLayerDevice_GevDeviceSubnetMask_set, doc=r"""GevDeviceSubnetMask""")
    GevDeviceGateway = property(_PySpin.TransportLayerDevice_GevDeviceGateway_get, _PySpin.TransportLayerDevice_GevDeviceGateway_set, doc=r"""GevDeviceGateway""")
    GevVersionMajor = property(_PySpin.TransportLayerDevice_GevVersionMajor_get, _PySpin.TransportLayerDevice_GevVersionMajor_set, doc=r"""GevVersionMajor""")
    GevVersionMinor = property(_PySpin.TransportLayerDevice_GevVersionMinor_get, _PySpin.TransportLayerDevice_GevVersionMinor_set, doc=r"""GevVersionMinor""")
    GevDeviceModeIsBigEndian = property(_PySpin.TransportLayerDevice_GevDeviceModeIsBigEndian_get, _PySpin.TransportLayerDevice_GevDeviceModeIsBigEndian_set, doc=r"""GevDeviceModeIsBigEndian""")
    GevDeviceReadAndWriteTimeout = property(_PySpin.TransportLayerDevice_GevDeviceReadAndWriteTimeout_get, _PySpin.TransportLayerDevice_GevDeviceReadAndWriteTimeout_set, doc=r"""GevDeviceReadAndWriteTimeout""")
    GevDeviceMaximumRetryCount = property(_PySpin.TransportLayerDevice_GevDeviceMaximumRetryCount_get, _PySpin.TransportLayerDevice_GevDeviceMaximumRetryCount_set, doc=r"""GevDeviceMaximumRetryCount""")
    GevDevicePort = property(_PySpin.TransportLayerDevice_GevDevicePort_get, _PySpin.TransportLayerDevice_GevDevicePort_set, doc=r"""GevDevicePort""")
    GevDeviceDiscoverMaximumPacketSize = property(_PySpin.TransportLayerDevice_GevDeviceDiscoverMaximumPacketSize_get, _PySpin.TransportLayerDevice_GevDeviceDiscoverMaximumPacketSize_set, doc=r"""GevDeviceDiscoverMaximumPacketSize""")
    GevDeviceMaximumPacketSize = property(_PySpin.TransportLayerDevice_GevDeviceMaximumPacketSize_get, _PySpin.TransportLayerDevice_GevDeviceMaximumPacketSize_set, doc=r"""GevDeviceMaximumPacketSize""")
    GevDeviceIsWrongSubnet = property(_PySpin.TransportLayerDevice_GevDeviceIsWrongSubnet_get, _PySpin.TransportLayerDevice_GevDeviceIsWrongSubnet_set, doc=r"""GevDeviceIsWrongSubnet""")
    GevDeviceAutoForceIP = property(_PySpin.TransportLayerDevice_GevDeviceAutoForceIP_get, _PySpin.TransportLayerDevice_GevDeviceAutoForceIP_set, doc=r"""GevDeviceAutoForceIP""")
    GevDeviceForceIP = property(_PySpin.TransportLayerDevice_GevDeviceForceIP_get, _PySpin.TransportLayerDevice_GevDeviceForceIP_set, doc=r"""GevDeviceForceIP""")
    GevDeviceForceIPAddress = property(_PySpin.TransportLayerDevice_GevDeviceForceIPAddress_get, _PySpin.TransportLayerDevice_GevDeviceForceIPAddress_set, doc=r"""GevDeviceForceIPAddress""")
    GevDeviceForceSubnetMask = property(_PySpin.TransportLayerDevice_GevDeviceForceSubnetMask_get, _PySpin.TransportLayerDevice_GevDeviceForceSubnetMask_set, doc=r"""GevDeviceForceSubnetMask""")
    GevDeviceForceGateway = property(_PySpin.TransportLayerDevice_GevDeviceForceGateway_get, _PySpin.TransportLayerDevice_GevDeviceForceGateway_set, doc=r"""GevDeviceForceGateway""")
    DeviceMulticastMonitorMode = property(_PySpin.TransportLayerDevice_DeviceMulticastMonitorMode_get, _PySpin.TransportLayerDevice_DeviceMulticastMonitorMode_set, doc=r"""DeviceMulticastMonitorMode""")
    DeviceEndianessMechanism = property(_PySpin.TransportLayerDevice_DeviceEndianessMechanism_get, _PySpin.TransportLayerDevice_DeviceEndianessMechanism_set, doc=r"""DeviceEndianessMechanism""")
    DeviceReset = property(_PySpin.TransportLayerDevice_DeviceReset_get, _PySpin.TransportLayerDevice_DeviceReset_set, doc=r"""DeviceReset""")
    DeviceInstanceId = property(_PySpin.TransportLayerDevice_DeviceInstanceId_get, _PySpin.TransportLayerDevice_DeviceInstanceId_set, doc=r"""DeviceInstanceId""")
    DeviceLocation = property(_PySpin.TransportLayerDevice_DeviceLocation_get, _PySpin.TransportLayerDevice_DeviceLocation_set, doc=r"""DeviceLocation""")
    DeviceCurrentSpeed = property(_PySpin.TransportLayerDevice_DeviceCurrentSpeed_get, _PySpin.TransportLayerDevice_DeviceCurrentSpeed_set, doc=r"""DeviceCurrentSpeed""")
    DeviceU3VProtocol = property(_PySpin.TransportLayerDevice_DeviceU3VProtocol_get, _PySpin.TransportLayerDevice_DeviceU3VProtocol_set, doc=r"""DeviceU3VProtocol""")
    DevicePortId = property(_PySpin.TransportLayerDevice_DevicePortId_get, _PySpin.TransportLayerDevice_DevicePortId_set, doc=r"""DevicePortId""")

# Register TransportLayerDevice in _PySpin:
_PySpin.TransportLayerDevice_swigregister(TransportLayerDevice)

class EventHandler(object):
    r"""Proxy of C++ Spinnaker::EventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_EventHandler

    def SetEventType(self, eventType):
        r"""
        SetEventType(self, eventType)

        Parameters
        ----------
        eventType: enum Spinnaker::EventType

        """
        return _PySpin.EventHandler_SetEventType(self, eventType)

    def GetEventType(self):
        r"""GetEventType(self) -> Spinnaker::EventType"""
        return _PySpin.EventHandler_GetEventType(self)

    def GetEventPayloadDataSize(self):
        r"""GetEventPayloadDataSize(self) -> size_t const"""
        return _PySpin.EventHandler_GetEventPayloadDataSize(self)

    def GetEventPayloadData(self):
        r"""GetEventPayloadData(self) -> PyObject *"""
        return _PySpin.EventHandler_GetEventPayloadData(self)

# Register EventHandler in _PySpin:
_PySpin.EventHandler_swigregister(EventHandler)

class LoggingEventData(object):
    r"""


    The LoggingEventData object.

    C++ includes: LoggingEventData.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_LoggingEventData

    def GetCategoryName(self):
        r"""
        GetCategoryName(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetCategoryName()

        Gets the logging event category name.

        The category name 
        """
        return _PySpin.LoggingEventData_GetCategoryName(self)

    def GetLogMessage(self):
        r"""
        GetLogMessage(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetLogMessage()

        Gets the logging event message.

        The log message 
        """
        return _PySpin.LoggingEventData_GetLogMessage(self)

    def GetNDC(self):
        r"""
        GetNDC(self) -> char const *
        const
        char* Spinnaker::LoggingEventData::GetNDC()

        Gets the logging event's Nested Diagnostic Context (NDC).

        The log event's NDC 
        """
        return _PySpin.LoggingEventData_GetNDC(self)

    def GetPriority(self):
        r"""
        GetPriority(self) -> int const
        const int Spinnaker::LoggingEventData::GetPriority()

        Gets the logging event priority.

        The log priority 
        """
        return _PySpin.LoggingEventData_GetPriority(self)

    def GetThreadName(self):
        r"""
        GetThreadName(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetThreadName()

        Gets the logging event thread name.

        The thread name 
        """
        return _PySpin.LoggingEventData_GetThreadName(self)

    def GetTimestamp(self):
        r"""
        GetTimestamp(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetTimestamp()

        Gets the logging event time stamp.

        The time stamp of the log 
        """
        return _PySpin.LoggingEventData_GetTimestamp(self)

    def GetPriorityName(self):
        r"""
        GetPriorityName(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetPriorityName()

        Gets the logging event priority name.

        The priority name of the log 
        """
        return _PySpin.LoggingEventData_GetPriorityName(self)

# Register LoggingEventData in _PySpin:
_PySpin.LoggingEventData_swigregister(LoggingEventData)

class ICameraBase(object):
    r"""Proxy of C++ Spinnaker::ICameraBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ICameraBase

    def Init(self):
        r"""Init(self)"""
        return _PySpin.ICameraBase_Init(self)

    def DeInit(self):
        r"""DeInit(self)"""
        return _PySpin.ICameraBase_DeInit(self)

    def IsInitialized(self):
        r"""IsInitialized(self) -> bool"""
        return _PySpin.ICameraBase_IsInitialized(self)

    def IsValid(self):
        r"""IsValid(self) -> bool"""
        return _PySpin.ICameraBase_IsValid(self)

    def GetNodeMap(self):
        r"""GetNodeMap(self) -> INodeMap"""
        return _PySpin.ICameraBase_GetNodeMap(self)

    def GetTLDeviceNodeMap(self):
        r"""GetTLDeviceNodeMap(self) -> INodeMap"""
        return _PySpin.ICameraBase_GetTLDeviceNodeMap(self)

    def GetTLStreamNodeMap(self, streamIndex):
        r"""
        GetTLStreamNodeMap(self, streamIndex) -> INodeMap

        Parameters
        ----------
        streamIndex: uint64_t

        """
        return _PySpin.ICameraBase_GetTLStreamNodeMap(self, streamIndex)

    def GetAccessMode(self):
        r"""GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode"""
        return _PySpin.ICameraBase_GetAccessMode(self)

    def BeginAcquisition(self):
        r"""BeginAcquisition(self)"""
        return _PySpin.ICameraBase_BeginAcquisition(self)

    def EndAcquisition(self):
        r"""EndAcquisition(self)"""
        return _PySpin.ICameraBase_EndAcquisition(self)

    def GetBufferOwnership(self):
        r"""GetBufferOwnership(self) -> Spinnaker::BufferOwnership"""
        return _PySpin.ICameraBase_GetBufferOwnership(self)

    def SetBufferOwnership(self, mode):
        r"""
        SetBufferOwnership(self, mode)

        Parameters
        ----------
        mode: enum Spinnaker::BufferOwnership const

        """
        return _PySpin.ICameraBase_SetBufferOwnership(self, mode)

    def GetUserBufferCount(self):
        r"""GetUserBufferCount(self) -> uint64_t"""
        return _PySpin.ICameraBase_GetUserBufferCount(self)

    def GetUserBufferSize(self):
        r"""GetUserBufferSize(self) -> uint64_t"""
        return _PySpin.ICameraBase_GetUserBufferSize(self)

    def GetUserBufferTotalSize(self):
        r"""GetUserBufferTotalSize(self) -> uint64_t"""
        return _PySpin.ICameraBase_GetUserBufferTotalSize(self)

    def SetUserBuffers(self, *args):
        r"""
        SetUserBuffers(self, pMemBuffers, totalSize)

        Parameters
        ----------
        pMemBuffers: void *const
        totalSize: uint64_t

        SetUserBuffers(self, ppMemBuffers, bufferCount, bufferSize)

        Parameters
        ----------
        ppMemBuffers: void **const
        bufferCount: uint64_t const
        bufferSize: uint64_t const

        """
        return _PySpin.ICameraBase_SetUserBuffers(self, *args)

    def GetNextImage(self, *args):
        r"""
        GetNextImage(self, grabTimeout=EVENT_TIMEOUT_INFINITE, streamIndex=0) -> ImagePtr

        Parameters
        ----------
        grabTimeout: uint64_t
        streamIndex: uint64_t

        """
        return _PySpin.ICameraBase_GetNextImage(self, *args)

    def GetUniqueID(self):
        r"""GetUniqueID(self) -> gcstring"""
        return _PySpin.ICameraBase_GetUniqueID(self)

    def IsStreaming(self):
        r"""IsStreaming(self) -> bool"""
        return _PySpin.ICameraBase_IsStreaming(self)

    def GetGuiXml(self):
        r"""GetGuiXml(self) -> gcstring"""
        return _PySpin.ICameraBase_GetGuiXml(self)

    def RegisterEventHandler(self, *args):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &

        RegisterEventHandler(self, evtHandlerToRegister, eventName)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::DeviceEventHandler &
        eventName: Spinnaker::GenICam::gcstring const &

        RegisterEventHandler(self, evtHandlerToRegister, streamIndex)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::ImageEventHandler &
        streamIndex: uint64_t

        """
        return _PySpin.ICameraBase_RegisterEventHandler(self, *args)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin.ICameraBase_UnregisterEventHandler(self, evtHandlerToUnregister)

    def GetNumImagesInUse(self):
        r"""GetNumImagesInUse(self) -> unsigned int"""
        return _PySpin.ICameraBase_GetNumImagesInUse(self)

    def GetNumDataStreams(self):
        r"""GetNumDataStreams(self) -> unsigned int"""
        return _PySpin.ICameraBase_GetNumDataStreams(self)

    def DiscoverMaxPacketSize(self):
        r"""DiscoverMaxPacketSize(self) -> unsigned int"""
        return _PySpin.ICameraBase_DiscoverMaxPacketSize(self)

    def ForceIP(self):
        r"""ForceIP(self)"""
        return _PySpin.ICameraBase_ForceIP(self)
    TLDevice = property(_PySpin.ICameraBase_TLDevice_get, doc=r"""TLDevice""")
    TLStream = property(_PySpin.ICameraBase_TLStream_get, doc=r"""TLStream""")

    def ReadPort(self, iAddress):
        r"""
        ReadPort(self, iAddress) -> PyObject *

        Parameters
        ----------
        iAddress: uint64_t

        """
        return _PySpin.ICameraBase_ReadPort(self, iAddress)

    def WritePort(self, iAddress, pBuffer):
        r"""
        WritePort(self, iAddress, pBuffer)

        Parameters
        ----------
        iAddress: uint64_t
        pBuffer: uint32_t

        """
        return _PySpin.ICameraBase_WritePort(self, iAddress, pBuffer)

# Register ICameraBase in _PySpin:
_PySpin.ICameraBase_swigregister(ICameraBase)

class CameraBase(ICameraBase):
    r"""


    The base class for the camera object.

    C++ includes: CameraBase.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_CameraBase

    def Init(self):
        r"""
        Init(self)
        void
        Spinnaker::CameraBase::Init()

        Connect to camera, retrieve XML and generate node map. This function
        needs to be called before any camera related API calls such as
        BeginAcquisition(), EndAcquisition(), GetNodeMap(), GetNextImage().

        See:   BeginAcquisition()

        See:   EndAcquisition()

        See:   GetNodeMap()

        See:   GetNextImage() 
        """
        return _PySpin.CameraBase_Init(self)

    def DeInit(self):
        r"""
        DeInit(self)
        void
        Spinnaker::CameraBase::DeInit()

        Disconnect camera port and free GenICam node map and GUI XML. Do not
        call more functions that access the remote device such as
        WritePort/ReadPort after calling DeInit(); Events should also be
        unregistered before calling camera DeInit(). Otherwise an exception
        will be thrown in the DeInit() call and require the user to unregister
        events before the camera can be re-initialized again.

        See:   Init()

        See:   UnregisterEvent(Event & evtToUnregister) 
        """
        return _PySpin.CameraBase_DeInit(self)

    def IsInitialized(self):
        r"""
        IsInitialized(self) -> bool
        bool
        Spinnaker::CameraBase::IsInitialized()

        Checks if camera is initialized. This function needs to return true in
        order to retrieve a valid NodeMap from the GetNodeMap() call.

        See:   GetNodeMap()

        If camera is initialized or not 
        """
        return _PySpin.CameraBase_IsInitialized(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        bool
        Spinnaker::CameraBase::IsValid()

        Checks a flag to determine if camera is still valid for use.

        If camera is valid or not 

        Note that CameraPtr and CameraBase both define an IsValid() function.
        In order to determine the validity of the camera using a CameraPtr, 
        user must first call get() to retrieve the CameraBase object.
        """
        return _PySpin.CameraBase_IsValid(self)

    def GetNodeMap(self):
        r"""
        GetNodeMap(self) -> INodeMap
        GenApi::INodeMap& Spinnaker::CameraBase::GetNodeMap() const

        Gets a reference to the node map that is generated from a GenICam XML
        file. The camera must be initialized by a call to Init() first before
        a node map reference can be successfully acquired.

        See:   Init()

        A reference to the INodeMap. 
        """
        return _PySpin.CameraBase_GetNodeMap(self)

    def GetTLDeviceNodeMap(self):
        r"""
        GetTLDeviceNodeMap(self) -> INodeMap
        GenApi::INodeMap& Spinnaker::CameraBase::GetTLDeviceNodeMap() const

        Gets a reference to the node map that is generated from a GenICam XML
        file for the GenTL Device module. The camera does not need to be
        initialized before acquiring this node map.

        A reference to the INodeMap. 
        """
        return _PySpin.CameraBase_GetTLDeviceNodeMap(self)

    def GetTLStreamNodeMap(self, streamIndex=0):
        r"""
        GetTLStreamNodeMap(self, streamIndex=0) -> INodeMap

        Parameters
        ----------
        streamIndex: uint64_t

        GenApi::INodeMap& Spinnaker::CameraBase::GetTLStreamNodeMap() const

        Gets a reference to the node map that is generated from a GenICam XML
        file for the GenTL Stream module. The camera does not need to be
        initialized before acquiring this node map.

        A reference to the INodeMap. 
        """
        return _PySpin.CameraBase_GetTLStreamNodeMap(self, streamIndex)

    def GetAccessMode(self):
        r"""
        GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode
        GenApi::EAccessMode Spinnaker::CameraBase::GetAccessMode() const

        Returns the access mode that the software has on the Camera. The
        camera does not need to be initialized before calling this function.

        See:   Init()

        An enumeration value indicating the access mode 
        """
        return _PySpin.CameraBase_GetAccessMode(self)

    def BeginAcquisition(self):
        r"""
        BeginAcquisition(self)
        void
        Spinnaker::CameraBase::BeginAcquisition()

        Starts the image acquisition engine. The camera must be initialized
        via a call to Init() before starting an acquisition.

        See:   Init() 
        """
        return _PySpin.CameraBase_BeginAcquisition(self)

    def EndAcquisition(self):
        r"""
        EndAcquisition(self)
        void
        Spinnaker::CameraBase::EndAcquisition()

        Stops the image acquisition engine. If EndAcquisition() is called
        without a prior call to BeginAcquisition() an error message "Camera
        is not started" will be thrown. All Images that were acquired using
        GetNextImage() need to be released first using image->Release() before
        calling EndAcquisition(). All buffers in the input pool and output
        queue will be discarded when EndAcquisition() is called.

        See:   Init()

        See:   BeginAcquisition()

        See:  GetNextImage( grabTimeout )

        See:  Image::Release() 
        """
        return _PySpin.CameraBase_EndAcquisition(self)

    def GetBufferOwnership(self):
        r"""GetBufferOwnership(self) -> Spinnaker::BufferOwnership"""
        return _PySpin.CameraBase_GetBufferOwnership(self)

    def SetBufferOwnership(self, mode):
        r"""
        SetBufferOwnership(self, mode)

        Parameters
        ----------
        mode: enum Spinnaker::BufferOwnership const

        """
        return _PySpin.CameraBase_SetBufferOwnership(self, mode)

    def GetUserBufferCount(self):
        r"""GetUserBufferCount(self) -> uint64_t"""
        return _PySpin.CameraBase_GetUserBufferCount(self)

    def GetUserBufferSize(self):
        r"""GetUserBufferSize(self) -> uint64_t"""
        return _PySpin.CameraBase_GetUserBufferSize(self)

    def GetUserBufferTotalSize(self):
        r"""GetUserBufferTotalSize(self) -> uint64_t"""
        return _PySpin.CameraBase_GetUserBufferTotalSize(self)

    def SetUserBuffers(self, *args):
        r"""
        SetUserBuffers(self, pMemBuffers, totalSize)

        Parameters
        ----------
        pMemBuffers: void *const
        totalSize: uint64_t

        SetUserBuffers(self, ppMemBuffers, bufferCount, bufferSize)

        Parameters
        ----------
        ppMemBuffers: void **const
        bufferCount: uint64_t const
        bufferSize: uint64_t const

        """
        return _PySpin.CameraBase_SetUserBuffers(self, *args)

    def GetNextImage(self, *args):
        r"""
        GetNextImage(self, grabTimeout=EVENT_TIMEOUT_INFINITE, streamIndex=0) -> ImagePtr

        Parameters
        ----------
        grabTimeout: uint64_t
        streamIndex: uint64_t

        ImagePtr
        Spinnaker::CameraBase::GetNextImage(uint64_t
        grabTimeout=EVENT_TIMEOUT_INFINITE, uint64_t streamID=0)

        Gets the next image that was received by the transport layer. This
        function will block indefinitely until an image arrives. Most cameras
        support one stream so the default streamID is 0 but if a camera
        supports multiple streams the user can input the streamID to select
        from which stream to grab images

        See:   Init()

        See:   BeginAcquisition()

        See:   EndAcquisition()

        Parameters:
        -----------

        grabTimeout:  a 64bit value that represents a timeout in milliseconds

        streamID:  The stream to grab the image.

        pointer to an Image object 
        """
        return _PySpin.CameraBase_GetNextImage(self, *args)

    def GetNextImageSync(self, *args):
        r"""
        GetNextImageSync(self, grabTimeout=EVENT_TIMEOUT_INFINITE) -> ImageList

        Parameters
        ----------
        grabTimeout: uint64_t

        """
        return _PySpin.CameraBase_GetNextImageSync(self, *args)

    def GetUniqueID(self):
        r"""
        GetUniqueID(self) -> gcstring
        GenICam::gcstring Spinnaker::CameraBase::GetUniqueID()

        This returns a unique id string that identifies the camera. This is
        the camera serial number.

        string that uniquely identifies the camera (serial number) 
        """
        return _PySpin.CameraBase_GetUniqueID(self)

    def IsStreaming(self):
        r"""
        IsStreaming(self) -> bool
        bool
        Spinnaker::CameraBase::IsStreaming() const

        Returns true if the camera is currently streaming or false if it is
        not.

        See:   Init()

        returns true if camera is streaming and false otherwise. 
        """
        return _PySpin.CameraBase_IsStreaming(self)

    def GetGuiXml(self):
        r"""
        GetGuiXml(self) -> gcstring
        GenICam::gcstring Spinnaker::CameraBase::GetGuiXml() const

        Returns the GUI XML that can be passed into the Spinnaker GUI
        framework

        GenICam::gcstring that represents the uncompressed GUI XML file 
        """
        return _PySpin.CameraBase_GetGuiXml(self)

    def RegisterEventHandler(self, *args):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &

        RegisterEventHandler(self, evtHandlerToRegister, eventName)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::DeviceEventHandler &
        eventName: Spinnaker::GenICam::gcstring const &

        RegisterEventHandler(self, evtHandlerToRegister, streamIndex)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::ImageEventHandler &
        streamIndex: uint64_t

        """
        return _PySpin.CameraBase_RegisterEventHandler(self, *args)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin.CameraBase_UnregisterEventHandler(self, evtHandlerToUnregister)

    def GetNumImagesInUse(self):
        r"""
        GetNumImagesInUse(self) -> unsigned int
        unsigned int Spinnaker::CameraBase::GetNumImagesInUse()

        Returns the number of images that are currently in use. Each of the
        images that are currently in use must be cleaned up with a call to
        image->Release() before calling system->ReleaseInstance().

        The number of images that needs to be cleaned up. 
        """
        return _PySpin.CameraBase_GetNumImagesInUse(self)

    def GetNumDataStreams(self):
        r"""
        GetNumDataStreams(self) -> unsigned int
        unsigned int Spinnaker::CameraBase::GetNumDataStreams()

        Returns the number of streams that a device supports.

        The number of data streams 
        """
        return _PySpin.CameraBase_GetNumDataStreams(self)

    def DiscoverMaxPacketSize(self):
        r"""
        DiscoverMaxPacketSize(self) -> unsigned int
        unsigned int Spinnaker::CameraBase::DiscoverMaxPacketSize()

        Returns the largest packet size that can be safely used on the
        interface that device is connected to

        The maximum packet size returned. 
        """
        return _PySpin.CameraBase_DiscoverMaxPacketSize(self)

    def ForceIP(self):
        r"""ForceIP(self)"""
        return _PySpin.CameraBase_ForceIP(self)

# Register CameraBase in _PySpin:
_PySpin.CameraBase_swigregister(CameraBase)

class IEnumerationT_LUTSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LUTSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LUTSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LUTSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LUTSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LUTSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LUTSelectorEnums"""
        return _PySpin.IEnumerationT_LUTSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LUTSelectorEnums const

        """
        return _PySpin.IEnumerationT_LUTSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LUTSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LUTSelectorEnums in _PySpin:
_PySpin.IEnumerationT_LUTSelectorEnums_swigregister(IEnumerationT_LUTSelectorEnums)

class IEnumerationT_ExposureModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ExposureModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ExposureModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ExposureModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ExposureModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ExposureModeEnums"""
        return _PySpin.IEnumerationT_ExposureModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ExposureModeEnums const

        """
        return _PySpin.IEnumerationT_ExposureModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ExposureModeEnums in _PySpin:
_PySpin.IEnumerationT_ExposureModeEnums_swigregister(IEnumerationT_ExposureModeEnums)

class IEnumerationT_AcquisitionModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AcquisitionModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AcquisitionModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AcquisitionModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AcquisitionModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AcquisitionModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AcquisitionModeEnums"""
        return _PySpin.IEnumerationT_AcquisitionModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AcquisitionModeEnums const

        """
        return _PySpin.IEnumerationT_AcquisitionModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AcquisitionModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AcquisitionModeEnums in _PySpin:
_PySpin.IEnumerationT_AcquisitionModeEnums_swigregister(IEnumerationT_AcquisitionModeEnums)

class IEnumerationT_TriggerSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TriggerSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TriggerSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TriggerSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TriggerSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TriggerSourceEnums"""
        return _PySpin.IEnumerationT_TriggerSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TriggerSourceEnums const

        """
        return _PySpin.IEnumerationT_TriggerSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TriggerSourceEnums in _PySpin:
_PySpin.IEnumerationT_TriggerSourceEnums_swigregister(IEnumerationT_TriggerSourceEnums)

class IEnumerationT_TriggerActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TriggerActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TriggerActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TriggerActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TriggerActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TriggerActivationEnums"""
        return _PySpin.IEnumerationT_TriggerActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TriggerActivationEnums const

        """
        return _PySpin.IEnumerationT_TriggerActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TriggerActivationEnums in _PySpin:
_PySpin.IEnumerationT_TriggerActivationEnums_swigregister(IEnumerationT_TriggerActivationEnums)

class IEnumerationT_SensorShutterModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SensorShutterModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SensorShutterModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SensorShutterModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SensorShutterModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SensorShutterModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SensorShutterModeEnums"""
        return _PySpin.IEnumerationT_SensorShutterModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SensorShutterModeEnums const

        """
        return _PySpin.IEnumerationT_SensorShutterModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SensorShutterModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SensorShutterModeEnums in _PySpin:
_PySpin.IEnumerationT_SensorShutterModeEnums_swigregister(IEnumerationT_SensorShutterModeEnums)

class IEnumerationT_TriggerModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TriggerModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TriggerModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TriggerModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TriggerModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TriggerModeEnums"""
        return _PySpin.IEnumerationT_TriggerModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TriggerModeEnums const

        """
        return _PySpin.IEnumerationT_TriggerModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TriggerModeEnums in _PySpin:
_PySpin.IEnumerationT_TriggerModeEnums_swigregister(IEnumerationT_TriggerModeEnums)

class IEnumerationT_TriggerOverlapEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TriggerOverlapEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TriggerOverlapEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TriggerOverlapEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TriggerOverlapEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerOverlapEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TriggerOverlapEnums"""
        return _PySpin.IEnumerationT_TriggerOverlapEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TriggerOverlapEnums const

        """
        return _PySpin.IEnumerationT_TriggerOverlapEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerOverlapEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TriggerOverlapEnums in _PySpin:
_PySpin.IEnumerationT_TriggerOverlapEnums_swigregister(IEnumerationT_TriggerOverlapEnums)

class IEnumerationT_TriggerSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TriggerSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TriggerSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TriggerSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TriggerSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TriggerSelectorEnums"""
        return _PySpin.IEnumerationT_TriggerSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TriggerSelectorEnums const

        """
        return _PySpin.IEnumerationT_TriggerSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TriggerSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TriggerSelectorEnums in _PySpin:
_PySpin.IEnumerationT_TriggerSelectorEnums_swigregister(IEnumerationT_TriggerSelectorEnums)

class IEnumerationT_ExposureAutoEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ExposureAutoEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ExposureAutoEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ExposureAutoEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ExposureAutoEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureAutoEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ExposureAutoEnums"""
        return _PySpin.IEnumerationT_ExposureAutoEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ExposureAutoEnums const

        """
        return _PySpin.IEnumerationT_ExposureAutoEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureAutoEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ExposureAutoEnums in _PySpin:
_PySpin.IEnumerationT_ExposureAutoEnums_swigregister(IEnumerationT_ExposureAutoEnums)

class IEnumerationT_EventSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EventSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EventSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EventSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EventSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EventSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EventSelectorEnums"""
        return _PySpin.IEnumerationT_EventSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EventSelectorEnums const

        """
        return _PySpin.IEnumerationT_EventSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EventSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EventSelectorEnums in _PySpin:
_PySpin.IEnumerationT_EventSelectorEnums_swigregister(IEnumerationT_EventSelectorEnums)

class IEnumerationT_EventNotificationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EventNotificationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EventNotificationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EventNotificationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EventNotificationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EventNotificationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EventNotificationEnums"""
        return _PySpin.IEnumerationT_EventNotificationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EventNotificationEnums const

        """
        return _PySpin.IEnumerationT_EventNotificationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EventNotificationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EventNotificationEnums in _PySpin:
_PySpin.IEnumerationT_EventNotificationEnums_swigregister(IEnumerationT_EventNotificationEnums)

class IEnumerationT_LogicBlockSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LogicBlockSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LogicBlockSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LogicBlockSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LogicBlockSelectorEnums"""
        return _PySpin.IEnumerationT_LogicBlockSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockSelectorEnums const

        """
        return _PySpin.IEnumerationT_LogicBlockSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LogicBlockSelectorEnums in _PySpin:
_PySpin.IEnumerationT_LogicBlockSelectorEnums_swigregister(IEnumerationT_LogicBlockSelectorEnums)

class IEnumerationT_LogicBlockLUTInputActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LogicBlockLUTInputActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTInputActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LogicBlockLUTInputActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LogicBlockLUTInputActivationEnums"""
        return _PySpin.IEnumerationT_LogicBlockLUTInputActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTInputActivationEnums const

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LogicBlockLUTInputActivationEnums in _PySpin:
_PySpin.IEnumerationT_LogicBlockLUTInputActivationEnums_swigregister(IEnumerationT_LogicBlockLUTInputActivationEnums)

class IEnumerationT_LogicBlockLUTInputSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LogicBlockLUTInputSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTInputSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LogicBlockLUTInputSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LogicBlockLUTInputSelectorEnums"""
        return _PySpin.IEnumerationT_LogicBlockLUTInputSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTInputSelectorEnums const

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LogicBlockLUTInputSelectorEnums in _PySpin:
_PySpin.IEnumerationT_LogicBlockLUTInputSelectorEnums_swigregister(IEnumerationT_LogicBlockLUTInputSelectorEnums)

class IEnumerationT_LogicBlockLUTInputSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LogicBlockLUTInputSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTInputSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LogicBlockLUTInputSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LogicBlockLUTInputSourceEnums"""
        return _PySpin.IEnumerationT_LogicBlockLUTInputSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTInputSourceEnums const

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTInputSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LogicBlockLUTInputSourceEnums in _PySpin:
_PySpin.IEnumerationT_LogicBlockLUTInputSourceEnums_swigregister(IEnumerationT_LogicBlockLUTInputSourceEnums)

class IEnumerationT_LogicBlockLUTSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LogicBlockLUTSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LogicBlockLUTSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LogicBlockLUTSelectorEnums"""
        return _PySpin.IEnumerationT_LogicBlockLUTSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LogicBlockLUTSelectorEnums const

        """
        return _PySpin.IEnumerationT_LogicBlockLUTSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LogicBlockLUTSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LogicBlockLUTSelectorEnums in _PySpin:
_PySpin.IEnumerationT_LogicBlockLUTSelectorEnums_swigregister(IEnumerationT_LogicBlockLUTSelectorEnums)

class IEnumerationT_ColorTransformationSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ColorTransformationSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ColorTransformationSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ColorTransformationSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ColorTransformationSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ColorTransformationSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ColorTransformationSelectorEnums"""
        return _PySpin.IEnumerationT_ColorTransformationSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ColorTransformationSelectorEnums const

        """
        return _PySpin.IEnumerationT_ColorTransformationSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ColorTransformationSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ColorTransformationSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ColorTransformationSelectorEnums_swigregister(IEnumerationT_ColorTransformationSelectorEnums)

class IEnumerationT_RgbTransformLightSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< RgbTransformLightSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::RgbTransformLightSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_RgbTransformLightSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::RgbTransformLightSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RgbTransformLightSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::RgbTransformLightSourceEnums"""
        return _PySpin.IEnumerationT_RgbTransformLightSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::RgbTransformLightSourceEnums const

        """
        return _PySpin.IEnumerationT_RgbTransformLightSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RgbTransformLightSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_RgbTransformLightSourceEnums in _PySpin:
_PySpin.IEnumerationT_RgbTransformLightSourceEnums_swigregister(IEnumerationT_RgbTransformLightSourceEnums)

class IEnumerationT_ColorTransformationValueSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ColorTransformationValueSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ColorTransformationValueSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ColorTransformationValueSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ColorTransformationValueSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ColorTransformationValueSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ColorTransformationValueSelectorEnums"""
        return _PySpin.IEnumerationT_ColorTransformationValueSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ColorTransformationValueSelectorEnums const

        """
        return _PySpin.IEnumerationT_ColorTransformationValueSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ColorTransformationValueSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ColorTransformationValueSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ColorTransformationValueSelectorEnums_swigregister(IEnumerationT_ColorTransformationValueSelectorEnums)

class IEnumerationT_DeviceRegistersEndiannessEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceRegistersEndiannessEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceRegistersEndiannessEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceRegistersEndiannessEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceRegistersEndiannessEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceRegistersEndiannessEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceRegistersEndiannessEnums"""
        return _PySpin.IEnumerationT_DeviceRegistersEndiannessEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceRegistersEndiannessEnums const

        """
        return _PySpin.IEnumerationT_DeviceRegistersEndiannessEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceRegistersEndiannessEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceRegistersEndiannessEnums in _PySpin:
_PySpin.IEnumerationT_DeviceRegistersEndiannessEnums_swigregister(IEnumerationT_DeviceRegistersEndiannessEnums)

class IEnumerationT_DeviceScanTypeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceScanTypeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceScanTypeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceScanTypeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceScanTypeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceScanTypeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceScanTypeEnums"""
        return _PySpin.IEnumerationT_DeviceScanTypeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceScanTypeEnums const

        """
        return _PySpin.IEnumerationT_DeviceScanTypeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceScanTypeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceScanTypeEnums in _PySpin:
_PySpin.IEnumerationT_DeviceScanTypeEnums_swigregister(IEnumerationT_DeviceScanTypeEnums)

class IEnumerationT_DeviceCharacterSetEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceCharacterSetEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceCharacterSetEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceCharacterSetEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceCharacterSetEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceCharacterSetEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceCharacterSetEnums"""
        return _PySpin.IEnumerationT_DeviceCharacterSetEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceCharacterSetEnums const

        """
        return _PySpin.IEnumerationT_DeviceCharacterSetEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceCharacterSetEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceCharacterSetEnums in _PySpin:
_PySpin.IEnumerationT_DeviceCharacterSetEnums_swigregister(IEnumerationT_DeviceCharacterSetEnums)

class IEnumerationT_DeviceTLTypeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceTLTypeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTLTypeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceTLTypeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceTLTypeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTLTypeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceTLTypeEnums"""
        return _PySpin.IEnumerationT_DeviceTLTypeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTLTypeEnums const

        """
        return _PySpin.IEnumerationT_DeviceTLTypeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTLTypeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceTLTypeEnums in _PySpin:
_PySpin.IEnumerationT_DeviceTLTypeEnums_swigregister(IEnumerationT_DeviceTLTypeEnums)

class IEnumerationT_DevicePowerSupplySelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DevicePowerSupplySelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DevicePowerSupplySelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DevicePowerSupplySelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DevicePowerSupplySelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DevicePowerSupplySelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DevicePowerSupplySelectorEnums"""
        return _PySpin.IEnumerationT_DevicePowerSupplySelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DevicePowerSupplySelectorEnums const

        """
        return _PySpin.IEnumerationT_DevicePowerSupplySelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DevicePowerSupplySelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DevicePowerSupplySelectorEnums in _PySpin:
_PySpin.IEnumerationT_DevicePowerSupplySelectorEnums_swigregister(IEnumerationT_DevicePowerSupplySelectorEnums)

class IEnumerationT_DeviceTemperatureSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceTemperatureSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTemperatureSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceTemperatureSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceTemperatureSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTemperatureSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceTemperatureSelectorEnums"""
        return _PySpin.IEnumerationT_DeviceTemperatureSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTemperatureSelectorEnums const

        """
        return _PySpin.IEnumerationT_DeviceTemperatureSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTemperatureSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceTemperatureSelectorEnums in _PySpin:
_PySpin.IEnumerationT_DeviceTemperatureSelectorEnums_swigregister(IEnumerationT_DeviceTemperatureSelectorEnums)

class IEnumerationT_DeviceIndicatorModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceIndicatorModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceIndicatorModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceIndicatorModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceIndicatorModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceIndicatorModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceIndicatorModeEnums"""
        return _PySpin.IEnumerationT_DeviceIndicatorModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceIndicatorModeEnums const

        """
        return _PySpin.IEnumerationT_DeviceIndicatorModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceIndicatorModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceIndicatorModeEnums in _PySpin:
_PySpin.IEnumerationT_DeviceIndicatorModeEnums_swigregister(IEnumerationT_DeviceIndicatorModeEnums)

class IEnumerationT_AutoExposureControlPriorityEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AutoExposureControlPriorityEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureControlPriorityEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AutoExposureControlPriorityEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AutoExposureControlPriorityEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureControlPriorityEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AutoExposureControlPriorityEnums"""
        return _PySpin.IEnumerationT_AutoExposureControlPriorityEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureControlPriorityEnums const

        """
        return _PySpin.IEnumerationT_AutoExposureControlPriorityEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureControlPriorityEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AutoExposureControlPriorityEnums in _PySpin:
_PySpin.IEnumerationT_AutoExposureControlPriorityEnums_swigregister(IEnumerationT_AutoExposureControlPriorityEnums)

class IEnumerationT_AutoExposureMeteringModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AutoExposureMeteringModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureMeteringModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AutoExposureMeteringModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AutoExposureMeteringModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureMeteringModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AutoExposureMeteringModeEnums"""
        return _PySpin.IEnumerationT_AutoExposureMeteringModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureMeteringModeEnums const

        """
        return _PySpin.IEnumerationT_AutoExposureMeteringModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureMeteringModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AutoExposureMeteringModeEnums in _PySpin:
_PySpin.IEnumerationT_AutoExposureMeteringModeEnums_swigregister(IEnumerationT_AutoExposureMeteringModeEnums)

class IEnumerationT_BalanceWhiteAutoProfileEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BalanceWhiteAutoProfileEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BalanceWhiteAutoProfileEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoProfileEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BalanceWhiteAutoProfileEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoProfileEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BalanceWhiteAutoProfileEnums"""
        return _PySpin.IEnumerationT_BalanceWhiteAutoProfileEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BalanceWhiteAutoProfileEnums const

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoProfileEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoProfileEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BalanceWhiteAutoProfileEnums in _PySpin:
_PySpin.IEnumerationT_BalanceWhiteAutoProfileEnums_swigregister(IEnumerationT_BalanceWhiteAutoProfileEnums)

class IEnumerationT_AutoAlgorithmSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AutoAlgorithmSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AutoAlgorithmSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AutoAlgorithmSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AutoAlgorithmSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoAlgorithmSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AutoAlgorithmSelectorEnums"""
        return _PySpin.IEnumerationT_AutoAlgorithmSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AutoAlgorithmSelectorEnums const

        """
        return _PySpin.IEnumerationT_AutoAlgorithmSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoAlgorithmSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AutoAlgorithmSelectorEnums in _PySpin:
_PySpin.IEnumerationT_AutoAlgorithmSelectorEnums_swigregister(IEnumerationT_AutoAlgorithmSelectorEnums)

class IEnumerationT_AutoExposureTargetGreyValueAutoEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AutoExposureTargetGreyValueAutoEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureTargetGreyValueAutoEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AutoExposureTargetGreyValueAutoEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AutoExposureTargetGreyValueAutoEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureTargetGreyValueAutoEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AutoExposureTargetGreyValueAutoEnums"""
        return _PySpin.IEnumerationT_AutoExposureTargetGreyValueAutoEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureTargetGreyValueAutoEnums const

        """
        return _PySpin.IEnumerationT_AutoExposureTargetGreyValueAutoEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureTargetGreyValueAutoEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AutoExposureTargetGreyValueAutoEnums in _PySpin:
_PySpin.IEnumerationT_AutoExposureTargetGreyValueAutoEnums_swigregister(IEnumerationT_AutoExposureTargetGreyValueAutoEnums)

class IEnumerationT_AutoExposureLightingModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AutoExposureLightingModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureLightingModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AutoExposureLightingModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AutoExposureLightingModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureLightingModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AutoExposureLightingModeEnums"""
        return _PySpin.IEnumerationT_AutoExposureLightingModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AutoExposureLightingModeEnums const

        """
        return _PySpin.IEnumerationT_AutoExposureLightingModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AutoExposureLightingModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AutoExposureLightingModeEnums in _PySpin:
_PySpin.IEnumerationT_AutoExposureLightingModeEnums_swigregister(IEnumerationT_AutoExposureLightingModeEnums)

class IEnumerationT_GevIEEE1588StatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevIEEE1588StatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevIEEE1588StatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588StatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevIEEE1588StatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588StatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevIEEE1588StatusEnums"""
        return _PySpin.IEnumerationT_GevIEEE1588StatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevIEEE1588StatusEnums const

        """
        return _PySpin.IEnumerationT_GevIEEE1588StatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588StatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevIEEE1588StatusEnums in _PySpin:
_PySpin.IEnumerationT_GevIEEE1588StatusEnums_swigregister(IEnumerationT_GevIEEE1588StatusEnums)

class IEnumerationT_GevIEEE1588ModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevIEEE1588ModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevIEEE1588ModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588ModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevIEEE1588ModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588ModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevIEEE1588ModeEnums"""
        return _PySpin.IEnumerationT_GevIEEE1588ModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevIEEE1588ModeEnums const

        """
        return _PySpin.IEnumerationT_GevIEEE1588ModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588ModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevIEEE1588ModeEnums in _PySpin:
_PySpin.IEnumerationT_GevIEEE1588ModeEnums_swigregister(IEnumerationT_GevIEEE1588ModeEnums)

class IEnumerationT_GevIEEE1588ClockAccuracyEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevIEEE1588ClockAccuracyEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevIEEE1588ClockAccuracyEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588ClockAccuracyEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevIEEE1588ClockAccuracyEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588ClockAccuracyEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevIEEE1588ClockAccuracyEnums"""
        return _PySpin.IEnumerationT_GevIEEE1588ClockAccuracyEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevIEEE1588ClockAccuracyEnums const

        """
        return _PySpin.IEnumerationT_GevIEEE1588ClockAccuracyEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIEEE1588ClockAccuracyEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevIEEE1588ClockAccuracyEnums in _PySpin:
_PySpin.IEnumerationT_GevIEEE1588ClockAccuracyEnums_swigregister(IEnumerationT_GevIEEE1588ClockAccuracyEnums)

class IEnumerationT_GevCCPEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevCCPEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevCCPEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevCCPEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevCCPEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevCCPEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevCCPEnums"""
        return _PySpin.IEnumerationT_GevCCPEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevCCPEnums const

        """
        return _PySpin.IEnumerationT_GevCCPEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevCCPEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevCCPEnums in _PySpin:
_PySpin.IEnumerationT_GevCCPEnums_swigregister(IEnumerationT_GevCCPEnums)

class IEnumerationT_GevSupportedOptionSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevSupportedOptionSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevSupportedOptionSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevSupportedOptionSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevSupportedOptionSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevSupportedOptionSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevSupportedOptionSelectorEnums"""
        return _PySpin.IEnumerationT_GevSupportedOptionSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevSupportedOptionSelectorEnums const

        """
        return _PySpin.IEnumerationT_GevSupportedOptionSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevSupportedOptionSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevSupportedOptionSelectorEnums in _PySpin:
_PySpin.IEnumerationT_GevSupportedOptionSelectorEnums_swigregister(IEnumerationT_GevSupportedOptionSelectorEnums)

class IEnumerationT_BlackLevelSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BlackLevelSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BlackLevelSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BlackLevelSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BlackLevelSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BlackLevelSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BlackLevelSelectorEnums"""
        return _PySpin.IEnumerationT_BlackLevelSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BlackLevelSelectorEnums const

        """
        return _PySpin.IEnumerationT_BlackLevelSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BlackLevelSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BlackLevelSelectorEnums in _PySpin:
_PySpin.IEnumerationT_BlackLevelSelectorEnums_swigregister(IEnumerationT_BlackLevelSelectorEnums)

class IEnumerationT_BalanceWhiteAutoEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BalanceWhiteAutoEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BalanceWhiteAutoEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BalanceWhiteAutoEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BalanceWhiteAutoEnums"""
        return _PySpin.IEnumerationT_BalanceWhiteAutoEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BalanceWhiteAutoEnums const

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BalanceWhiteAutoEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BalanceWhiteAutoEnums in _PySpin:
_PySpin.IEnumerationT_BalanceWhiteAutoEnums_swigregister(IEnumerationT_BalanceWhiteAutoEnums)

class IEnumerationT_GainAutoEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GainAutoEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GainAutoEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GainAutoEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GainAutoEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GainAutoEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GainAutoEnums"""
        return _PySpin.IEnumerationT_GainAutoEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GainAutoEnums const

        """
        return _PySpin.IEnumerationT_GainAutoEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GainAutoEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GainAutoEnums in _PySpin:
_PySpin.IEnumerationT_GainAutoEnums_swigregister(IEnumerationT_GainAutoEnums)

class IEnumerationT_BalanceRatioSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BalanceRatioSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BalanceRatioSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BalanceRatioSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BalanceRatioSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BalanceRatioSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BalanceRatioSelectorEnums"""
        return _PySpin.IEnumerationT_BalanceRatioSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BalanceRatioSelectorEnums const

        """
        return _PySpin.IEnumerationT_BalanceRatioSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BalanceRatioSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BalanceRatioSelectorEnums in _PySpin:
_PySpin.IEnumerationT_BalanceRatioSelectorEnums_swigregister(IEnumerationT_BalanceRatioSelectorEnums)

class IEnumerationT_GainSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GainSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GainSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GainSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GainSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GainSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GainSelectorEnums"""
        return _PySpin.IEnumerationT_GainSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GainSelectorEnums const

        """
        return _PySpin.IEnumerationT_GainSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GainSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GainSelectorEnums in _PySpin:
_PySpin.IEnumerationT_GainSelectorEnums_swigregister(IEnumerationT_GainSelectorEnums)

class IEnumerationT_DefectCorrectionModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DefectCorrectionModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DefectCorrectionModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DefectCorrectionModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DefectCorrectionModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DefectCorrectionModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DefectCorrectionModeEnums"""
        return _PySpin.IEnumerationT_DefectCorrectionModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DefectCorrectionModeEnums const

        """
        return _PySpin.IEnumerationT_DefectCorrectionModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DefectCorrectionModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DefectCorrectionModeEnums in _PySpin:
_PySpin.IEnumerationT_DefectCorrectionModeEnums_swigregister(IEnumerationT_DefectCorrectionModeEnums)

class IEnumerationT_UserSetSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< UserSetSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::UserSetSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_UserSetSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::UserSetSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_UserSetSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::UserSetSelectorEnums"""
        return _PySpin.IEnumerationT_UserSetSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::UserSetSelectorEnums const

        """
        return _PySpin.IEnumerationT_UserSetSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_UserSetSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_UserSetSelectorEnums in _PySpin:
_PySpin.IEnumerationT_UserSetSelectorEnums_swigregister(IEnumerationT_UserSetSelectorEnums)

class IEnumerationT_UserSetDefaultEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< UserSetDefaultEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::UserSetDefaultEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_UserSetDefaultEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::UserSetDefaultEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_UserSetDefaultEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::UserSetDefaultEnums"""
        return _PySpin.IEnumerationT_UserSetDefaultEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::UserSetDefaultEnums const

        """
        return _PySpin.IEnumerationT_UserSetDefaultEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_UserSetDefaultEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_UserSetDefaultEnums in _PySpin:
_PySpin.IEnumerationT_UserSetDefaultEnums_swigregister(IEnumerationT_UserSetDefaultEnums)

class IEnumerationT_SerialPortBaudRateEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SerialPortBaudRateEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortBaudRateEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SerialPortBaudRateEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SerialPortBaudRateEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortBaudRateEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SerialPortBaudRateEnums"""
        return _PySpin.IEnumerationT_SerialPortBaudRateEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortBaudRateEnums const

        """
        return _PySpin.IEnumerationT_SerialPortBaudRateEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortBaudRateEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SerialPortBaudRateEnums in _PySpin:
_PySpin.IEnumerationT_SerialPortBaudRateEnums_swigregister(IEnumerationT_SerialPortBaudRateEnums)

class IEnumerationT_SerialPortParityEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SerialPortParityEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortParityEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SerialPortParityEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SerialPortParityEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortParityEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SerialPortParityEnums"""
        return _PySpin.IEnumerationT_SerialPortParityEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortParityEnums const

        """
        return _PySpin.IEnumerationT_SerialPortParityEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortParityEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SerialPortParityEnums in _PySpin:
_PySpin.IEnumerationT_SerialPortParityEnums_swigregister(IEnumerationT_SerialPortParityEnums)

class IEnumerationT_SerialPortSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SerialPortSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SerialPortSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SerialPortSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SerialPortSelectorEnums"""
        return _PySpin.IEnumerationT_SerialPortSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortSelectorEnums const

        """
        return _PySpin.IEnumerationT_SerialPortSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SerialPortSelectorEnums in _PySpin:
_PySpin.IEnumerationT_SerialPortSelectorEnums_swigregister(IEnumerationT_SerialPortSelectorEnums)

class IEnumerationT_SerialPortStopBitsEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SerialPortStopBitsEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortStopBitsEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SerialPortStopBitsEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SerialPortStopBitsEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortStopBitsEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SerialPortStopBitsEnums"""
        return _PySpin.IEnumerationT_SerialPortStopBitsEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortStopBitsEnums const

        """
        return _PySpin.IEnumerationT_SerialPortStopBitsEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortStopBitsEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SerialPortStopBitsEnums in _PySpin:
_PySpin.IEnumerationT_SerialPortStopBitsEnums_swigregister(IEnumerationT_SerialPortStopBitsEnums)

class IEnumerationT_SerialPortSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SerialPortSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SerialPortSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SerialPortSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SerialPortSourceEnums"""
        return _PySpin.IEnumerationT_SerialPortSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SerialPortSourceEnums const

        """
        return _PySpin.IEnumerationT_SerialPortSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SerialPortSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SerialPortSourceEnums in _PySpin:
_PySpin.IEnumerationT_SerialPortSourceEnums_swigregister(IEnumerationT_SerialPortSourceEnums)

class IEnumerationT_SequencerModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SequencerModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SequencerModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SequencerModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SequencerModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SequencerModeEnums"""
        return _PySpin.IEnumerationT_SequencerModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SequencerModeEnums const

        """
        return _PySpin.IEnumerationT_SequencerModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SequencerModeEnums in _PySpin:
_PySpin.IEnumerationT_SequencerModeEnums_swigregister(IEnumerationT_SequencerModeEnums)

class IEnumerationT_SequencerConfigurationValidEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SequencerConfigurationValidEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SequencerConfigurationValidEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SequencerConfigurationValidEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SequencerConfigurationValidEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerConfigurationValidEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SequencerConfigurationValidEnums"""
        return _PySpin.IEnumerationT_SequencerConfigurationValidEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SequencerConfigurationValidEnums const

        """
        return _PySpin.IEnumerationT_SequencerConfigurationValidEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerConfigurationValidEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SequencerConfigurationValidEnums in _PySpin:
_PySpin.IEnumerationT_SequencerConfigurationValidEnums_swigregister(IEnumerationT_SequencerConfigurationValidEnums)

class IEnumerationT_SequencerSetValidEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SequencerSetValidEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SequencerSetValidEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SequencerSetValidEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SequencerSetValidEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerSetValidEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SequencerSetValidEnums"""
        return _PySpin.IEnumerationT_SequencerSetValidEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SequencerSetValidEnums const

        """
        return _PySpin.IEnumerationT_SequencerSetValidEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerSetValidEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SequencerSetValidEnums in _PySpin:
_PySpin.IEnumerationT_SequencerSetValidEnums_swigregister(IEnumerationT_SequencerSetValidEnums)

class IEnumerationT_SequencerTriggerActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SequencerTriggerActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SequencerTriggerActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SequencerTriggerActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SequencerTriggerActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerTriggerActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SequencerTriggerActivationEnums"""
        return _PySpin.IEnumerationT_SequencerTriggerActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SequencerTriggerActivationEnums const

        """
        return _PySpin.IEnumerationT_SequencerTriggerActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerTriggerActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SequencerTriggerActivationEnums in _PySpin:
_PySpin.IEnumerationT_SequencerTriggerActivationEnums_swigregister(IEnumerationT_SequencerTriggerActivationEnums)

class IEnumerationT_SequencerConfigurationModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SequencerConfigurationModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SequencerConfigurationModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SequencerConfigurationModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SequencerConfigurationModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerConfigurationModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SequencerConfigurationModeEnums"""
        return _PySpin.IEnumerationT_SequencerConfigurationModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SequencerConfigurationModeEnums const

        """
        return _PySpin.IEnumerationT_SequencerConfigurationModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerConfigurationModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SequencerConfigurationModeEnums in _PySpin:
_PySpin.IEnumerationT_SequencerConfigurationModeEnums_swigregister(IEnumerationT_SequencerConfigurationModeEnums)

class IEnumerationT_SequencerTriggerSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SequencerTriggerSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SequencerTriggerSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SequencerTriggerSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SequencerTriggerSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerTriggerSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SequencerTriggerSourceEnums"""
        return _PySpin.IEnumerationT_SequencerTriggerSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SequencerTriggerSourceEnums const

        """
        return _PySpin.IEnumerationT_SequencerTriggerSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SequencerTriggerSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SequencerTriggerSourceEnums in _PySpin:
_PySpin.IEnumerationT_SequencerTriggerSourceEnums_swigregister(IEnumerationT_SequencerTriggerSourceEnums)

class IEnumerationT_TransferQueueModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferQueueModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferQueueModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferQueueModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferQueueModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferQueueModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferQueueModeEnums"""
        return _PySpin.IEnumerationT_TransferQueueModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferQueueModeEnums const

        """
        return _PySpin.IEnumerationT_TransferQueueModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferQueueModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferQueueModeEnums in _PySpin:
_PySpin.IEnumerationT_TransferQueueModeEnums_swigregister(IEnumerationT_TransferQueueModeEnums)

class IEnumerationT_TransferOperationModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferOperationModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferOperationModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferOperationModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferOperationModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferOperationModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferOperationModeEnums"""
        return _PySpin.IEnumerationT_TransferOperationModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferOperationModeEnums const

        """
        return _PySpin.IEnumerationT_TransferOperationModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferOperationModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferOperationModeEnums in _PySpin:
_PySpin.IEnumerationT_TransferOperationModeEnums_swigregister(IEnumerationT_TransferOperationModeEnums)

class IEnumerationT_TransferControlModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferControlModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferControlModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferControlModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferControlModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferControlModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferControlModeEnums"""
        return _PySpin.IEnumerationT_TransferControlModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferControlModeEnums const

        """
        return _PySpin.IEnumerationT_TransferControlModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferControlModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferControlModeEnums in _PySpin:
_PySpin.IEnumerationT_TransferControlModeEnums_swigregister(IEnumerationT_TransferControlModeEnums)

class IEnumerationT_ChunkGainSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkGainSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkGainSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkGainSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkGainSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkGainSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkGainSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkGainSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkGainSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkGainSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkGainSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkGainSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkGainSelectorEnums_swigregister(IEnumerationT_ChunkGainSelectorEnums)

class IEnumerationT_ChunkSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkSelectorEnums_swigregister(IEnumerationT_ChunkSelectorEnums)

class IEnumerationT_ChunkBlackLevelSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkBlackLevelSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkBlackLevelSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkBlackLevelSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkBlackLevelSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkBlackLevelSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkBlackLevelSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkBlackLevelSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkBlackLevelSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkBlackLevelSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkBlackLevelSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkBlackLevelSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkBlackLevelSelectorEnums_swigregister(IEnumerationT_ChunkBlackLevelSelectorEnums)

class IEnumerationT_ChunkPixelFormatEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkPixelFormatEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkPixelFormatEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkPixelFormatEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkPixelFormatEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkPixelFormatEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkPixelFormatEnums"""
        return _PySpin.IEnumerationT_ChunkPixelFormatEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkPixelFormatEnums const

        """
        return _PySpin.IEnumerationT_ChunkPixelFormatEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkPixelFormatEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkPixelFormatEnums in _PySpin:
_PySpin.IEnumerationT_ChunkPixelFormatEnums_swigregister(IEnumerationT_ChunkPixelFormatEnums)

class IEnumerationT_FileOperationStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< FileOperationStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::FileOperationStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_FileOperationStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::FileOperationStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileOperationStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::FileOperationStatusEnums"""
        return _PySpin.IEnumerationT_FileOperationStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::FileOperationStatusEnums const

        """
        return _PySpin.IEnumerationT_FileOperationStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileOperationStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_FileOperationStatusEnums in _PySpin:
_PySpin.IEnumerationT_FileOperationStatusEnums_swigregister(IEnumerationT_FileOperationStatusEnums)

class IEnumerationT_FileOpenModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< FileOpenModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::FileOpenModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_FileOpenModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::FileOpenModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileOpenModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::FileOpenModeEnums"""
        return _PySpin.IEnumerationT_FileOpenModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::FileOpenModeEnums const

        """
        return _PySpin.IEnumerationT_FileOpenModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileOpenModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_FileOpenModeEnums in _PySpin:
_PySpin.IEnumerationT_FileOpenModeEnums_swigregister(IEnumerationT_FileOpenModeEnums)

class IEnumerationT_FileOperationSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< FileOperationSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::FileOperationSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_FileOperationSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::FileOperationSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileOperationSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::FileOperationSelectorEnums"""
        return _PySpin.IEnumerationT_FileOperationSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::FileOperationSelectorEnums const

        """
        return _PySpin.IEnumerationT_FileOperationSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileOperationSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_FileOperationSelectorEnums in _PySpin:
_PySpin.IEnumerationT_FileOperationSelectorEnums_swigregister(IEnumerationT_FileOperationSelectorEnums)

class IEnumerationT_FileSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< FileSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::FileSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_FileSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::FileSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::FileSelectorEnums"""
        return _PySpin.IEnumerationT_FileSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::FileSelectorEnums const

        """
        return _PySpin.IEnumerationT_FileSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_FileSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_FileSelectorEnums in _PySpin:
_PySpin.IEnumerationT_FileSelectorEnums_swigregister(IEnumerationT_FileSelectorEnums)

class IEnumerationT_BinningSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BinningSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BinningSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BinningSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BinningSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BinningSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BinningSelectorEnums"""
        return _PySpin.IEnumerationT_BinningSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BinningSelectorEnums const

        """
        return _PySpin.IEnumerationT_BinningSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BinningSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BinningSelectorEnums in _PySpin:
_PySpin.IEnumerationT_BinningSelectorEnums_swigregister(IEnumerationT_BinningSelectorEnums)

class IEnumerationT_TestPatternGeneratorSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TestPatternGeneratorSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TestPatternGeneratorSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TestPatternGeneratorSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TestPatternGeneratorSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TestPatternGeneratorSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TestPatternGeneratorSelectorEnums"""
        return _PySpin.IEnumerationT_TestPatternGeneratorSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TestPatternGeneratorSelectorEnums const

        """
        return _PySpin.IEnumerationT_TestPatternGeneratorSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TestPatternGeneratorSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TestPatternGeneratorSelectorEnums in _PySpin:
_PySpin.IEnumerationT_TestPatternGeneratorSelectorEnums_swigregister(IEnumerationT_TestPatternGeneratorSelectorEnums)

class IEnumerationT_CompressionSaturationPriorityEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CompressionSaturationPriorityEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CompressionSaturationPriorityEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CompressionSaturationPriorityEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CompressionSaturationPriorityEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CompressionSaturationPriorityEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CompressionSaturationPriorityEnums"""
        return _PySpin.IEnumerationT_CompressionSaturationPriorityEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CompressionSaturationPriorityEnums const

        """
        return _PySpin.IEnumerationT_CompressionSaturationPriorityEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CompressionSaturationPriorityEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CompressionSaturationPriorityEnums in _PySpin:
_PySpin.IEnumerationT_CompressionSaturationPriorityEnums_swigregister(IEnumerationT_CompressionSaturationPriorityEnums)

class IEnumerationT_TestPatternEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TestPatternEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TestPatternEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TestPatternEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TestPatternEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TestPatternEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TestPatternEnums"""
        return _PySpin.IEnumerationT_TestPatternEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TestPatternEnums const

        """
        return _PySpin.IEnumerationT_TestPatternEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TestPatternEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TestPatternEnums in _PySpin:
_PySpin.IEnumerationT_TestPatternEnums_swigregister(IEnumerationT_TestPatternEnums)

class IEnumerationT_PixelColorFilterEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< PixelColorFilterEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::PixelColorFilterEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_PixelColorFilterEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::PixelColorFilterEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelColorFilterEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::PixelColorFilterEnums"""
        return _PySpin.IEnumerationT_PixelColorFilterEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::PixelColorFilterEnums const

        """
        return _PySpin.IEnumerationT_PixelColorFilterEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelColorFilterEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_PixelColorFilterEnums in _PySpin:
_PySpin.IEnumerationT_PixelColorFilterEnums_swigregister(IEnumerationT_PixelColorFilterEnums)

class IEnumerationT_AdcBitDepthEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AdcBitDepthEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AdcBitDepthEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AdcBitDepthEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AdcBitDepthEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AdcBitDepthEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AdcBitDepthEnums"""
        return _PySpin.IEnumerationT_AdcBitDepthEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AdcBitDepthEnums const

        """
        return _PySpin.IEnumerationT_AdcBitDepthEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AdcBitDepthEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AdcBitDepthEnums in _PySpin:
_PySpin.IEnumerationT_AdcBitDepthEnums_swigregister(IEnumerationT_AdcBitDepthEnums)

class IEnumerationT_DecimationHorizontalModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DecimationHorizontalModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DecimationHorizontalModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DecimationHorizontalModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DecimationHorizontalModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DecimationHorizontalModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DecimationHorizontalModeEnums"""
        return _PySpin.IEnumerationT_DecimationHorizontalModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DecimationHorizontalModeEnums const

        """
        return _PySpin.IEnumerationT_DecimationHorizontalModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DecimationHorizontalModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DecimationHorizontalModeEnums in _PySpin:
_PySpin.IEnumerationT_DecimationHorizontalModeEnums_swigregister(IEnumerationT_DecimationHorizontalModeEnums)

class IEnumerationT_BinningVerticalModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BinningVerticalModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BinningVerticalModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BinningVerticalModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BinningVerticalModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BinningVerticalModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BinningVerticalModeEnums"""
        return _PySpin.IEnumerationT_BinningVerticalModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BinningVerticalModeEnums const

        """
        return _PySpin.IEnumerationT_BinningVerticalModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BinningVerticalModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BinningVerticalModeEnums in _PySpin:
_PySpin.IEnumerationT_BinningVerticalModeEnums_swigregister(IEnumerationT_BinningVerticalModeEnums)

class IEnumerationT_PixelSizeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< PixelSizeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::PixelSizeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_PixelSizeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::PixelSizeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelSizeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::PixelSizeEnums"""
        return _PySpin.IEnumerationT_PixelSizeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::PixelSizeEnums const

        """
        return _PySpin.IEnumerationT_PixelSizeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelSizeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_PixelSizeEnums in _PySpin:
_PySpin.IEnumerationT_PixelSizeEnums_swigregister(IEnumerationT_PixelSizeEnums)

class IEnumerationT_DecimationSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DecimationSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DecimationSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DecimationSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DecimationSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DecimationSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DecimationSelectorEnums"""
        return _PySpin.IEnumerationT_DecimationSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DecimationSelectorEnums const

        """
        return _PySpin.IEnumerationT_DecimationSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DecimationSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DecimationSelectorEnums in _PySpin:
_PySpin.IEnumerationT_DecimationSelectorEnums_swigregister(IEnumerationT_DecimationSelectorEnums)

class IEnumerationT_ImageCompressionModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ImageCompressionModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ImageCompressionModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ImageCompressionModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ImageCompressionModeEnums"""
        return _PySpin.IEnumerationT_ImageCompressionModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ImageCompressionModeEnums const

        """
        return _PySpin.IEnumerationT_ImageCompressionModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ImageCompressionModeEnums in _PySpin:
_PySpin.IEnumerationT_ImageCompressionModeEnums_swigregister(IEnumerationT_ImageCompressionModeEnums)

class IEnumerationT_BinningHorizontalModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BinningHorizontalModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BinningHorizontalModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BinningHorizontalModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BinningHorizontalModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BinningHorizontalModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BinningHorizontalModeEnums"""
        return _PySpin.IEnumerationT_BinningHorizontalModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BinningHorizontalModeEnums const

        """
        return _PySpin.IEnumerationT_BinningHorizontalModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BinningHorizontalModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BinningHorizontalModeEnums in _PySpin:
_PySpin.IEnumerationT_BinningHorizontalModeEnums_swigregister(IEnumerationT_BinningHorizontalModeEnums)

class IEnumerationT_PixelFormatEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< PixelFormatEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::PixelFormatEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_PixelFormatEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::PixelFormatEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelFormatEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::PixelFormatEnums"""
        return _PySpin.IEnumerationT_PixelFormatEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::PixelFormatEnums const

        """
        return _PySpin.IEnumerationT_PixelFormatEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelFormatEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_PixelFormatEnums in _PySpin:
_PySpin.IEnumerationT_PixelFormatEnums_swigregister(IEnumerationT_PixelFormatEnums)

class IEnumerationT_DecimationVerticalModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DecimationVerticalModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DecimationVerticalModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DecimationVerticalModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DecimationVerticalModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DecimationVerticalModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DecimationVerticalModeEnums"""
        return _PySpin.IEnumerationT_DecimationVerticalModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DecimationVerticalModeEnums const

        """
        return _PySpin.IEnumerationT_DecimationVerticalModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DecimationVerticalModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DecimationVerticalModeEnums in _PySpin:
_PySpin.IEnumerationT_DecimationVerticalModeEnums_swigregister(IEnumerationT_DecimationVerticalModeEnums)

class IEnumerationT_LineModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LineModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LineModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LineModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LineModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LineModeEnums"""
        return _PySpin.IEnumerationT_LineModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LineModeEnums const

        """
        return _PySpin.IEnumerationT_LineModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LineModeEnums in _PySpin:
_PySpin.IEnumerationT_LineModeEnums_swigregister(IEnumerationT_LineModeEnums)

class IEnumerationT_LineSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LineSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LineSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LineSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LineSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LineSourceEnums"""
        return _PySpin.IEnumerationT_LineSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LineSourceEnums const

        """
        return _PySpin.IEnumerationT_LineSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LineSourceEnums in _PySpin:
_PySpin.IEnumerationT_LineSourceEnums_swigregister(IEnumerationT_LineSourceEnums)

class IEnumerationT_LineInputFilterSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LineInputFilterSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LineInputFilterSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LineInputFilterSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LineInputFilterSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineInputFilterSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LineInputFilterSelectorEnums"""
        return _PySpin.IEnumerationT_LineInputFilterSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LineInputFilterSelectorEnums const

        """
        return _PySpin.IEnumerationT_LineInputFilterSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineInputFilterSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LineInputFilterSelectorEnums in _PySpin:
_PySpin.IEnumerationT_LineInputFilterSelectorEnums_swigregister(IEnumerationT_LineInputFilterSelectorEnums)

class IEnumerationT_UserOutputSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< UserOutputSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::UserOutputSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_UserOutputSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::UserOutputSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_UserOutputSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::UserOutputSelectorEnums"""
        return _PySpin.IEnumerationT_UserOutputSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::UserOutputSelectorEnums const

        """
        return _PySpin.IEnumerationT_UserOutputSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_UserOutputSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_UserOutputSelectorEnums in _PySpin:
_PySpin.IEnumerationT_UserOutputSelectorEnums_swigregister(IEnumerationT_UserOutputSelectorEnums)

class IEnumerationT_LineFormatEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LineFormatEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LineFormatEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LineFormatEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LineFormatEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineFormatEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LineFormatEnums"""
        return _PySpin.IEnumerationT_LineFormatEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LineFormatEnums const

        """
        return _PySpin.IEnumerationT_LineFormatEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineFormatEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LineFormatEnums in _PySpin:
_PySpin.IEnumerationT_LineFormatEnums_swigregister(IEnumerationT_LineFormatEnums)

class IEnumerationT_LineSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< LineSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::LineSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_LineSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::LineSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::LineSelectorEnums"""
        return _PySpin.IEnumerationT_LineSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::LineSelectorEnums const

        """
        return _PySpin.IEnumerationT_LineSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_LineSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_LineSelectorEnums in _PySpin:
_PySpin.IEnumerationT_LineSelectorEnums_swigregister(IEnumerationT_LineSelectorEnums)

class IEnumerationT_ExposureActiveModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ExposureActiveModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ExposureActiveModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ExposureActiveModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ExposureActiveModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureActiveModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ExposureActiveModeEnums"""
        return _PySpin.IEnumerationT_ExposureActiveModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ExposureActiveModeEnums const

        """
        return _PySpin.IEnumerationT_ExposureActiveModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureActiveModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ExposureActiveModeEnums in _PySpin:
_PySpin.IEnumerationT_ExposureActiveModeEnums_swigregister(IEnumerationT_ExposureActiveModeEnums)

class IEnumerationT_CounterTriggerActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterTriggerActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterTriggerActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterTriggerActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterTriggerActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterTriggerActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterTriggerActivationEnums"""
        return _PySpin.IEnumerationT_CounterTriggerActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterTriggerActivationEnums const

        """
        return _PySpin.IEnumerationT_CounterTriggerActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterTriggerActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterTriggerActivationEnums in _PySpin:
_PySpin.IEnumerationT_CounterTriggerActivationEnums_swigregister(IEnumerationT_CounterTriggerActivationEnums)

class IEnumerationT_CounterSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterSelectorEnums"""
        return _PySpin.IEnumerationT_CounterSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterSelectorEnums const

        """
        return _PySpin.IEnumerationT_CounterSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterSelectorEnums in _PySpin:
_PySpin.IEnumerationT_CounterSelectorEnums_swigregister(IEnumerationT_CounterSelectorEnums)

class IEnumerationT_CounterStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterStatusEnums"""
        return _PySpin.IEnumerationT_CounterStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterStatusEnums const

        """
        return _PySpin.IEnumerationT_CounterStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterStatusEnums in _PySpin:
_PySpin.IEnumerationT_CounterStatusEnums_swigregister(IEnumerationT_CounterStatusEnums)

class IEnumerationT_CounterTriggerSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterTriggerSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterTriggerSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterTriggerSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterTriggerSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterTriggerSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterTriggerSourceEnums"""
        return _PySpin.IEnumerationT_CounterTriggerSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterTriggerSourceEnums const

        """
        return _PySpin.IEnumerationT_CounterTriggerSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterTriggerSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterTriggerSourceEnums in _PySpin:
_PySpin.IEnumerationT_CounterTriggerSourceEnums_swigregister(IEnumerationT_CounterTriggerSourceEnums)

class IEnumerationT_CounterResetSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterResetSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterResetSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterResetSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterResetSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterResetSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterResetSourceEnums"""
        return _PySpin.IEnumerationT_CounterResetSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterResetSourceEnums const

        """
        return _PySpin.IEnumerationT_CounterResetSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterResetSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterResetSourceEnums in _PySpin:
_PySpin.IEnumerationT_CounterResetSourceEnums_swigregister(IEnumerationT_CounterResetSourceEnums)

class IEnumerationT_CounterEventSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterEventSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterEventSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterEventSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterEventSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterEventSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterEventSourceEnums"""
        return _PySpin.IEnumerationT_CounterEventSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterEventSourceEnums const

        """
        return _PySpin.IEnumerationT_CounterEventSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterEventSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterEventSourceEnums in _PySpin:
_PySpin.IEnumerationT_CounterEventSourceEnums_swigregister(IEnumerationT_CounterEventSourceEnums)

class IEnumerationT_CounterEventActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterEventActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterEventActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterEventActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterEventActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterEventActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterEventActivationEnums"""
        return _PySpin.IEnumerationT_CounterEventActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterEventActivationEnums const

        """
        return _PySpin.IEnumerationT_CounterEventActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterEventActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterEventActivationEnums in _PySpin:
_PySpin.IEnumerationT_CounterEventActivationEnums_swigregister(IEnumerationT_CounterEventActivationEnums)

class IEnumerationT_CounterResetActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CounterResetActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CounterResetActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CounterResetActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CounterResetActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterResetActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CounterResetActivationEnums"""
        return _PySpin.IEnumerationT_CounterResetActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CounterResetActivationEnums const

        """
        return _PySpin.IEnumerationT_CounterResetActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CounterResetActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CounterResetActivationEnums in _PySpin:
_PySpin.IEnumerationT_CounterResetActivationEnums_swigregister(IEnumerationT_CounterResetActivationEnums)

class IEnumerationT_DeviceTypeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceTypeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTypeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceTypeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceTypeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTypeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceTypeEnums"""
        return _PySpin.IEnumerationT_DeviceTypeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTypeEnums const

        """
        return _PySpin.IEnumerationT_DeviceTypeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTypeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceTypeEnums in _PySpin:
_PySpin.IEnumerationT_DeviceTypeEnums_swigregister(IEnumerationT_DeviceTypeEnums)

class IEnumerationT_DeviceConnectionStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceConnectionStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceConnectionStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceConnectionStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceConnectionStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceConnectionStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceConnectionStatusEnums"""
        return _PySpin.IEnumerationT_DeviceConnectionStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceConnectionStatusEnums const

        """
        return _PySpin.IEnumerationT_DeviceConnectionStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceConnectionStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceConnectionStatusEnums in _PySpin:
_PySpin.IEnumerationT_DeviceConnectionStatusEnums_swigregister(IEnumerationT_DeviceConnectionStatusEnums)

class IEnumerationT_DeviceLinkThroughputLimitModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceLinkThroughputLimitModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceLinkThroughputLimitModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceLinkThroughputLimitModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceLinkThroughputLimitModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceLinkThroughputLimitModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceLinkThroughputLimitModeEnums"""
        return _PySpin.IEnumerationT_DeviceLinkThroughputLimitModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceLinkThroughputLimitModeEnums const

        """
        return _PySpin.IEnumerationT_DeviceLinkThroughputLimitModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceLinkThroughputLimitModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceLinkThroughputLimitModeEnums in _PySpin:
_PySpin.IEnumerationT_DeviceLinkThroughputLimitModeEnums_swigregister(IEnumerationT_DeviceLinkThroughputLimitModeEnums)

class IEnumerationT_DeviceLinkHeartbeatModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceLinkHeartbeatModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceLinkHeartbeatModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceLinkHeartbeatModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceLinkHeartbeatModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceLinkHeartbeatModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceLinkHeartbeatModeEnums"""
        return _PySpin.IEnumerationT_DeviceLinkHeartbeatModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceLinkHeartbeatModeEnums const

        """
        return _PySpin.IEnumerationT_DeviceLinkHeartbeatModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceLinkHeartbeatModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceLinkHeartbeatModeEnums in _PySpin:
_PySpin.IEnumerationT_DeviceLinkHeartbeatModeEnums_swigregister(IEnumerationT_DeviceLinkHeartbeatModeEnums)

class IEnumerationT_DeviceStreamChannelTypeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceStreamChannelTypeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceStreamChannelTypeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelTypeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceStreamChannelTypeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelTypeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceStreamChannelTypeEnums"""
        return _PySpin.IEnumerationT_DeviceStreamChannelTypeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceStreamChannelTypeEnums const

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelTypeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelTypeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceStreamChannelTypeEnums in _PySpin:
_PySpin.IEnumerationT_DeviceStreamChannelTypeEnums_swigregister(IEnumerationT_DeviceStreamChannelTypeEnums)

class IEnumerationT_DeviceStreamChannelEndiannessEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceStreamChannelEndiannessEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceStreamChannelEndiannessEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelEndiannessEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceStreamChannelEndiannessEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelEndiannessEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceStreamChannelEndiannessEnums"""
        return _PySpin.IEnumerationT_DeviceStreamChannelEndiannessEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceStreamChannelEndiannessEnums const

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelEndiannessEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceStreamChannelEndiannessEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceStreamChannelEndiannessEnums in _PySpin:
_PySpin.IEnumerationT_DeviceStreamChannelEndiannessEnums_swigregister(IEnumerationT_DeviceStreamChannelEndiannessEnums)

class IEnumerationT_DeviceClockSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceClockSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceClockSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceClockSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceClockSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceClockSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceClockSelectorEnums"""
        return _PySpin.IEnumerationT_DeviceClockSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceClockSelectorEnums const

        """
        return _PySpin.IEnumerationT_DeviceClockSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceClockSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceClockSelectorEnums in _PySpin:
_PySpin.IEnumerationT_DeviceClockSelectorEnums_swigregister(IEnumerationT_DeviceClockSelectorEnums)

class IEnumerationT_DeviceSerialPortSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceSerialPortSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceSerialPortSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceSerialPortSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceSerialPortSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceSerialPortSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceSerialPortSelectorEnums"""
        return _PySpin.IEnumerationT_DeviceSerialPortSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceSerialPortSelectorEnums const

        """
        return _PySpin.IEnumerationT_DeviceSerialPortSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceSerialPortSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceSerialPortSelectorEnums in _PySpin:
_PySpin.IEnumerationT_DeviceSerialPortSelectorEnums_swigregister(IEnumerationT_DeviceSerialPortSelectorEnums)

class IEnumerationT_DeviceSerialPortBaudRateEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceSerialPortBaudRateEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceSerialPortBaudRateEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceSerialPortBaudRateEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceSerialPortBaudRateEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceSerialPortBaudRateEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceSerialPortBaudRateEnums"""
        return _PySpin.IEnumerationT_DeviceSerialPortBaudRateEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceSerialPortBaudRateEnums const

        """
        return _PySpin.IEnumerationT_DeviceSerialPortBaudRateEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceSerialPortBaudRateEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceSerialPortBaudRateEnums in _PySpin:
_PySpin.IEnumerationT_DeviceSerialPortBaudRateEnums_swigregister(IEnumerationT_DeviceSerialPortBaudRateEnums)

class IEnumerationT_SensorTapsEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SensorTapsEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SensorTapsEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SensorTapsEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SensorTapsEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SensorTapsEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SensorTapsEnums"""
        return _PySpin.IEnumerationT_SensorTapsEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SensorTapsEnums const

        """
        return _PySpin.IEnumerationT_SensorTapsEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SensorTapsEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SensorTapsEnums in _PySpin:
_PySpin.IEnumerationT_SensorTapsEnums_swigregister(IEnumerationT_SensorTapsEnums)

class IEnumerationT_SensorDigitizationTapsEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SensorDigitizationTapsEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SensorDigitizationTapsEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SensorDigitizationTapsEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SensorDigitizationTapsEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SensorDigitizationTapsEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SensorDigitizationTapsEnums"""
        return _PySpin.IEnumerationT_SensorDigitizationTapsEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SensorDigitizationTapsEnums const

        """
        return _PySpin.IEnumerationT_SensorDigitizationTapsEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SensorDigitizationTapsEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SensorDigitizationTapsEnums in _PySpin:
_PySpin.IEnumerationT_SensorDigitizationTapsEnums_swigregister(IEnumerationT_SensorDigitizationTapsEnums)

class IEnumerationT_RegionSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< RegionSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::RegionSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_RegionSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::RegionSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RegionSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::RegionSelectorEnums"""
        return _PySpin.IEnumerationT_RegionSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::RegionSelectorEnums const

        """
        return _PySpin.IEnumerationT_RegionSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RegionSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_RegionSelectorEnums in _PySpin:
_PySpin.IEnumerationT_RegionSelectorEnums_swigregister(IEnumerationT_RegionSelectorEnums)

class IEnumerationT_RegionModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< RegionModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::RegionModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_RegionModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::RegionModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RegionModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::RegionModeEnums"""
        return _PySpin.IEnumerationT_RegionModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::RegionModeEnums const

        """
        return _PySpin.IEnumerationT_RegionModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RegionModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_RegionModeEnums in _PySpin:
_PySpin.IEnumerationT_RegionModeEnums_swigregister(IEnumerationT_RegionModeEnums)

class IEnumerationT_RegionDestinationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< RegionDestinationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::RegionDestinationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_RegionDestinationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::RegionDestinationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RegionDestinationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::RegionDestinationEnums"""
        return _PySpin.IEnumerationT_RegionDestinationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::RegionDestinationEnums const

        """
        return _PySpin.IEnumerationT_RegionDestinationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_RegionDestinationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_RegionDestinationEnums in _PySpin:
_PySpin.IEnumerationT_RegionDestinationEnums_swigregister(IEnumerationT_RegionDestinationEnums)

class IEnumerationT_ImageComponentSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ImageComponentSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ImageComponentSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ImageComponentSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ImageComponentSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageComponentSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ImageComponentSelectorEnums"""
        return _PySpin.IEnumerationT_ImageComponentSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ImageComponentSelectorEnums const

        """
        return _PySpin.IEnumerationT_ImageComponentSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageComponentSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ImageComponentSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ImageComponentSelectorEnums_swigregister(IEnumerationT_ImageComponentSelectorEnums)

class IEnumerationT_PixelFormatInfoSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< PixelFormatInfoSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::PixelFormatInfoSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_PixelFormatInfoSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::PixelFormatInfoSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelFormatInfoSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::PixelFormatInfoSelectorEnums"""
        return _PySpin.IEnumerationT_PixelFormatInfoSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::PixelFormatInfoSelectorEnums const

        """
        return _PySpin.IEnumerationT_PixelFormatInfoSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_PixelFormatInfoSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_PixelFormatInfoSelectorEnums in _PySpin:
_PySpin.IEnumerationT_PixelFormatInfoSelectorEnums_swigregister(IEnumerationT_PixelFormatInfoSelectorEnums)

class IEnumerationT_DeinterlacingEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeinterlacingEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeinterlacingEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeinterlacingEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeinterlacingEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeinterlacingEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeinterlacingEnums"""
        return _PySpin.IEnumerationT_DeinterlacingEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeinterlacingEnums const

        """
        return _PySpin.IEnumerationT_DeinterlacingEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeinterlacingEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeinterlacingEnums in _PySpin:
_PySpin.IEnumerationT_DeinterlacingEnums_swigregister(IEnumerationT_DeinterlacingEnums)

class IEnumerationT_ImageCompressionRateOptionEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ImageCompressionRateOptionEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ImageCompressionRateOptionEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionRateOptionEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ImageCompressionRateOptionEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionRateOptionEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ImageCompressionRateOptionEnums"""
        return _PySpin.IEnumerationT_ImageCompressionRateOptionEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ImageCompressionRateOptionEnums const

        """
        return _PySpin.IEnumerationT_ImageCompressionRateOptionEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionRateOptionEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ImageCompressionRateOptionEnums in _PySpin:
_PySpin.IEnumerationT_ImageCompressionRateOptionEnums_swigregister(IEnumerationT_ImageCompressionRateOptionEnums)

class IEnumerationT_ImageCompressionJPEGFormatOptionEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ImageCompressionJPEGFormatOptionEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ImageCompressionJPEGFormatOptionEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionJPEGFormatOptionEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ImageCompressionJPEGFormatOptionEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionJPEGFormatOptionEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ImageCompressionJPEGFormatOptionEnums"""
        return _PySpin.IEnumerationT_ImageCompressionJPEGFormatOptionEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ImageCompressionJPEGFormatOptionEnums const

        """
        return _PySpin.IEnumerationT_ImageCompressionJPEGFormatOptionEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ImageCompressionJPEGFormatOptionEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ImageCompressionJPEGFormatOptionEnums in _PySpin:
_PySpin.IEnumerationT_ImageCompressionJPEGFormatOptionEnums_swigregister(IEnumerationT_ImageCompressionJPEGFormatOptionEnums)

class IEnumerationT_AcquisitionStatusSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< AcquisitionStatusSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::AcquisitionStatusSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_AcquisitionStatusSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::AcquisitionStatusSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AcquisitionStatusSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::AcquisitionStatusSelectorEnums"""
        return _PySpin.IEnumerationT_AcquisitionStatusSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::AcquisitionStatusSelectorEnums const

        """
        return _PySpin.IEnumerationT_AcquisitionStatusSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_AcquisitionStatusSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_AcquisitionStatusSelectorEnums in _PySpin:
_PySpin.IEnumerationT_AcquisitionStatusSelectorEnums_swigregister(IEnumerationT_AcquisitionStatusSelectorEnums)

class IEnumerationT_ExposureTimeModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ExposureTimeModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ExposureTimeModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ExposureTimeModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ExposureTimeModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureTimeModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ExposureTimeModeEnums"""
        return _PySpin.IEnumerationT_ExposureTimeModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ExposureTimeModeEnums const

        """
        return _PySpin.IEnumerationT_ExposureTimeModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureTimeModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ExposureTimeModeEnums in _PySpin:
_PySpin.IEnumerationT_ExposureTimeModeEnums_swigregister(IEnumerationT_ExposureTimeModeEnums)

class IEnumerationT_ExposureTimeSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ExposureTimeSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ExposureTimeSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ExposureTimeSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ExposureTimeSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureTimeSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ExposureTimeSelectorEnums"""
        return _PySpin.IEnumerationT_ExposureTimeSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ExposureTimeSelectorEnums const

        """
        return _PySpin.IEnumerationT_ExposureTimeSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ExposureTimeSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ExposureTimeSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ExposureTimeSelectorEnums_swigregister(IEnumerationT_ExposureTimeSelectorEnums)

class IEnumerationT_GainAutoBalanceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GainAutoBalanceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GainAutoBalanceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GainAutoBalanceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GainAutoBalanceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GainAutoBalanceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GainAutoBalanceEnums"""
        return _PySpin.IEnumerationT_GainAutoBalanceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GainAutoBalanceEnums const

        """
        return _PySpin.IEnumerationT_GainAutoBalanceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GainAutoBalanceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GainAutoBalanceEnums in _PySpin:
_PySpin.IEnumerationT_GainAutoBalanceEnums_swigregister(IEnumerationT_GainAutoBalanceEnums)

class IEnumerationT_BlackLevelAutoEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BlackLevelAutoEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BlackLevelAutoEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BlackLevelAutoEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BlackLevelAutoEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BlackLevelAutoEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BlackLevelAutoEnums"""
        return _PySpin.IEnumerationT_BlackLevelAutoEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BlackLevelAutoEnums const

        """
        return _PySpin.IEnumerationT_BlackLevelAutoEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BlackLevelAutoEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BlackLevelAutoEnums in _PySpin:
_PySpin.IEnumerationT_BlackLevelAutoEnums_swigregister(IEnumerationT_BlackLevelAutoEnums)

class IEnumerationT_BlackLevelAutoBalanceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< BlackLevelAutoBalanceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::BlackLevelAutoBalanceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_BlackLevelAutoBalanceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::BlackLevelAutoBalanceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BlackLevelAutoBalanceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::BlackLevelAutoBalanceEnums"""
        return _PySpin.IEnumerationT_BlackLevelAutoBalanceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::BlackLevelAutoBalanceEnums const

        """
        return _PySpin.IEnumerationT_BlackLevelAutoBalanceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_BlackLevelAutoBalanceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_BlackLevelAutoBalanceEnums in _PySpin:
_PySpin.IEnumerationT_BlackLevelAutoBalanceEnums_swigregister(IEnumerationT_BlackLevelAutoBalanceEnums)

class IEnumerationT_WhiteClipSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< WhiteClipSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::WhiteClipSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_WhiteClipSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::WhiteClipSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_WhiteClipSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::WhiteClipSelectorEnums"""
        return _PySpin.IEnumerationT_WhiteClipSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::WhiteClipSelectorEnums const

        """
        return _PySpin.IEnumerationT_WhiteClipSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_WhiteClipSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_WhiteClipSelectorEnums in _PySpin:
_PySpin.IEnumerationT_WhiteClipSelectorEnums_swigregister(IEnumerationT_WhiteClipSelectorEnums)

class IEnumerationT_TimerSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TimerSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TimerSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TimerSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TimerSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TimerSelectorEnums"""
        return _PySpin.IEnumerationT_TimerSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TimerSelectorEnums const

        """
        return _PySpin.IEnumerationT_TimerSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TimerSelectorEnums in _PySpin:
_PySpin.IEnumerationT_TimerSelectorEnums_swigregister(IEnumerationT_TimerSelectorEnums)

class IEnumerationT_TimerStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TimerStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TimerStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TimerStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TimerStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TimerStatusEnums"""
        return _PySpin.IEnumerationT_TimerStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TimerStatusEnums const

        """
        return _PySpin.IEnumerationT_TimerStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TimerStatusEnums in _PySpin:
_PySpin.IEnumerationT_TimerStatusEnums_swigregister(IEnumerationT_TimerStatusEnums)

class IEnumerationT_TimerTriggerSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TimerTriggerSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TimerTriggerSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TimerTriggerSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TimerTriggerSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerTriggerSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TimerTriggerSourceEnums"""
        return _PySpin.IEnumerationT_TimerTriggerSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TimerTriggerSourceEnums const

        """
        return _PySpin.IEnumerationT_TimerTriggerSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerTriggerSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TimerTriggerSourceEnums in _PySpin:
_PySpin.IEnumerationT_TimerTriggerSourceEnums_swigregister(IEnumerationT_TimerTriggerSourceEnums)

class IEnumerationT_TimerTriggerActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TimerTriggerActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TimerTriggerActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TimerTriggerActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TimerTriggerActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerTriggerActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TimerTriggerActivationEnums"""
        return _PySpin.IEnumerationT_TimerTriggerActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TimerTriggerActivationEnums const

        """
        return _PySpin.IEnumerationT_TimerTriggerActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TimerTriggerActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TimerTriggerActivationEnums in _PySpin:
_PySpin.IEnumerationT_TimerTriggerActivationEnums_swigregister(IEnumerationT_TimerTriggerActivationEnums)

class IEnumerationT_EncoderSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderSelectorEnums"""
        return _PySpin.IEnumerationT_EncoderSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderSelectorEnums const

        """
        return _PySpin.IEnumerationT_EncoderSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderSelectorEnums in _PySpin:
_PySpin.IEnumerationT_EncoderSelectorEnums_swigregister(IEnumerationT_EncoderSelectorEnums)

class IEnumerationT_EncoderSourceAEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderSourceAEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderSourceAEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderSourceAEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderSourceAEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderSourceAEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderSourceAEnums"""
        return _PySpin.IEnumerationT_EncoderSourceAEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderSourceAEnums const

        """
        return _PySpin.IEnumerationT_EncoderSourceAEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderSourceAEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderSourceAEnums in _PySpin:
_PySpin.IEnumerationT_EncoderSourceAEnums_swigregister(IEnumerationT_EncoderSourceAEnums)

class IEnumerationT_EncoderSourceBEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderSourceBEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderSourceBEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderSourceBEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderSourceBEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderSourceBEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderSourceBEnums"""
        return _PySpin.IEnumerationT_EncoderSourceBEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderSourceBEnums const

        """
        return _PySpin.IEnumerationT_EncoderSourceBEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderSourceBEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderSourceBEnums in _PySpin:
_PySpin.IEnumerationT_EncoderSourceBEnums_swigregister(IEnumerationT_EncoderSourceBEnums)

class IEnumerationT_EncoderModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderModeEnums"""
        return _PySpin.IEnumerationT_EncoderModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderModeEnums const

        """
        return _PySpin.IEnumerationT_EncoderModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderModeEnums in _PySpin:
_PySpin.IEnumerationT_EncoderModeEnums_swigregister(IEnumerationT_EncoderModeEnums)

class IEnumerationT_EncoderOutputModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderOutputModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderOutputModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderOutputModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderOutputModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderOutputModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderOutputModeEnums"""
        return _PySpin.IEnumerationT_EncoderOutputModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderOutputModeEnums const

        """
        return _PySpin.IEnumerationT_EncoderOutputModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderOutputModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderOutputModeEnums in _PySpin:
_PySpin.IEnumerationT_EncoderOutputModeEnums_swigregister(IEnumerationT_EncoderOutputModeEnums)

class IEnumerationT_EncoderStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderStatusEnums"""
        return _PySpin.IEnumerationT_EncoderStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderStatusEnums const

        """
        return _PySpin.IEnumerationT_EncoderStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderStatusEnums in _PySpin:
_PySpin.IEnumerationT_EncoderStatusEnums_swigregister(IEnumerationT_EncoderStatusEnums)

class IEnumerationT_EncoderResetSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderResetSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderResetSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderResetSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderResetSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderResetSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderResetSourceEnums"""
        return _PySpin.IEnumerationT_EncoderResetSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderResetSourceEnums const

        """
        return _PySpin.IEnumerationT_EncoderResetSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderResetSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderResetSourceEnums in _PySpin:
_PySpin.IEnumerationT_EncoderResetSourceEnums_swigregister(IEnumerationT_EncoderResetSourceEnums)

class IEnumerationT_EncoderResetActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< EncoderResetActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::EncoderResetActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_EncoderResetActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::EncoderResetActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderResetActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::EncoderResetActivationEnums"""
        return _PySpin.IEnumerationT_EncoderResetActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::EncoderResetActivationEnums const

        """
        return _PySpin.IEnumerationT_EncoderResetActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_EncoderResetActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_EncoderResetActivationEnums in _PySpin:
_PySpin.IEnumerationT_EncoderResetActivationEnums_swigregister(IEnumerationT_EncoderResetActivationEnums)

class IEnumerationT_SoftwareSignalSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SoftwareSignalSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SoftwareSignalSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SoftwareSignalSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SoftwareSignalSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SoftwareSignalSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SoftwareSignalSelectorEnums"""
        return _PySpin.IEnumerationT_SoftwareSignalSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SoftwareSignalSelectorEnums const

        """
        return _PySpin.IEnumerationT_SoftwareSignalSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SoftwareSignalSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SoftwareSignalSelectorEnums in _PySpin:
_PySpin.IEnumerationT_SoftwareSignalSelectorEnums_swigregister(IEnumerationT_SoftwareSignalSelectorEnums)

class IEnumerationT_ActionUnconditionalModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ActionUnconditionalModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ActionUnconditionalModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ActionUnconditionalModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ActionUnconditionalModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ActionUnconditionalModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ActionUnconditionalModeEnums"""
        return _PySpin.IEnumerationT_ActionUnconditionalModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ActionUnconditionalModeEnums const

        """
        return _PySpin.IEnumerationT_ActionUnconditionalModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ActionUnconditionalModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ActionUnconditionalModeEnums in _PySpin:
_PySpin.IEnumerationT_ActionUnconditionalModeEnums_swigregister(IEnumerationT_ActionUnconditionalModeEnums)

class IEnumerationT_SourceSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< SourceSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::SourceSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_SourceSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::SourceSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SourceSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::SourceSelectorEnums"""
        return _PySpin.IEnumerationT_SourceSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::SourceSelectorEnums const

        """
        return _PySpin.IEnumerationT_SourceSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_SourceSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_SourceSelectorEnums in _PySpin:
_PySpin.IEnumerationT_SourceSelectorEnums_swigregister(IEnumerationT_SourceSelectorEnums)

class IEnumerationT_TransferSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferSelectorEnums"""
        return _PySpin.IEnumerationT_TransferSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferSelectorEnums const

        """
        return _PySpin.IEnumerationT_TransferSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferSelectorEnums in _PySpin:
_PySpin.IEnumerationT_TransferSelectorEnums_swigregister(IEnumerationT_TransferSelectorEnums)

class IEnumerationT_TransferTriggerSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferTriggerSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferTriggerSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferTriggerSelectorEnums"""
        return _PySpin.IEnumerationT_TransferTriggerSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerSelectorEnums const

        """
        return _PySpin.IEnumerationT_TransferTriggerSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferTriggerSelectorEnums in _PySpin:
_PySpin.IEnumerationT_TransferTriggerSelectorEnums_swigregister(IEnumerationT_TransferTriggerSelectorEnums)

class IEnumerationT_TransferTriggerModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferTriggerModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferTriggerModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferTriggerModeEnums"""
        return _PySpin.IEnumerationT_TransferTriggerModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerModeEnums const

        """
        return _PySpin.IEnumerationT_TransferTriggerModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferTriggerModeEnums in _PySpin:
_PySpin.IEnumerationT_TransferTriggerModeEnums_swigregister(IEnumerationT_TransferTriggerModeEnums)

class IEnumerationT_TransferTriggerSourceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferTriggerSourceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerSourceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerSourceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferTriggerSourceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerSourceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferTriggerSourceEnums"""
        return _PySpin.IEnumerationT_TransferTriggerSourceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerSourceEnums const

        """
        return _PySpin.IEnumerationT_TransferTriggerSourceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerSourceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferTriggerSourceEnums in _PySpin:
_PySpin.IEnumerationT_TransferTriggerSourceEnums_swigregister(IEnumerationT_TransferTriggerSourceEnums)

class IEnumerationT_TransferTriggerActivationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferTriggerActivationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerActivationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerActivationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferTriggerActivationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerActivationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferTriggerActivationEnums"""
        return _PySpin.IEnumerationT_TransferTriggerActivationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferTriggerActivationEnums const

        """
        return _PySpin.IEnumerationT_TransferTriggerActivationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferTriggerActivationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferTriggerActivationEnums in _PySpin:
_PySpin.IEnumerationT_TransferTriggerActivationEnums_swigregister(IEnumerationT_TransferTriggerActivationEnums)

class IEnumerationT_TransferStatusSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferStatusSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferStatusSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferStatusSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferStatusSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferStatusSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferStatusSelectorEnums"""
        return _PySpin.IEnumerationT_TransferStatusSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferStatusSelectorEnums const

        """
        return _PySpin.IEnumerationT_TransferStatusSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferStatusSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferStatusSelectorEnums in _PySpin:
_PySpin.IEnumerationT_TransferStatusSelectorEnums_swigregister(IEnumerationT_TransferStatusSelectorEnums)

class IEnumerationT_TransferComponentSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< TransferComponentSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::TransferComponentSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_TransferComponentSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::TransferComponentSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferComponentSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::TransferComponentSelectorEnums"""
        return _PySpin.IEnumerationT_TransferComponentSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::TransferComponentSelectorEnums const

        """
        return _PySpin.IEnumerationT_TransferComponentSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_TransferComponentSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_TransferComponentSelectorEnums in _PySpin:
_PySpin.IEnumerationT_TransferComponentSelectorEnums_swigregister(IEnumerationT_TransferComponentSelectorEnums)

class IEnumerationT_Scan3dDistanceUnitEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< Scan3dDistanceUnitEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dDistanceUnitEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_Scan3dDistanceUnitEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::Scan3dDistanceUnitEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dDistanceUnitEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::Scan3dDistanceUnitEnums"""
        return _PySpin.IEnumerationT_Scan3dDistanceUnitEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dDistanceUnitEnums const

        """
        return _PySpin.IEnumerationT_Scan3dDistanceUnitEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dDistanceUnitEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_Scan3dDistanceUnitEnums in _PySpin:
_PySpin.IEnumerationT_Scan3dDistanceUnitEnums_swigregister(IEnumerationT_Scan3dDistanceUnitEnums)

class IEnumerationT_Scan3dCoordinateSystemEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< Scan3dCoordinateSystemEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateSystemEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::Scan3dCoordinateSystemEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::Scan3dCoordinateSystemEnums"""
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateSystemEnums const

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_Scan3dCoordinateSystemEnums in _PySpin:
_PySpin.IEnumerationT_Scan3dCoordinateSystemEnums_swigregister(IEnumerationT_Scan3dCoordinateSystemEnums)

class IEnumerationT_Scan3dOutputModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< Scan3dOutputModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dOutputModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_Scan3dOutputModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::Scan3dOutputModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dOutputModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::Scan3dOutputModeEnums"""
        return _PySpin.IEnumerationT_Scan3dOutputModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dOutputModeEnums const

        """
        return _PySpin.IEnumerationT_Scan3dOutputModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dOutputModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_Scan3dOutputModeEnums in _PySpin:
_PySpin.IEnumerationT_Scan3dOutputModeEnums_swigregister(IEnumerationT_Scan3dOutputModeEnums)

class IEnumerationT_Scan3dCoordinateSystemReferenceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< Scan3dCoordinateSystemReferenceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateSystemReferenceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemReferenceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::Scan3dCoordinateSystemReferenceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemReferenceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::Scan3dCoordinateSystemReferenceEnums"""
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemReferenceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateSystemReferenceEnums const

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemReferenceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSystemReferenceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_Scan3dCoordinateSystemReferenceEnums in _PySpin:
_PySpin.IEnumerationT_Scan3dCoordinateSystemReferenceEnums_swigregister(IEnumerationT_Scan3dCoordinateSystemReferenceEnums)

class IEnumerationT_Scan3dCoordinateSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< Scan3dCoordinateSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::Scan3dCoordinateSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::Scan3dCoordinateSelectorEnums"""
        return _PySpin.IEnumerationT_Scan3dCoordinateSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateSelectorEnums const

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_Scan3dCoordinateSelectorEnums in _PySpin:
_PySpin.IEnumerationT_Scan3dCoordinateSelectorEnums_swigregister(IEnumerationT_Scan3dCoordinateSelectorEnums)

class IEnumerationT_Scan3dCoordinateTransformSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< Scan3dCoordinateTransformSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateTransformSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateTransformSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::Scan3dCoordinateTransformSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateTransformSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::Scan3dCoordinateTransformSelectorEnums"""
        return _PySpin.IEnumerationT_Scan3dCoordinateTransformSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateTransformSelectorEnums const

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateTransformSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateTransformSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_Scan3dCoordinateTransformSelectorEnums in _PySpin:
_PySpin.IEnumerationT_Scan3dCoordinateTransformSelectorEnums_swigregister(IEnumerationT_Scan3dCoordinateTransformSelectorEnums)

class IEnumerationT_Scan3dCoordinateReferenceSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< Scan3dCoordinateReferenceSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateReferenceSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateReferenceSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::Scan3dCoordinateReferenceSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateReferenceSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::Scan3dCoordinateReferenceSelectorEnums"""
        return _PySpin.IEnumerationT_Scan3dCoordinateReferenceSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::Scan3dCoordinateReferenceSelectorEnums const

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateReferenceSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_Scan3dCoordinateReferenceSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_Scan3dCoordinateReferenceSelectorEnums in _PySpin:
_PySpin.IEnumerationT_Scan3dCoordinateReferenceSelectorEnums_swigregister(IEnumerationT_Scan3dCoordinateReferenceSelectorEnums)

class IEnumerationT_ChunkImageComponentEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkImageComponentEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkImageComponentEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkImageComponentEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkImageComponentEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkImageComponentEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkImageComponentEnums"""
        return _PySpin.IEnumerationT_ChunkImageComponentEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkImageComponentEnums const

        """
        return _PySpin.IEnumerationT_ChunkImageComponentEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkImageComponentEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkImageComponentEnums in _PySpin:
_PySpin.IEnumerationT_ChunkImageComponentEnums_swigregister(IEnumerationT_ChunkImageComponentEnums)

class IEnumerationT_ChunkCounterSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkCounterSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkCounterSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkCounterSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkCounterSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkCounterSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkCounterSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkCounterSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkCounterSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkCounterSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkCounterSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkCounterSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkCounterSelectorEnums_swigregister(IEnumerationT_ChunkCounterSelectorEnums)

class IEnumerationT_ChunkTimerSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkTimerSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkTimerSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkTimerSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkTimerSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkTimerSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkTimerSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkTimerSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkTimerSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkTimerSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkTimerSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkTimerSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkTimerSelectorEnums_swigregister(IEnumerationT_ChunkTimerSelectorEnums)

class IEnumerationT_ChunkEncoderSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkEncoderSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkEncoderSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkEncoderSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkEncoderSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkEncoderSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkEncoderSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkEncoderSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkEncoderSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkEncoderSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkEncoderSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkEncoderSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkEncoderSelectorEnums_swigregister(IEnumerationT_ChunkEncoderSelectorEnums)

class IEnumerationT_ChunkEncoderStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkEncoderStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkEncoderStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkEncoderStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkEncoderStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkEncoderStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkEncoderStatusEnums"""
        return _PySpin.IEnumerationT_ChunkEncoderStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkEncoderStatusEnums const

        """
        return _PySpin.IEnumerationT_ChunkEncoderStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkEncoderStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkEncoderStatusEnums in _PySpin:
_PySpin.IEnumerationT_ChunkEncoderStatusEnums_swigregister(IEnumerationT_ChunkEncoderStatusEnums)

class IEnumerationT_ChunkExposureTimeSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkExposureTimeSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkExposureTimeSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkExposureTimeSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkExposureTimeSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkExposureTimeSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkExposureTimeSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkExposureTimeSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkExposureTimeSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkExposureTimeSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkExposureTimeSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkExposureTimeSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkExposureTimeSelectorEnums_swigregister(IEnumerationT_ChunkExposureTimeSelectorEnums)

class IEnumerationT_ChunkSourceIDEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkSourceIDEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkSourceIDEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkSourceIDEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkSourceIDEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkSourceIDEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkSourceIDEnums"""
        return _PySpin.IEnumerationT_ChunkSourceIDEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkSourceIDEnums const

        """
        return _PySpin.IEnumerationT_ChunkSourceIDEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkSourceIDEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkSourceIDEnums in _PySpin:
_PySpin.IEnumerationT_ChunkSourceIDEnums_swigregister(IEnumerationT_ChunkSourceIDEnums)

class IEnumerationT_ChunkRegionIDEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkRegionIDEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkRegionIDEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkRegionIDEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkRegionIDEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkRegionIDEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkRegionIDEnums"""
        return _PySpin.IEnumerationT_ChunkRegionIDEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkRegionIDEnums const

        """
        return _PySpin.IEnumerationT_ChunkRegionIDEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkRegionIDEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkRegionIDEnums in _PySpin:
_PySpin.IEnumerationT_ChunkRegionIDEnums_swigregister(IEnumerationT_ChunkRegionIDEnums)

class IEnumerationT_ChunkTransferStreamIDEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkTransferStreamIDEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkTransferStreamIDEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkTransferStreamIDEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkTransferStreamIDEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkTransferStreamIDEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkTransferStreamIDEnums"""
        return _PySpin.IEnumerationT_ChunkTransferStreamIDEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkTransferStreamIDEnums const

        """
        return _PySpin.IEnumerationT_ChunkTransferStreamIDEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkTransferStreamIDEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkTransferStreamIDEnums in _PySpin:
_PySpin.IEnumerationT_ChunkTransferStreamIDEnums_swigregister(IEnumerationT_ChunkTransferStreamIDEnums)

class IEnumerationT_ChunkScan3dDistanceUnitEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkScan3dDistanceUnitEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dDistanceUnitEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dDistanceUnitEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkScan3dDistanceUnitEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dDistanceUnitEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkScan3dDistanceUnitEnums"""
        return _PySpin.IEnumerationT_ChunkScan3dDistanceUnitEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dDistanceUnitEnums const

        """
        return _PySpin.IEnumerationT_ChunkScan3dDistanceUnitEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dDistanceUnitEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkScan3dDistanceUnitEnums in _PySpin:
_PySpin.IEnumerationT_ChunkScan3dDistanceUnitEnums_swigregister(IEnumerationT_ChunkScan3dDistanceUnitEnums)

class IEnumerationT_ChunkScan3dOutputModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkScan3dOutputModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dOutputModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dOutputModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkScan3dOutputModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dOutputModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkScan3dOutputModeEnums"""
        return _PySpin.IEnumerationT_ChunkScan3dOutputModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dOutputModeEnums const

        """
        return _PySpin.IEnumerationT_ChunkScan3dOutputModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dOutputModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkScan3dOutputModeEnums in _PySpin:
_PySpin.IEnumerationT_ChunkScan3dOutputModeEnums_swigregister(IEnumerationT_ChunkScan3dOutputModeEnums)

class IEnumerationT_ChunkScan3dCoordinateSystemEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkScan3dCoordinateSystemEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateSystemEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkScan3dCoordinateSystemEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkScan3dCoordinateSystemEnums"""
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateSystemEnums const

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkScan3dCoordinateSystemEnums in _PySpin:
_PySpin.IEnumerationT_ChunkScan3dCoordinateSystemEnums_swigregister(IEnumerationT_ChunkScan3dCoordinateSystemEnums)

class IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkScan3dCoordinateSystemReferenceEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateSystemReferenceEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkScan3dCoordinateSystemReferenceEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkScan3dCoordinateSystemReferenceEnums"""
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateSystemReferenceEnums const

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums in _PySpin:
_PySpin.IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums_swigregister(IEnumerationT_ChunkScan3dCoordinateSystemReferenceEnums)

class IEnumerationT_ChunkScan3dCoordinateSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkScan3dCoordinateSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkScan3dCoordinateSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkScan3dCoordinateSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkScan3dCoordinateSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkScan3dCoordinateSelectorEnums_swigregister(IEnumerationT_ChunkScan3dCoordinateSelectorEnums)

class IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkScan3dCoordinateTransformSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateTransformSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums_swigregister(IEnumerationT_ChunkScan3dCoordinateTransformSelectorEnums)

class IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ChunkScan3dCoordinateReferenceSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums"""
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ChunkScan3dCoordinateReferenceSelectorEnums const

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums in _PySpin:
_PySpin.IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums_swigregister(IEnumerationT_ChunkScan3dCoordinateReferenceSelectorEnums)

class IEnumerationT_DeviceTapGeometryEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< DeviceTapGeometryEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTapGeometryEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_DeviceTapGeometryEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::DeviceTapGeometryEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTapGeometryEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::DeviceTapGeometryEnums"""
        return _PySpin.IEnumerationT_DeviceTapGeometryEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::DeviceTapGeometryEnums const

        """
        return _PySpin.IEnumerationT_DeviceTapGeometryEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_DeviceTapGeometryEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_DeviceTapGeometryEnums in _PySpin:
_PySpin.IEnumerationT_DeviceTapGeometryEnums_swigregister(IEnumerationT_DeviceTapGeometryEnums)

class IEnumerationT_GevPhysicalLinkConfigurationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevPhysicalLinkConfigurationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevPhysicalLinkConfigurationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevPhysicalLinkConfigurationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevPhysicalLinkConfigurationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevPhysicalLinkConfigurationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevPhysicalLinkConfigurationEnums"""
        return _PySpin.IEnumerationT_GevPhysicalLinkConfigurationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevPhysicalLinkConfigurationEnums const

        """
        return _PySpin.IEnumerationT_GevPhysicalLinkConfigurationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevPhysicalLinkConfigurationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevPhysicalLinkConfigurationEnums in _PySpin:
_PySpin.IEnumerationT_GevPhysicalLinkConfigurationEnums_swigregister(IEnumerationT_GevPhysicalLinkConfigurationEnums)

class IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevCurrentPhysicalLinkConfigurationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevCurrentPhysicalLinkConfigurationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevCurrentPhysicalLinkConfigurationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevCurrentPhysicalLinkConfigurationEnums"""
        return _PySpin.IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevCurrentPhysicalLinkConfigurationEnums const

        """
        return _PySpin.IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums in _PySpin:
_PySpin.IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums_swigregister(IEnumerationT_GevCurrentPhysicalLinkConfigurationEnums)

class IEnumerationT_GevIPConfigurationStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevIPConfigurationStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevIPConfigurationStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevIPConfigurationStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevIPConfigurationStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIPConfigurationStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevIPConfigurationStatusEnums"""
        return _PySpin.IEnumerationT_GevIPConfigurationStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevIPConfigurationStatusEnums const

        """
        return _PySpin.IEnumerationT_GevIPConfigurationStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevIPConfigurationStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevIPConfigurationStatusEnums in _PySpin:
_PySpin.IEnumerationT_GevIPConfigurationStatusEnums_swigregister(IEnumerationT_GevIPConfigurationStatusEnums)

class IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevGVCPExtendedStatusCodesSelectorEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevGVCPExtendedStatusCodesSelectorEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevGVCPExtendedStatusCodesSelectorEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevGVCPExtendedStatusCodesSelectorEnums"""
        return _PySpin.IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevGVCPExtendedStatusCodesSelectorEnums const

        """
        return _PySpin.IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums in _PySpin:
_PySpin.IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums_swigregister(IEnumerationT_GevGVCPExtendedStatusCodesSelectorEnums)

class IEnumerationT_GevGVSPExtendedIDModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< GevGVSPExtendedIDModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::GevGVSPExtendedIDModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_GevGVSPExtendedIDModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::GevGVSPExtendedIDModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevGVSPExtendedIDModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::GevGVSPExtendedIDModeEnums"""
        return _PySpin.IEnumerationT_GevGVSPExtendedIDModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::GevGVSPExtendedIDModeEnums const

        """
        return _PySpin.IEnumerationT_GevGVSPExtendedIDModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_GevGVSPExtendedIDModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_GevGVSPExtendedIDModeEnums in _PySpin:
_PySpin.IEnumerationT_GevGVSPExtendedIDModeEnums_swigregister(IEnumerationT_GevGVSPExtendedIDModeEnums)

class IEnumerationT_ClConfigurationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ClConfigurationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ClConfigurationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ClConfigurationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ClConfigurationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ClConfigurationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ClConfigurationEnums"""
        return _PySpin.IEnumerationT_ClConfigurationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ClConfigurationEnums const

        """
        return _PySpin.IEnumerationT_ClConfigurationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ClConfigurationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ClConfigurationEnums in _PySpin:
_PySpin.IEnumerationT_ClConfigurationEnums_swigregister(IEnumerationT_ClConfigurationEnums)

class IEnumerationT_ClTimeSlotsCountEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< ClTimeSlotsCountEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::ClTimeSlotsCountEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_ClTimeSlotsCountEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::ClTimeSlotsCountEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ClTimeSlotsCountEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::ClTimeSlotsCountEnums"""
        return _PySpin.IEnumerationT_ClTimeSlotsCountEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::ClTimeSlotsCountEnums const

        """
        return _PySpin.IEnumerationT_ClTimeSlotsCountEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_ClTimeSlotsCountEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_ClTimeSlotsCountEnums in _PySpin:
_PySpin.IEnumerationT_ClTimeSlotsCountEnums_swigregister(IEnumerationT_ClTimeSlotsCountEnums)

class IEnumerationT_CxpLinkConfigurationStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CxpLinkConfigurationStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CxpLinkConfigurationStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CxpLinkConfigurationStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CxpLinkConfigurationStatusEnums"""
        return _PySpin.IEnumerationT_CxpLinkConfigurationStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CxpLinkConfigurationStatusEnums const

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CxpLinkConfigurationStatusEnums in _PySpin:
_PySpin.IEnumerationT_CxpLinkConfigurationStatusEnums_swigregister(IEnumerationT_CxpLinkConfigurationStatusEnums)

class IEnumerationT_CxpLinkConfigurationPreferredEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CxpLinkConfigurationPreferredEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CxpLinkConfigurationPreferredEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationPreferredEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CxpLinkConfigurationPreferredEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationPreferredEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CxpLinkConfigurationPreferredEnums"""
        return _PySpin.IEnumerationT_CxpLinkConfigurationPreferredEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CxpLinkConfigurationPreferredEnums const

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationPreferredEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationPreferredEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CxpLinkConfigurationPreferredEnums in _PySpin:
_PySpin.IEnumerationT_CxpLinkConfigurationPreferredEnums_swigregister(IEnumerationT_CxpLinkConfigurationPreferredEnums)

class IEnumerationT_CxpLinkConfigurationEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CxpLinkConfigurationEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CxpLinkConfigurationEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CxpLinkConfigurationEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CxpLinkConfigurationEnums"""
        return _PySpin.IEnumerationT_CxpLinkConfigurationEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CxpLinkConfigurationEnums const

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpLinkConfigurationEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CxpLinkConfigurationEnums in _PySpin:
_PySpin.IEnumerationT_CxpLinkConfigurationEnums_swigregister(IEnumerationT_CxpLinkConfigurationEnums)

class IEnumerationT_CxpConnectionTestModeEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CxpConnectionTestModeEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CxpConnectionTestModeEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CxpConnectionTestModeEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CxpConnectionTestModeEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpConnectionTestModeEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CxpConnectionTestModeEnums"""
        return _PySpin.IEnumerationT_CxpConnectionTestModeEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CxpConnectionTestModeEnums const

        """
        return _PySpin.IEnumerationT_CxpConnectionTestModeEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpConnectionTestModeEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CxpConnectionTestModeEnums in _PySpin:
_PySpin.IEnumerationT_CxpConnectionTestModeEnums_swigregister(IEnumerationT_CxpConnectionTestModeEnums)

class IEnumerationT_CxpPoCxpStatusEnums(IEnumeration, IEnumReference):
    r"""Proxy of C++ Spinnaker::GenApi::IEnumerationT< CxpPoCxpStatusEnums > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetValue(self, Value, Verify=True):
        r"""
        SetValue(self, Value, Verify=True)

        Parameters
        ----------
        Value: enum Spinnaker::CxpPoCxpStatusEnums
        Verify: bool

        """
        return _PySpin.IEnumerationT_CxpPoCxpStatusEnums_SetValue(self, Value, Verify)

    def GetValue(self, Verify=False, IgnoreCache=False):
        r"""
        GetValue(self, Verify=False, IgnoreCache=False) -> Spinnaker::CxpPoCxpStatusEnums

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpPoCxpStatusEnums_GetValue(self, Verify, IgnoreCache)

    def __call__(self):
        r"""__call__(self) -> Spinnaker::CxpPoCxpStatusEnums"""
        return _PySpin.IEnumerationT_CxpPoCxpStatusEnums___call__(self)

    def GetEntry(self, *args):
        r"""
        GetEntry(self, IntValue) -> IEnumEntry

        Parameters
        ----------
        IntValue: int64_t const

        GetEntry(self, Value) -> IEnumEntry

        Parameters
        ----------
        Value: enum Spinnaker::CxpPoCxpStatusEnums const

        """
        return _PySpin.IEnumerationT_CxpPoCxpStatusEnums_GetEntry(self, *args)

    def GetCurrentEntry(self, Verify=False, IgnoreCache=False):
        r"""
        GetCurrentEntry(self, Verify=False, IgnoreCache=False) -> IEnumEntry

        Parameters
        ----------
        Verify: bool
        IgnoreCache: bool

        """
        return _PySpin.IEnumerationT_CxpPoCxpStatusEnums_GetCurrentEntry(self, Verify, IgnoreCache)

# Register IEnumerationT_CxpPoCxpStatusEnums in _PySpin:
_PySpin.IEnumerationT_CxpPoCxpStatusEnums_swigregister(IEnumerationT_CxpPoCxpStatusEnums)

class Camera(CameraBase):
    r"""


    The camera object class.

    C++ includes: Camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_Camera

    def Init(self):
        r"""
        Init(self)
        void
        Spinnaker::Camera::Init() 
        """
        return _PySpin.Camera_Init(self)
    LUTIndex = property(_PySpin.Camera_LUTIndex_get, _PySpin.Camera_LUTIndex_set, doc=r"""LUTIndex""")
    LUTEnable = property(_PySpin.Camera_LUTEnable_get, _PySpin.Camera_LUTEnable_set, doc=r"""LUTEnable""")
    LUTValue = property(_PySpin.Camera_LUTValue_get, _PySpin.Camera_LUTValue_set, doc=r"""LUTValue""")
    LUTSelector = property(_PySpin.Camera_LUTSelector_get, _PySpin.Camera_LUTSelector_set, doc=r"""LUTSelector""")
    ExposureTime = property(_PySpin.Camera_ExposureTime_get, _PySpin.Camera_ExposureTime_set, doc=r"""ExposureTime""")
    AcquisitionStop = property(_PySpin.Camera_AcquisitionStop_get, _PySpin.Camera_AcquisitionStop_set, doc=r"""AcquisitionStop""")
    AcquisitionResultingFrameRate = property(_PySpin.Camera_AcquisitionResultingFrameRate_get, _PySpin.Camera_AcquisitionResultingFrameRate_set, doc=r"""AcquisitionResultingFrameRate""")
    AcquisitionLineRate = property(_PySpin.Camera_AcquisitionLineRate_get, _PySpin.Camera_AcquisitionLineRate_set, doc=r"""AcquisitionLineRate""")
    AcquisitionStart = property(_PySpin.Camera_AcquisitionStart_get, _PySpin.Camera_AcquisitionStart_set, doc=r"""AcquisitionStart""")
    TriggerSoftware = property(_PySpin.Camera_TriggerSoftware_get, _PySpin.Camera_TriggerSoftware_set, doc=r"""TriggerSoftware""")
    ExposureMode = property(_PySpin.Camera_ExposureMode_get, _PySpin.Camera_ExposureMode_set, doc=r"""ExposureMode""")
    AcquisitionMode = property(_PySpin.Camera_AcquisitionMode_get, _PySpin.Camera_AcquisitionMode_set, doc=r"""AcquisitionMode""")
    AcquisitionFrameCount = property(_PySpin.Camera_AcquisitionFrameCount_get, _PySpin.Camera_AcquisitionFrameCount_set, doc=r"""AcquisitionFrameCount""")
    TriggerSource = property(_PySpin.Camera_TriggerSource_get, _PySpin.Camera_TriggerSource_set, doc=r"""TriggerSource""")
    TriggerActivation = property(_PySpin.Camera_TriggerActivation_get, _PySpin.Camera_TriggerActivation_set, doc=r"""TriggerActivation""")
    SensorShutterMode = property(_PySpin.Camera_SensorShutterMode_get, _PySpin.Camera_SensorShutterMode_set, doc=r"""SensorShutterMode""")
    TriggerDelay = property(_PySpin.Camera_TriggerDelay_get, _PySpin.Camera_TriggerDelay_set, doc=r"""TriggerDelay""")
    TriggerMode = property(_PySpin.Camera_TriggerMode_get, _PySpin.Camera_TriggerMode_set, doc=r"""TriggerMode""")
    AcquisitionFrameRate = property(_PySpin.Camera_AcquisitionFrameRate_get, _PySpin.Camera_AcquisitionFrameRate_set, doc=r"""AcquisitionFrameRate""")
    TriggerOverlap = property(_PySpin.Camera_TriggerOverlap_get, _PySpin.Camera_TriggerOverlap_set, doc=r"""TriggerOverlap""")
    TriggerSelector = property(_PySpin.Camera_TriggerSelector_get, _PySpin.Camera_TriggerSelector_set, doc=r"""TriggerSelector""")
    AcquisitionFrameRateEnable = property(_PySpin.Camera_AcquisitionFrameRateEnable_get, _PySpin.Camera_AcquisitionFrameRateEnable_set, doc=r"""AcquisitionFrameRateEnable""")
    ExposureAuto = property(_PySpin.Camera_ExposureAuto_get, _PySpin.Camera_ExposureAuto_set, doc=r"""ExposureAuto""")
    AcquisitionBurstFrameCount = property(_PySpin.Camera_AcquisitionBurstFrameCount_get, _PySpin.Camera_AcquisitionBurstFrameCount_set, doc=r"""AcquisitionBurstFrameCount""")
    EventTest = property(_PySpin.Camera_EventTest_get, _PySpin.Camera_EventTest_set, doc=r"""EventTest""")
    EventTestTimestamp = property(_PySpin.Camera_EventTestTimestamp_get, _PySpin.Camera_EventTestTimestamp_set, doc=r"""EventTestTimestamp""")
    EventExposureEndFrameID = property(_PySpin.Camera_EventExposureEndFrameID_get, _PySpin.Camera_EventExposureEndFrameID_set, doc=r"""EventExposureEndFrameID""")
    EventExposureEnd = property(_PySpin.Camera_EventExposureEnd_get, _PySpin.Camera_EventExposureEnd_set, doc=r"""EventExposureEnd""")
    EventExposureEndTimestamp = property(_PySpin.Camera_EventExposureEndTimestamp_get, _PySpin.Camera_EventExposureEndTimestamp_set, doc=r"""EventExposureEndTimestamp""")
    EventError = property(_PySpin.Camera_EventError_get, _PySpin.Camera_EventError_set, doc=r"""EventError""")
    EventErrorTimestamp = property(_PySpin.Camera_EventErrorTimestamp_get, _PySpin.Camera_EventErrorTimestamp_set, doc=r"""EventErrorTimestamp""")
    EventErrorCode = property(_PySpin.Camera_EventErrorCode_get, _PySpin.Camera_EventErrorCode_set, doc=r"""EventErrorCode""")
    EventErrorFrameID = property(_PySpin.Camera_EventErrorFrameID_get, _PySpin.Camera_EventErrorFrameID_set, doc=r"""EventErrorFrameID""")
    EventSelector = property(_PySpin.Camera_EventSelector_get, _PySpin.Camera_EventSelector_set, doc=r"""EventSelector""")
    EventSerialReceiveOverflow = property(_PySpin.Camera_EventSerialReceiveOverflow_get, _PySpin.Camera_EventSerialReceiveOverflow_set, doc=r"""EventSerialReceiveOverflow""")
    EventSerialPortReceive = property(_PySpin.Camera_EventSerialPortReceive_get, _PySpin.Camera_EventSerialPortReceive_set, doc=r"""EventSerialPortReceive""")
    EventSerialPortReceiveTimestamp = property(_PySpin.Camera_EventSerialPortReceiveTimestamp_get, _PySpin.Camera_EventSerialPortReceiveTimestamp_set, doc=r"""EventSerialPortReceiveTimestamp""")
    EventSerialData = property(_PySpin.Camera_EventSerialData_get, _PySpin.Camera_EventSerialData_set, doc=r"""EventSerialData""")
    EventSerialDataLength = property(_PySpin.Camera_EventSerialDataLength_get, _PySpin.Camera_EventSerialDataLength_set, doc=r"""EventSerialDataLength""")
    EventNotification = property(_PySpin.Camera_EventNotification_get, _PySpin.Camera_EventNotification_set, doc=r"""EventNotification""")
    LogicBlockLUTRowIndex = property(_PySpin.Camera_LogicBlockLUTRowIndex_get, _PySpin.Camera_LogicBlockLUTRowIndex_set, doc=r"""LogicBlockLUTRowIndex""")
    LogicBlockSelector = property(_PySpin.Camera_LogicBlockSelector_get, _PySpin.Camera_LogicBlockSelector_set, doc=r"""LogicBlockSelector""")
    LogicBlockLUTInputActivation = property(_PySpin.Camera_LogicBlockLUTInputActivation_get, _PySpin.Camera_LogicBlockLUTInputActivation_set, doc=r"""LogicBlockLUTInputActivation""")
    LogicBlockLUTInputSelector = property(_PySpin.Camera_LogicBlockLUTInputSelector_get, _PySpin.Camera_LogicBlockLUTInputSelector_set, doc=r"""LogicBlockLUTInputSelector""")
    LogicBlockLUTInputSource = property(_PySpin.Camera_LogicBlockLUTInputSource_get, _PySpin.Camera_LogicBlockLUTInputSource_set, doc=r"""LogicBlockLUTInputSource""")
    LogicBlockLUTOutputValue = property(_PySpin.Camera_LogicBlockLUTOutputValue_get, _PySpin.Camera_LogicBlockLUTOutputValue_set, doc=r"""LogicBlockLUTOutputValue""")
    LogicBlockLUTOutputValueAll = property(_PySpin.Camera_LogicBlockLUTOutputValueAll_get, _PySpin.Camera_LogicBlockLUTOutputValueAll_set, doc=r"""LogicBlockLUTOutputValueAll""")
    LogicBlockLUTSelector = property(_PySpin.Camera_LogicBlockLUTSelector_get, _PySpin.Camera_LogicBlockLUTSelector_set, doc=r"""LogicBlockLUTSelector""")
    ColorTransformationValue = property(_PySpin.Camera_ColorTransformationValue_get, _PySpin.Camera_ColorTransformationValue_set, doc=r"""ColorTransformationValue""")
    ColorTransformationEnable = property(_PySpin.Camera_ColorTransformationEnable_get, _PySpin.Camera_ColorTransformationEnable_set, doc=r"""ColorTransformationEnable""")
    ColorTransformationSelector = property(_PySpin.Camera_ColorTransformationSelector_get, _PySpin.Camera_ColorTransformationSelector_set, doc=r"""ColorTransformationSelector""")
    RgbTransformLightSource = property(_PySpin.Camera_RgbTransformLightSource_get, _PySpin.Camera_RgbTransformLightSource_set, doc=r"""RgbTransformLightSource""")
    Saturation = property(_PySpin.Camera_Saturation_get, _PySpin.Camera_Saturation_set, doc=r"""Saturation""")
    SaturationEnable = property(_PySpin.Camera_SaturationEnable_get, _PySpin.Camera_SaturationEnable_set, doc=r"""SaturationEnable""")
    ColorTransformationValueSelector = property(_PySpin.Camera_ColorTransformationValueSelector_get, _PySpin.Camera_ColorTransformationValueSelector_set, doc=r"""ColorTransformationValueSelector""")
    TimestampLatchValue = property(_PySpin.Camera_TimestampLatchValue_get, _PySpin.Camera_TimestampLatchValue_set, doc=r"""TimestampLatchValue""")
    TimestampReset = property(_PySpin.Camera_TimestampReset_get, _PySpin.Camera_TimestampReset_set, doc=r"""TimestampReset""")
    DeviceUserID = property(_PySpin.Camera_DeviceUserID_get, _PySpin.Camera_DeviceUserID_set, doc=r"""DeviceUserID""")
    DeviceTemperature = property(_PySpin.Camera_DeviceTemperature_get, _PySpin.Camera_DeviceTemperature_set, doc=r"""DeviceTemperature""")
    MaxDeviceResetTime = property(_PySpin.Camera_MaxDeviceResetTime_get, _PySpin.Camera_MaxDeviceResetTime_set, doc=r"""MaxDeviceResetTime""")
    DeviceTLVersionMinor = property(_PySpin.Camera_DeviceTLVersionMinor_get, _PySpin.Camera_DeviceTLVersionMinor_set, doc=r"""DeviceTLVersionMinor""")
    DeviceSerialNumber = property(_PySpin.Camera_DeviceSerialNumber_get, _PySpin.Camera_DeviceSerialNumber_set, doc=r"""DeviceSerialNumber""")
    DeviceVendorName = property(_PySpin.Camera_DeviceVendorName_get, _PySpin.Camera_DeviceVendorName_set, doc=r"""DeviceVendorName""")
    DeviceRegistersEndianness = property(_PySpin.Camera_DeviceRegistersEndianness_get, _PySpin.Camera_DeviceRegistersEndianness_set, doc=r"""DeviceRegistersEndianness""")
    DeviceManufacturerInfo = property(_PySpin.Camera_DeviceManufacturerInfo_get, _PySpin.Camera_DeviceManufacturerInfo_set, doc=r"""DeviceManufacturerInfo""")
    DeviceLinkSpeed = property(_PySpin.Camera_DeviceLinkSpeed_get, _PySpin.Camera_DeviceLinkSpeed_set, doc=r"""DeviceLinkSpeed""")
    LinkUptime = property(_PySpin.Camera_LinkUptime_get, _PySpin.Camera_LinkUptime_set, doc=r"""LinkUptime""")
    DeviceEventChannelCount = property(_PySpin.Camera_DeviceEventChannelCount_get, _PySpin.Camera_DeviceEventChannelCount_set, doc=r"""DeviceEventChannelCount""")
    TimestampLatch = property(_PySpin.Camera_TimestampLatch_get, _PySpin.Camera_TimestampLatch_set, doc=r"""TimestampLatch""")
    DeviceScanType = property(_PySpin.Camera_DeviceScanType_get, _PySpin.Camera_DeviceScanType_set, doc=r"""DeviceScanType""")
    DeviceReset = property(_PySpin.Camera_DeviceReset_get, _PySpin.Camera_DeviceReset_set, doc=r"""DeviceReset""")
    DeviceCharacterSet = property(_PySpin.Camera_DeviceCharacterSet_get, _PySpin.Camera_DeviceCharacterSet_set, doc=r"""DeviceCharacterSet""")
    DeviceLinkThroughputLimit = property(_PySpin.Camera_DeviceLinkThroughputLimit_get, _PySpin.Camera_DeviceLinkThroughputLimit_set, doc=r"""DeviceLinkThroughputLimit""")
    DeviceFirmwareVersion = property(_PySpin.Camera_DeviceFirmwareVersion_get, _PySpin.Camera_DeviceFirmwareVersion_set, doc=r"""DeviceFirmwareVersion""")
    DeviceStreamChannelCount = property(_PySpin.Camera_DeviceStreamChannelCount_get, _PySpin.Camera_DeviceStreamChannelCount_set, doc=r"""DeviceStreamChannelCount""")
    DeviceTLType = property(_PySpin.Camera_DeviceTLType_get, _PySpin.Camera_DeviceTLType_set, doc=r"""DeviceTLType""")
    DeviceVersion = property(_PySpin.Camera_DeviceVersion_get, _PySpin.Camera_DeviceVersion_set, doc=r"""DeviceVersion""")
    DevicePowerSupplySelector = property(_PySpin.Camera_DevicePowerSupplySelector_get, _PySpin.Camera_DevicePowerSupplySelector_set, doc=r"""DevicePowerSupplySelector""")
    SensorDescription = property(_PySpin.Camera_SensorDescription_get, _PySpin.Camera_SensorDescription_set, doc=r"""SensorDescription""")
    DeviceModelName = property(_PySpin.Camera_DeviceModelName_get, _PySpin.Camera_DeviceModelName_set, doc=r"""DeviceModelName""")
    DeviceTLVersionMajor = property(_PySpin.Camera_DeviceTLVersionMajor_get, _PySpin.Camera_DeviceTLVersionMajor_set, doc=r"""DeviceTLVersionMajor""")
    DeviceTemperatureSelector = property(_PySpin.Camera_DeviceTemperatureSelector_get, _PySpin.Camera_DeviceTemperatureSelector_set, doc=r"""DeviceTemperatureSelector""")
    EnumerationCount = property(_PySpin.Camera_EnumerationCount_get, _PySpin.Camera_EnumerationCount_set, doc=r"""EnumerationCount""")
    PowerSupplyCurrent = property(_PySpin.Camera_PowerSupplyCurrent_get, _PySpin.Camera_PowerSupplyCurrent_set, doc=r"""PowerSupplyCurrent""")
    DeviceID = property(_PySpin.Camera_DeviceID_get, _PySpin.Camera_DeviceID_set, doc=r"""DeviceID""")
    DeviceUptime = property(_PySpin.Camera_DeviceUptime_get, _PySpin.Camera_DeviceUptime_set, doc=r"""DeviceUptime""")
    DeviceLinkCurrentThroughput = property(_PySpin.Camera_DeviceLinkCurrentThroughput_get, _PySpin.Camera_DeviceLinkCurrentThroughput_set, doc=r"""DeviceLinkCurrentThroughput""")
    DeviceMaxThroughput = property(_PySpin.Camera_DeviceMaxThroughput_get, _PySpin.Camera_DeviceMaxThroughput_set, doc=r"""DeviceMaxThroughput""")
    FactoryReset = property(_PySpin.Camera_FactoryReset_get, _PySpin.Camera_FactoryReset_set, doc=r"""FactoryReset""")
    PowerSupplyVoltage = property(_PySpin.Camera_PowerSupplyVoltage_get, _PySpin.Camera_PowerSupplyVoltage_set, doc=r"""PowerSupplyVoltage""")
    DeviceIndicatorMode = property(_PySpin.Camera_DeviceIndicatorMode_get, _PySpin.Camera_DeviceIndicatorMode_set, doc=r"""DeviceIndicatorMode""")
    DeviceLinkBandwidthReserve = property(_PySpin.Camera_DeviceLinkBandwidthReserve_get, _PySpin.Camera_DeviceLinkBandwidthReserve_set, doc=r"""DeviceLinkBandwidthReserve""")
    AasRoiOffsetY = property(_PySpin.Camera_AasRoiOffsetY_get, _PySpin.Camera_AasRoiOffsetY_set, doc=r"""AasRoiOffsetY""")
    AasRoiOffsetX = property(_PySpin.Camera_AasRoiOffsetX_get, _PySpin.Camera_AasRoiOffsetX_set, doc=r"""AasRoiOffsetX""")
    AutoExposureControlPriority = property(_PySpin.Camera_AutoExposureControlPriority_get, _PySpin.Camera_AutoExposureControlPriority_set, doc=r"""AutoExposureControlPriority""")
    BalanceWhiteAutoLowerLimit = property(_PySpin.Camera_BalanceWhiteAutoLowerLimit_get, _PySpin.Camera_BalanceWhiteAutoLowerLimit_set, doc=r"""BalanceWhiteAutoLowerLimit""")
    BalanceWhiteAutoDamping = property(_PySpin.Camera_BalanceWhiteAutoDamping_get, _PySpin.Camera_BalanceWhiteAutoDamping_set, doc=r"""BalanceWhiteAutoDamping""")
    AasRoiHeight = property(_PySpin.Camera_AasRoiHeight_get, _PySpin.Camera_AasRoiHeight_set, doc=r"""AasRoiHeight""")
    AutoExposureGreyValueUpperLimit = property(_PySpin.Camera_AutoExposureGreyValueUpperLimit_get, _PySpin.Camera_AutoExposureGreyValueUpperLimit_set, doc=r"""AutoExposureGreyValueUpperLimit""")
    AutoExposureTargetGreyValue = property(_PySpin.Camera_AutoExposureTargetGreyValue_get, _PySpin.Camera_AutoExposureTargetGreyValue_set, doc=r"""AutoExposureTargetGreyValue""")
    AutoExposureGainLowerLimit = property(_PySpin.Camera_AutoExposureGainLowerLimit_get, _PySpin.Camera_AutoExposureGainLowerLimit_set, doc=r"""AutoExposureGainLowerLimit""")
    AutoExposureGreyValueLowerLimit = property(_PySpin.Camera_AutoExposureGreyValueLowerLimit_get, _PySpin.Camera_AutoExposureGreyValueLowerLimit_set, doc=r"""AutoExposureGreyValueLowerLimit""")
    AutoExposureMeteringMode = property(_PySpin.Camera_AutoExposureMeteringMode_get, _PySpin.Camera_AutoExposureMeteringMode_set, doc=r"""AutoExposureMeteringMode""")
    AutoExposureExposureTimeUpperLimit = property(_PySpin.Camera_AutoExposureExposureTimeUpperLimit_get, _PySpin.Camera_AutoExposureExposureTimeUpperLimit_set, doc=r"""AutoExposureExposureTimeUpperLimit""")
    AutoExposureGainUpperLimit = property(_PySpin.Camera_AutoExposureGainUpperLimit_get, _PySpin.Camera_AutoExposureGainUpperLimit_set, doc=r"""AutoExposureGainUpperLimit""")
    AutoExposureControlLoopDamping = property(_PySpin.Camera_AutoExposureControlLoopDamping_get, _PySpin.Camera_AutoExposureControlLoopDamping_set, doc=r"""AutoExposureControlLoopDamping""")
    AutoExposureEVCompensation = property(_PySpin.Camera_AutoExposureEVCompensation_get, _PySpin.Camera_AutoExposureEVCompensation_set, doc=r"""AutoExposureEVCompensation""")
    AutoExposureExposureTimeLowerLimit = property(_PySpin.Camera_AutoExposureExposureTimeLowerLimit_get, _PySpin.Camera_AutoExposureExposureTimeLowerLimit_set, doc=r"""AutoExposureExposureTimeLowerLimit""")
    BalanceWhiteAutoProfile = property(_PySpin.Camera_BalanceWhiteAutoProfile_get, _PySpin.Camera_BalanceWhiteAutoProfile_set, doc=r"""BalanceWhiteAutoProfile""")
    AutoAlgorithmSelector = property(_PySpin.Camera_AutoAlgorithmSelector_get, _PySpin.Camera_AutoAlgorithmSelector_set, doc=r"""AutoAlgorithmSelector""")
    AutoExposureTargetGreyValueAuto = property(_PySpin.Camera_AutoExposureTargetGreyValueAuto_get, _PySpin.Camera_AutoExposureTargetGreyValueAuto_set, doc=r"""AutoExposureTargetGreyValueAuto""")
    AasRoiEnable = property(_PySpin.Camera_AasRoiEnable_get, _PySpin.Camera_AasRoiEnable_set, doc=r"""AasRoiEnable""")
    AutoExposureLightingMode = property(_PySpin.Camera_AutoExposureLightingMode_get, _PySpin.Camera_AutoExposureLightingMode_set, doc=r"""AutoExposureLightingMode""")
    AasRoiWidth = property(_PySpin.Camera_AasRoiWidth_get, _PySpin.Camera_AasRoiWidth_set, doc=r"""AasRoiWidth""")
    BalanceWhiteAutoUpperLimit = property(_PySpin.Camera_BalanceWhiteAutoUpperLimit_get, _PySpin.Camera_BalanceWhiteAutoUpperLimit_set, doc=r"""BalanceWhiteAutoUpperLimit""")
    LinkErrorCount = property(_PySpin.Camera_LinkErrorCount_get, _PySpin.Camera_LinkErrorCount_set, doc=r"""LinkErrorCount""")
    GevCurrentIPConfigurationDHCP = property(_PySpin.Camera_GevCurrentIPConfigurationDHCP_get, _PySpin.Camera_GevCurrentIPConfigurationDHCP_set, doc=r"""GevCurrentIPConfigurationDHCP""")
    GevInterfaceSelector = property(_PySpin.Camera_GevInterfaceSelector_get, _PySpin.Camera_GevInterfaceSelector_set, doc=r"""GevInterfaceSelector""")
    GevSCPD = property(_PySpin.Camera_GevSCPD_get, _PySpin.Camera_GevSCPD_set, doc=r"""GevSCPD""")
    GevTimestampTickFrequency = property(_PySpin.Camera_GevTimestampTickFrequency_get, _PySpin.Camera_GevTimestampTickFrequency_set, doc=r"""GevTimestampTickFrequency""")
    GevSCPSPacketSize = property(_PySpin.Camera_GevSCPSPacketSize_get, _PySpin.Camera_GevSCPSPacketSize_set, doc=r"""GevSCPSPacketSize""")
    GevCurrentDefaultGateway = property(_PySpin.Camera_GevCurrentDefaultGateway_get, _PySpin.Camera_GevCurrentDefaultGateway_set, doc=r"""GevCurrentDefaultGateway""")
    GevSCCFGUnconditionalStreaming = property(_PySpin.Camera_GevSCCFGUnconditionalStreaming_get, _PySpin.Camera_GevSCCFGUnconditionalStreaming_set, doc=r"""GevSCCFGUnconditionalStreaming""")
    GevMCTT = property(_PySpin.Camera_GevMCTT_get, _PySpin.Camera_GevMCTT_set, doc=r"""GevMCTT""")
    GevSCPSDoNotFragment = property(_PySpin.Camera_GevSCPSDoNotFragment_get, _PySpin.Camera_GevSCPSDoNotFragment_set, doc=r"""GevSCPSDoNotFragment""")
    GevCurrentSubnetMask = property(_PySpin.Camera_GevCurrentSubnetMask_get, _PySpin.Camera_GevCurrentSubnetMask_set, doc=r"""GevCurrentSubnetMask""")
    GevStreamChannelSelector = property(_PySpin.Camera_GevStreamChannelSelector_get, _PySpin.Camera_GevStreamChannelSelector_set, doc=r"""GevStreamChannelSelector""")
    GevCurrentIPAddress = property(_PySpin.Camera_GevCurrentIPAddress_get, _PySpin.Camera_GevCurrentIPAddress_set, doc=r"""GevCurrentIPAddress""")
    GevMCSP = property(_PySpin.Camera_GevMCSP_get, _PySpin.Camera_GevMCSP_set, doc=r"""GevMCSP""")
    GevGVCPPendingTimeout = property(_PySpin.Camera_GevGVCPPendingTimeout_get, _PySpin.Camera_GevGVCPPendingTimeout_set, doc=r"""GevGVCPPendingTimeout""")
    GevIEEE1588Status = property(_PySpin.Camera_GevIEEE1588Status_get, _PySpin.Camera_GevIEEE1588Status_set, doc=r"""GevIEEE1588Status""")
    GevFirstURL = property(_PySpin.Camera_GevFirstURL_get, _PySpin.Camera_GevFirstURL_set, doc=r"""GevFirstURL""")
    GevMACAddress = property(_PySpin.Camera_GevMACAddress_get, _PySpin.Camera_GevMACAddress_set, doc=r"""GevMACAddress""")
    GevPersistentSubnetMask = property(_PySpin.Camera_GevPersistentSubnetMask_get, _PySpin.Camera_GevPersistentSubnetMask_set, doc=r"""GevPersistentSubnetMask""")
    GevMCPHostPort = property(_PySpin.Camera_GevMCPHostPort_get, _PySpin.Camera_GevMCPHostPort_set, doc=r"""GevMCPHostPort""")
    GevSCPHostPort = property(_PySpin.Camera_GevSCPHostPort_get, _PySpin.Camera_GevSCPHostPort_set, doc=r"""GevSCPHostPort""")
    GevGVCPPendingAck = property(_PySpin.Camera_GevGVCPPendingAck_get, _PySpin.Camera_GevGVCPPendingAck_set, doc=r"""GevGVCPPendingAck""")
    GevSCPInterfaceIndex = property(_PySpin.Camera_GevSCPInterfaceIndex_get, _PySpin.Camera_GevSCPInterfaceIndex_set, doc=r"""GevSCPInterfaceIndex""")
    GevSupportedOption = property(_PySpin.Camera_GevSupportedOption_get, _PySpin.Camera_GevSupportedOption_set, doc=r"""GevSupportedOption""")
    GevIEEE1588Mode = property(_PySpin.Camera_GevIEEE1588Mode_get, _PySpin.Camera_GevIEEE1588Mode_set, doc=r"""GevIEEE1588Mode""")
    GevCurrentIPConfigurationLLA = property(_PySpin.Camera_GevCurrentIPConfigurationLLA_get, _PySpin.Camera_GevCurrentIPConfigurationLLA_set, doc=r"""GevCurrentIPConfigurationLLA""")
    GevSCSP = property(_PySpin.Camera_GevSCSP_get, _PySpin.Camera_GevSCSP_set, doc=r"""GevSCSP""")
    GevIEEE1588 = property(_PySpin.Camera_GevIEEE1588_get, _PySpin.Camera_GevIEEE1588_set, doc=r"""GevIEEE1588""")
    GevSCCFGExtendedChunkData = property(_PySpin.Camera_GevSCCFGExtendedChunkData_get, _PySpin.Camera_GevSCCFGExtendedChunkData_set, doc=r"""GevSCCFGExtendedChunkData""")
    GevPersistentIPAddress = property(_PySpin.Camera_GevPersistentIPAddress_get, _PySpin.Camera_GevPersistentIPAddress_set, doc=r"""GevPersistentIPAddress""")
    GevCurrentIPConfigurationPersistentIP = property(_PySpin.Camera_GevCurrentIPConfigurationPersistentIP_get, _PySpin.Camera_GevCurrentIPConfigurationPersistentIP_set, doc=r"""GevCurrentIPConfigurationPersistentIP""")
    GevIEEE1588ClockAccuracy = property(_PySpin.Camera_GevIEEE1588ClockAccuracy_get, _PySpin.Camera_GevIEEE1588ClockAccuracy_set, doc=r"""GevIEEE1588ClockAccuracy""")
    GevHeartbeatTimeout = property(_PySpin.Camera_GevHeartbeatTimeout_get, _PySpin.Camera_GevHeartbeatTimeout_set, doc=r"""GevHeartbeatTimeout""")
    GevPersistentDefaultGateway = property(_PySpin.Camera_GevPersistentDefaultGateway_get, _PySpin.Camera_GevPersistentDefaultGateway_set, doc=r"""GevPersistentDefaultGateway""")
    GevCCP = property(_PySpin.Camera_GevCCP_get, _PySpin.Camera_GevCCP_set, doc=r"""GevCCP""")
    GevMCDA = property(_PySpin.Camera_GevMCDA_get, _PySpin.Camera_GevMCDA_set, doc=r"""GevMCDA""")
    GevSCDA = property(_PySpin.Camera_GevSCDA_get, _PySpin.Camera_GevSCDA_set, doc=r"""GevSCDA""")
    GevSCPDirection = property(_PySpin.Camera_GevSCPDirection_get, _PySpin.Camera_GevSCPDirection_set, doc=r"""GevSCPDirection""")
    GevSCPSFireTestPacket = property(_PySpin.Camera_GevSCPSFireTestPacket_get, _PySpin.Camera_GevSCPSFireTestPacket_set, doc=r"""GevSCPSFireTestPacket""")
    GevSecondURL = property(_PySpin.Camera_GevSecondURL_get, _PySpin.Camera_GevSecondURL_set, doc=r"""GevSecondURL""")
    GevSupportedOptionSelector = property(_PySpin.Camera_GevSupportedOptionSelector_get, _PySpin.Camera_GevSupportedOptionSelector_set, doc=r"""GevSupportedOptionSelector""")
    GevGVCPHeartbeatDisable = property(_PySpin.Camera_GevGVCPHeartbeatDisable_get, _PySpin.Camera_GevGVCPHeartbeatDisable_set, doc=r"""GevGVCPHeartbeatDisable""")
    GevMCRC = property(_PySpin.Camera_GevMCRC_get, _PySpin.Camera_GevMCRC_set, doc=r"""GevMCRC""")
    GevSCPSBigEndian = property(_PySpin.Camera_GevSCPSBigEndian_get, _PySpin.Camera_GevSCPSBigEndian_set, doc=r"""GevSCPSBigEndian""")
    GevNumberOfInterfaces = property(_PySpin.Camera_GevNumberOfInterfaces_get, _PySpin.Camera_GevNumberOfInterfaces_set, doc=r"""GevNumberOfInterfaces""")
    TLParamsLocked = property(_PySpin.Camera_TLParamsLocked_get, _PySpin.Camera_TLParamsLocked_set, doc=r"""TLParamsLocked""")
    PayloadSize = property(_PySpin.Camera_PayloadSize_get, _PySpin.Camera_PayloadSize_set, doc=r"""PayloadSize""")
    PacketResendRequestCount = property(_PySpin.Camera_PacketResendRequestCount_get, _PySpin.Camera_PacketResendRequestCount_set, doc=r"""PacketResendRequestCount""")
    SharpeningEnable = property(_PySpin.Camera_SharpeningEnable_get, _PySpin.Camera_SharpeningEnable_set, doc=r"""SharpeningEnable""")
    BlackLevelSelector = property(_PySpin.Camera_BlackLevelSelector_get, _PySpin.Camera_BlackLevelSelector_set, doc=r"""BlackLevelSelector""")
    GammaEnable = property(_PySpin.Camera_GammaEnable_get, _PySpin.Camera_GammaEnable_set, doc=r"""GammaEnable""")
    SharpeningAuto = property(_PySpin.Camera_SharpeningAuto_get, _PySpin.Camera_SharpeningAuto_set, doc=r"""SharpeningAuto""")
    BlackLevelClampingEnable = property(_PySpin.Camera_BlackLevelClampingEnable_get, _PySpin.Camera_BlackLevelClampingEnable_set, doc=r"""BlackLevelClampingEnable""")
    BalanceRatio = property(_PySpin.Camera_BalanceRatio_get, _PySpin.Camera_BalanceRatio_set, doc=r"""BalanceRatio""")
    BalanceWhiteAuto = property(_PySpin.Camera_BalanceWhiteAuto_get, _PySpin.Camera_BalanceWhiteAuto_set, doc=r"""BalanceWhiteAuto""")
    SharpeningThreshold = property(_PySpin.Camera_SharpeningThreshold_get, _PySpin.Camera_SharpeningThreshold_set, doc=r"""SharpeningThreshold""")
    GainAuto = property(_PySpin.Camera_GainAuto_get, _PySpin.Camera_GainAuto_set, doc=r"""GainAuto""")
    Sharpening = property(_PySpin.Camera_Sharpening_get, _PySpin.Camera_Sharpening_set, doc=r"""Sharpening""")
    Gain = property(_PySpin.Camera_Gain_get, _PySpin.Camera_Gain_set, doc=r"""Gain""")
    BalanceRatioSelector = property(_PySpin.Camera_BalanceRatioSelector_get, _PySpin.Camera_BalanceRatioSelector_set, doc=r"""BalanceRatioSelector""")
    GainSelector = property(_PySpin.Camera_GainSelector_get, _PySpin.Camera_GainSelector_set, doc=r"""GainSelector""")
    BlackLevel = property(_PySpin.Camera_BlackLevel_get, _PySpin.Camera_BlackLevel_set, doc=r"""BlackLevel""")
    BlackLevelRaw = property(_PySpin.Camera_BlackLevelRaw_get, _PySpin.Camera_BlackLevelRaw_set, doc=r"""BlackLevelRaw""")
    Gamma = property(_PySpin.Camera_Gamma_get, _PySpin.Camera_Gamma_set, doc=r"""Gamma""")
    DefectTableIndex = property(_PySpin.Camera_DefectTableIndex_get, _PySpin.Camera_DefectTableIndex_set, doc=r"""DefectTableIndex""")
    DefectTableFactoryRestore = property(_PySpin.Camera_DefectTableFactoryRestore_get, _PySpin.Camera_DefectTableFactoryRestore_set, doc=r"""DefectTableFactoryRestore""")
    DefectTableCoordinateY = property(_PySpin.Camera_DefectTableCoordinateY_get, _PySpin.Camera_DefectTableCoordinateY_set, doc=r"""DefectTableCoordinateY""")
    DefectTableSave = property(_PySpin.Camera_DefectTableSave_get, _PySpin.Camera_DefectTableSave_set, doc=r"""DefectTableSave""")
    DefectCorrectionMode = property(_PySpin.Camera_DefectCorrectionMode_get, _PySpin.Camera_DefectCorrectionMode_set, doc=r"""DefectCorrectionMode""")
    DefectTableCoordinateX = property(_PySpin.Camera_DefectTableCoordinateX_get, _PySpin.Camera_DefectTableCoordinateX_set, doc=r"""DefectTableCoordinateX""")
    DefectTablePixelCount = property(_PySpin.Camera_DefectTablePixelCount_get, _PySpin.Camera_DefectTablePixelCount_set, doc=r"""DefectTablePixelCount""")
    DefectCorrectStaticEnable = property(_PySpin.Camera_DefectCorrectStaticEnable_get, _PySpin.Camera_DefectCorrectStaticEnable_set, doc=r"""DefectCorrectStaticEnable""")
    DefectTableApply = property(_PySpin.Camera_DefectTableApply_get, _PySpin.Camera_DefectTableApply_set, doc=r"""DefectTableApply""")
    UserSetFeatureEnable = property(_PySpin.Camera_UserSetFeatureEnable_get, _PySpin.Camera_UserSetFeatureEnable_set, doc=r"""UserSetFeatureEnable""")
    UserSetSave = property(_PySpin.Camera_UserSetSave_get, _PySpin.Camera_UserSetSave_set, doc=r"""UserSetSave""")
    UserSetSelector = property(_PySpin.Camera_UserSetSelector_get, _PySpin.Camera_UserSetSelector_set, doc=r"""UserSetSelector""")
    UserSetLoad = property(_PySpin.Camera_UserSetLoad_get, _PySpin.Camera_UserSetLoad_set, doc=r"""UserSetLoad""")
    UserSetDefault = property(_PySpin.Camera_UserSetDefault_get, _PySpin.Camera_UserSetDefault_set, doc=r"""UserSetDefault""")
    SerialPortBaudRate = property(_PySpin.Camera_SerialPortBaudRate_get, _PySpin.Camera_SerialPortBaudRate_set, doc=r"""SerialPortBaudRate""")
    SerialPortDataBits = property(_PySpin.Camera_SerialPortDataBits_get, _PySpin.Camera_SerialPortDataBits_set, doc=r"""SerialPortDataBits""")
    SerialPortParity = property(_PySpin.Camera_SerialPortParity_get, _PySpin.Camera_SerialPortParity_set, doc=r"""SerialPortParity""")
    SerialTransmitQueueMaxCharacterCount = property(_PySpin.Camera_SerialTransmitQueueMaxCharacterCount_get, _PySpin.Camera_SerialTransmitQueueMaxCharacterCount_set, doc=r"""SerialTransmitQueueMaxCharacterCount""")
    SerialReceiveQueueCurrentCharacterCount = property(_PySpin.Camera_SerialReceiveQueueCurrentCharacterCount_get, _PySpin.Camera_SerialReceiveQueueCurrentCharacterCount_set, doc=r"""SerialReceiveQueueCurrentCharacterCount""")
    SerialPortSelector = property(_PySpin.Camera_SerialPortSelector_get, _PySpin.Camera_SerialPortSelector_set, doc=r"""SerialPortSelector""")
    SerialPortStopBits = property(_PySpin.Camera_SerialPortStopBits_get, _PySpin.Camera_SerialPortStopBits_set, doc=r"""SerialPortStopBits""")
    SerialReceiveQueueClear = property(_PySpin.Camera_SerialReceiveQueueClear_get, _PySpin.Camera_SerialReceiveQueueClear_set, doc=r"""SerialReceiveQueueClear""")
    SerialReceiveFramingErrorCount = property(_PySpin.Camera_SerialReceiveFramingErrorCount_get, _PySpin.Camera_SerialReceiveFramingErrorCount_set, doc=r"""SerialReceiveFramingErrorCount""")
    SerialTransmitQueueCurrentCharacterCount = property(_PySpin.Camera_SerialTransmitQueueCurrentCharacterCount_get, _PySpin.Camera_SerialTransmitQueueCurrentCharacterCount_set, doc=r"""SerialTransmitQueueCurrentCharacterCount""")
    SerialReceiveParityErrorCount = property(_PySpin.Camera_SerialReceiveParityErrorCount_get, _PySpin.Camera_SerialReceiveParityErrorCount_set, doc=r"""SerialReceiveParityErrorCount""")
    SerialPortSource = property(_PySpin.Camera_SerialPortSource_get, _PySpin.Camera_SerialPortSource_set, doc=r"""SerialPortSource""")
    SerialReceiveQueueMaxCharacterCount = property(_PySpin.Camera_SerialReceiveQueueMaxCharacterCount_get, _PySpin.Camera_SerialReceiveQueueMaxCharacterCount_set, doc=r"""SerialReceiveQueueMaxCharacterCount""")
    SequencerSetStart = property(_PySpin.Camera_SequencerSetStart_get, _PySpin.Camera_SequencerSetStart_set, doc=r"""SequencerSetStart""")
    SequencerMode = property(_PySpin.Camera_SequencerMode_get, _PySpin.Camera_SequencerMode_set, doc=r"""SequencerMode""")
    SequencerConfigurationValid = property(_PySpin.Camera_SequencerConfigurationValid_get, _PySpin.Camera_SequencerConfigurationValid_set, doc=r"""SequencerConfigurationValid""")
    SequencerSetValid = property(_PySpin.Camera_SequencerSetValid_get, _PySpin.Camera_SequencerSetValid_set, doc=r"""SequencerSetValid""")
    SequencerSetSelector = property(_PySpin.Camera_SequencerSetSelector_get, _PySpin.Camera_SequencerSetSelector_set, doc=r"""SequencerSetSelector""")
    SequencerTriggerActivation = property(_PySpin.Camera_SequencerTriggerActivation_get, _PySpin.Camera_SequencerTriggerActivation_set, doc=r"""SequencerTriggerActivation""")
    SequencerConfigurationMode = property(_PySpin.Camera_SequencerConfigurationMode_get, _PySpin.Camera_SequencerConfigurationMode_set, doc=r"""SequencerConfigurationMode""")
    SequencerSetSave = property(_PySpin.Camera_SequencerSetSave_get, _PySpin.Camera_SequencerSetSave_set, doc=r"""SequencerSetSave""")
    SequencerTriggerSource = property(_PySpin.Camera_SequencerTriggerSource_get, _PySpin.Camera_SequencerTriggerSource_set, doc=r"""SequencerTriggerSource""")
    SequencerSetActive = property(_PySpin.Camera_SequencerSetActive_get, _PySpin.Camera_SequencerSetActive_set, doc=r"""SequencerSetActive""")
    SequencerSetNext = property(_PySpin.Camera_SequencerSetNext_get, _PySpin.Camera_SequencerSetNext_set, doc=r"""SequencerSetNext""")
    SequencerSetLoad = property(_PySpin.Camera_SequencerSetLoad_get, _PySpin.Camera_SequencerSetLoad_set, doc=r"""SequencerSetLoad""")
    SequencerPathSelector = property(_PySpin.Camera_SequencerPathSelector_get, _PySpin.Camera_SequencerPathSelector_set, doc=r"""SequencerPathSelector""")
    SequencerFeatureEnable = property(_PySpin.Camera_SequencerFeatureEnable_get, _PySpin.Camera_SequencerFeatureEnable_set, doc=r"""SequencerFeatureEnable""")
    TransferBlockCount = property(_PySpin.Camera_TransferBlockCount_get, _PySpin.Camera_TransferBlockCount_set, doc=r"""TransferBlockCount""")
    TransferStart = property(_PySpin.Camera_TransferStart_get, _PySpin.Camera_TransferStart_set, doc=r"""TransferStart""")
    TransferQueueMaxBlockCount = property(_PySpin.Camera_TransferQueueMaxBlockCount_get, _PySpin.Camera_TransferQueueMaxBlockCount_set, doc=r"""TransferQueueMaxBlockCount""")
    TransferQueueCurrentBlockCount = property(_PySpin.Camera_TransferQueueCurrentBlockCount_get, _PySpin.Camera_TransferQueueCurrentBlockCount_set, doc=r"""TransferQueueCurrentBlockCount""")
    TransferQueueMode = property(_PySpin.Camera_TransferQueueMode_get, _PySpin.Camera_TransferQueueMode_set, doc=r"""TransferQueueMode""")
    TransferOperationMode = property(_PySpin.Camera_TransferOperationMode_get, _PySpin.Camera_TransferOperationMode_set, doc=r"""TransferOperationMode""")
    TransferStop = property(_PySpin.Camera_TransferStop_get, _PySpin.Camera_TransferStop_set, doc=r"""TransferStop""")
    TransferQueueOverflowCount = property(_PySpin.Camera_TransferQueueOverflowCount_get, _PySpin.Camera_TransferQueueOverflowCount_set, doc=r"""TransferQueueOverflowCount""")
    TransferControlMode = property(_PySpin.Camera_TransferControlMode_get, _PySpin.Camera_TransferControlMode_set, doc=r"""TransferControlMode""")
    ChunkBlackLevel = property(_PySpin.Camera_ChunkBlackLevel_get, _PySpin.Camera_ChunkBlackLevel_set, doc=r"""ChunkBlackLevel""")
    ChunkFrameID = property(_PySpin.Camera_ChunkFrameID_get, _PySpin.Camera_ChunkFrameID_set, doc=r"""ChunkFrameID""")
    ChunkSerialData = property(_PySpin.Camera_ChunkSerialData_get, _PySpin.Camera_ChunkSerialData_set, doc=r"""ChunkSerialData""")
    ChunkExposureTime = property(_PySpin.Camera_ChunkExposureTime_get, _PySpin.Camera_ChunkExposureTime_set, doc=r"""ChunkExposureTime""")
    ChunkCompressionMode = property(_PySpin.Camera_ChunkCompressionMode_get, _PySpin.Camera_ChunkCompressionMode_set, doc=r"""ChunkCompressionMode""")
    ChunkCompressionRatio = property(_PySpin.Camera_ChunkCompressionRatio_get, _PySpin.Camera_ChunkCompressionRatio_set, doc=r"""ChunkCompressionRatio""")
    ChunkSerialReceiveOverflow = property(_PySpin.Camera_ChunkSerialReceiveOverflow_get, _PySpin.Camera_ChunkSerialReceiveOverflow_set, doc=r"""ChunkSerialReceiveOverflow""")
    ChunkTimestamp = property(_PySpin.Camera_ChunkTimestamp_get, _PySpin.Camera_ChunkTimestamp_set, doc=r"""ChunkTimestamp""")
    ChunkModeActive = property(_PySpin.Camera_ChunkModeActive_get, _PySpin.Camera_ChunkModeActive_set, doc=r"""ChunkModeActive""")
    ChunkExposureEndLineStatusAll = property(_PySpin.Camera_ChunkExposureEndLineStatusAll_get, _PySpin.Camera_ChunkExposureEndLineStatusAll_set, doc=r"""ChunkExposureEndLineStatusAll""")
    ChunkGainSelector = property(_PySpin.Camera_ChunkGainSelector_get, _PySpin.Camera_ChunkGainSelector_set, doc=r"""ChunkGainSelector""")
    ChunkSelector = property(_PySpin.Camera_ChunkSelector_get, _PySpin.Camera_ChunkSelector_set, doc=r"""ChunkSelector""")
    ChunkBlackLevelSelector = property(_PySpin.Camera_ChunkBlackLevelSelector_get, _PySpin.Camera_ChunkBlackLevelSelector_set, doc=r"""ChunkBlackLevelSelector""")
    ChunkWidth = property(_PySpin.Camera_ChunkWidth_get, _PySpin.Camera_ChunkWidth_set, doc=r"""ChunkWidth""")
    ChunkImage = property(_PySpin.Camera_ChunkImage_get, _PySpin.Camera_ChunkImage_set, doc=r"""ChunkImage""")
    ChunkHeight = property(_PySpin.Camera_ChunkHeight_get, _PySpin.Camera_ChunkHeight_set, doc=r"""ChunkHeight""")
    ChunkPixelFormat = property(_PySpin.Camera_ChunkPixelFormat_get, _PySpin.Camera_ChunkPixelFormat_set, doc=r"""ChunkPixelFormat""")
    ChunkGain = property(_PySpin.Camera_ChunkGain_get, _PySpin.Camera_ChunkGain_set, doc=r"""ChunkGain""")
    ChunkSequencerSetActive = property(_PySpin.Camera_ChunkSequencerSetActive_get, _PySpin.Camera_ChunkSequencerSetActive_set, doc=r"""ChunkSequencerSetActive""")
    ChunkCRC = property(_PySpin.Camera_ChunkCRC_get, _PySpin.Camera_ChunkCRC_set, doc=r"""ChunkCRC""")
    ChunkOffsetX = property(_PySpin.Camera_ChunkOffsetX_get, _PySpin.Camera_ChunkOffsetX_set, doc=r"""ChunkOffsetX""")
    ChunkOffsetY = property(_PySpin.Camera_ChunkOffsetY_get, _PySpin.Camera_ChunkOffsetY_set, doc=r"""ChunkOffsetY""")
    ChunkEnable = property(_PySpin.Camera_ChunkEnable_get, _PySpin.Camera_ChunkEnable_set, doc=r"""ChunkEnable""")
    ChunkSerialDataLength = property(_PySpin.Camera_ChunkSerialDataLength_get, _PySpin.Camera_ChunkSerialDataLength_set, doc=r"""ChunkSerialDataLength""")
    FileAccessOffset = property(_PySpin.Camera_FileAccessOffset_get, _PySpin.Camera_FileAccessOffset_set, doc=r"""FileAccessOffset""")
    FileAccessLength = property(_PySpin.Camera_FileAccessLength_get, _PySpin.Camera_FileAccessLength_set, doc=r"""FileAccessLength""")
    FileOperationStatus = property(_PySpin.Camera_FileOperationStatus_get, _PySpin.Camera_FileOperationStatus_set, doc=r"""FileOperationStatus""")
    FileOperationExecute = property(_PySpin.Camera_FileOperationExecute_get, _PySpin.Camera_FileOperationExecute_set, doc=r"""FileOperationExecute""")
    FileOpenMode = property(_PySpin.Camera_FileOpenMode_get, _PySpin.Camera_FileOpenMode_set, doc=r"""FileOpenMode""")
    FileOperationResult = property(_PySpin.Camera_FileOperationResult_get, _PySpin.Camera_FileOperationResult_set, doc=r"""FileOperationResult""")
    FileOperationSelector = property(_PySpin.Camera_FileOperationSelector_get, _PySpin.Camera_FileOperationSelector_set, doc=r"""FileOperationSelector""")
    FileSelector = property(_PySpin.Camera_FileSelector_get, _PySpin.Camera_FileSelector_set, doc=r"""FileSelector""")
    FileSize = property(_PySpin.Camera_FileSize_get, _PySpin.Camera_FileSize_set, doc=r"""FileSize""")
    BinningSelector = property(_PySpin.Camera_BinningSelector_get, _PySpin.Camera_BinningSelector_set, doc=r"""BinningSelector""")
    PixelDynamicRangeMin = property(_PySpin.Camera_PixelDynamicRangeMin_get, _PySpin.Camera_PixelDynamicRangeMin_set, doc=r"""PixelDynamicRangeMin""")
    PixelDynamicRangeMax = property(_PySpin.Camera_PixelDynamicRangeMax_get, _PySpin.Camera_PixelDynamicRangeMax_set, doc=r"""PixelDynamicRangeMax""")
    OffsetY = property(_PySpin.Camera_OffsetY_get, _PySpin.Camera_OffsetY_set, doc=r"""OffsetY""")
    BinningHorizontal = property(_PySpin.Camera_BinningHorizontal_get, _PySpin.Camera_BinningHorizontal_set, doc=r"""BinningHorizontal""")
    Width = property(_PySpin.Camera_Width_get, _PySpin.Camera_Width_set, doc=r"""Width""")
    TestPatternGeneratorSelector = property(_PySpin.Camera_TestPatternGeneratorSelector_get, _PySpin.Camera_TestPatternGeneratorSelector_set, doc=r"""TestPatternGeneratorSelector""")
    CompressionRatio = property(_PySpin.Camera_CompressionRatio_get, _PySpin.Camera_CompressionRatio_set, doc=r"""CompressionRatio""")
    CompressionSaturationPriority = property(_PySpin.Camera_CompressionSaturationPriority_get, _PySpin.Camera_CompressionSaturationPriority_set, doc=r"""CompressionSaturationPriority""")
    ReverseX = property(_PySpin.Camera_ReverseX_get, _PySpin.Camera_ReverseX_set, doc=r"""ReverseX""")
    ReverseY = property(_PySpin.Camera_ReverseY_get, _PySpin.Camera_ReverseY_set, doc=r"""ReverseY""")
    TestPattern = property(_PySpin.Camera_TestPattern_get, _PySpin.Camera_TestPattern_set, doc=r"""TestPattern""")
    PixelColorFilter = property(_PySpin.Camera_PixelColorFilter_get, _PySpin.Camera_PixelColorFilter_set, doc=r"""PixelColorFilter""")
    WidthMax = property(_PySpin.Camera_WidthMax_get, _PySpin.Camera_WidthMax_set, doc=r"""WidthMax""")
    AdcBitDepth = property(_PySpin.Camera_AdcBitDepth_get, _PySpin.Camera_AdcBitDepth_set, doc=r"""AdcBitDepth""")
    BinningVertical = property(_PySpin.Camera_BinningVertical_get, _PySpin.Camera_BinningVertical_set, doc=r"""BinningVertical""")
    DecimationHorizontalMode = property(_PySpin.Camera_DecimationHorizontalMode_get, _PySpin.Camera_DecimationHorizontalMode_set, doc=r"""DecimationHorizontalMode""")
    BinningVerticalMode = property(_PySpin.Camera_BinningVerticalMode_get, _PySpin.Camera_BinningVerticalMode_set, doc=r"""BinningVerticalMode""")
    OffsetX = property(_PySpin.Camera_OffsetX_get, _PySpin.Camera_OffsetX_set, doc=r"""OffsetX""")
    HeightMax = property(_PySpin.Camera_HeightMax_get, _PySpin.Camera_HeightMax_set, doc=r"""HeightMax""")
    DecimationHorizontal = property(_PySpin.Camera_DecimationHorizontal_get, _PySpin.Camera_DecimationHorizontal_set, doc=r"""DecimationHorizontal""")
    PixelSize = property(_PySpin.Camera_PixelSize_get, _PySpin.Camera_PixelSize_set, doc=r"""PixelSize""")
    SensorHeight = property(_PySpin.Camera_SensorHeight_get, _PySpin.Camera_SensorHeight_set, doc=r"""SensorHeight""")
    DecimationSelector = property(_PySpin.Camera_DecimationSelector_get, _PySpin.Camera_DecimationSelector_set, doc=r"""DecimationSelector""")
    IspEnable = property(_PySpin.Camera_IspEnable_get, _PySpin.Camera_IspEnable_set, doc=r"""IspEnable""")
    AdaptiveCompressionEnable = property(_PySpin.Camera_AdaptiveCompressionEnable_get, _PySpin.Camera_AdaptiveCompressionEnable_set, doc=r"""AdaptiveCompressionEnable""")
    ImageCompressionMode = property(_PySpin.Camera_ImageCompressionMode_get, _PySpin.Camera_ImageCompressionMode_set, doc=r"""ImageCompressionMode""")
    DecimationVertical = property(_PySpin.Camera_DecimationVertical_get, _PySpin.Camera_DecimationVertical_set, doc=r"""DecimationVertical""")
    Height = property(_PySpin.Camera_Height_get, _PySpin.Camera_Height_set, doc=r"""Height""")
    BinningHorizontalMode = property(_PySpin.Camera_BinningHorizontalMode_get, _PySpin.Camera_BinningHorizontalMode_set, doc=r"""BinningHorizontalMode""")
    PixelFormat = property(_PySpin.Camera_PixelFormat_get, _PySpin.Camera_PixelFormat_set, doc=r"""PixelFormat""")
    SensorWidth = property(_PySpin.Camera_SensorWidth_get, _PySpin.Camera_SensorWidth_set, doc=r"""SensorWidth""")
    DecimationVerticalMode = property(_PySpin.Camera_DecimationVerticalMode_get, _PySpin.Camera_DecimationVerticalMode_set, doc=r"""DecimationVerticalMode""")
    TestEventGenerate = property(_PySpin.Camera_TestEventGenerate_get, _PySpin.Camera_TestEventGenerate_set, doc=r"""TestEventGenerate""")
    TriggerEventTest = property(_PySpin.Camera_TriggerEventTest_get, _PySpin.Camera_TriggerEventTest_set, doc=r"""TriggerEventTest""")
    GuiXmlManifestAddress = property(_PySpin.Camera_GuiXmlManifestAddress_get, _PySpin.Camera_GuiXmlManifestAddress_set, doc=r"""GuiXmlManifestAddress""")
    Test0001 = property(_PySpin.Camera_Test0001_get, _PySpin.Camera_Test0001_set, doc=r"""Test0001""")
    V3_3Enable = property(_PySpin.Camera_V3_3Enable_get, _PySpin.Camera_V3_3Enable_set, doc=r"""V3_3Enable""")
    LineMode = property(_PySpin.Camera_LineMode_get, _PySpin.Camera_LineMode_set, doc=r"""LineMode""")
    LineSource = property(_PySpin.Camera_LineSource_get, _PySpin.Camera_LineSource_set, doc=r"""LineSource""")
    LineInputFilterSelector = property(_PySpin.Camera_LineInputFilterSelector_get, _PySpin.Camera_LineInputFilterSelector_set, doc=r"""LineInputFilterSelector""")
    UserOutputValue = property(_PySpin.Camera_UserOutputValue_get, _PySpin.Camera_UserOutputValue_set, doc=r"""UserOutputValue""")
    UserOutputValueAll = property(_PySpin.Camera_UserOutputValueAll_get, _PySpin.Camera_UserOutputValueAll_set, doc=r"""UserOutputValueAll""")
    UserOutputSelector = property(_PySpin.Camera_UserOutputSelector_get, _PySpin.Camera_UserOutputSelector_set, doc=r"""UserOutputSelector""")
    LineStatus = property(_PySpin.Camera_LineStatus_get, _PySpin.Camera_LineStatus_set, doc=r"""LineStatus""")
    LineFormat = property(_PySpin.Camera_LineFormat_get, _PySpin.Camera_LineFormat_set, doc=r"""LineFormat""")
    LineStatusAll = property(_PySpin.Camera_LineStatusAll_get, _PySpin.Camera_LineStatusAll_set, doc=r"""LineStatusAll""")
    LineSelector = property(_PySpin.Camera_LineSelector_get, _PySpin.Camera_LineSelector_set, doc=r"""LineSelector""")
    ExposureActiveMode = property(_PySpin.Camera_ExposureActiveMode_get, _PySpin.Camera_ExposureActiveMode_set, doc=r"""ExposureActiveMode""")
    LineInverter = property(_PySpin.Camera_LineInverter_get, _PySpin.Camera_LineInverter_set, doc=r"""LineInverter""")
    LineFilterWidth = property(_PySpin.Camera_LineFilterWidth_get, _PySpin.Camera_LineFilterWidth_set, doc=r"""LineFilterWidth""")
    CounterTriggerActivation = property(_PySpin.Camera_CounterTriggerActivation_get, _PySpin.Camera_CounterTriggerActivation_set, doc=r"""CounterTriggerActivation""")
    CounterValue = property(_PySpin.Camera_CounterValue_get, _PySpin.Camera_CounterValue_set, doc=r"""CounterValue""")
    CounterSelector = property(_PySpin.Camera_CounterSelector_get, _PySpin.Camera_CounterSelector_set, doc=r"""CounterSelector""")
    CounterValueAtReset = property(_PySpin.Camera_CounterValueAtReset_get, _PySpin.Camera_CounterValueAtReset_set, doc=r"""CounterValueAtReset""")
    CounterStatus = property(_PySpin.Camera_CounterStatus_get, _PySpin.Camera_CounterStatus_set, doc=r"""CounterStatus""")
    CounterTriggerSource = property(_PySpin.Camera_CounterTriggerSource_get, _PySpin.Camera_CounterTriggerSource_set, doc=r"""CounterTriggerSource""")
    CounterDelay = property(_PySpin.Camera_CounterDelay_get, _PySpin.Camera_CounterDelay_set, doc=r"""CounterDelay""")
    CounterResetSource = property(_PySpin.Camera_CounterResetSource_get, _PySpin.Camera_CounterResetSource_set, doc=r"""CounterResetSource""")
    CounterEventSource = property(_PySpin.Camera_CounterEventSource_get, _PySpin.Camera_CounterEventSource_set, doc=r"""CounterEventSource""")
    CounterEventActivation = property(_PySpin.Camera_CounterEventActivation_get, _PySpin.Camera_CounterEventActivation_set, doc=r"""CounterEventActivation""")
    CounterDuration = property(_PySpin.Camera_CounterDuration_get, _PySpin.Camera_CounterDuration_set, doc=r"""CounterDuration""")
    CounterResetActivation = property(_PySpin.Camera_CounterResetActivation_get, _PySpin.Camera_CounterResetActivation_set, doc=r"""CounterResetActivation""")
    DeviceType = property(_PySpin.Camera_DeviceType_get, _PySpin.Camera_DeviceType_set, doc=r"""DeviceType""")
    DeviceFamilyName = property(_PySpin.Camera_DeviceFamilyName_get, _PySpin.Camera_DeviceFamilyName_set, doc=r"""DeviceFamilyName""")
    DeviceSFNCVersionMajor = property(_PySpin.Camera_DeviceSFNCVersionMajor_get, _PySpin.Camera_DeviceSFNCVersionMajor_set, doc=r"""DeviceSFNCVersionMajor""")
    DeviceSFNCVersionMinor = property(_PySpin.Camera_DeviceSFNCVersionMinor_get, _PySpin.Camera_DeviceSFNCVersionMinor_set, doc=r"""DeviceSFNCVersionMinor""")
    DeviceSFNCVersionSubMinor = property(_PySpin.Camera_DeviceSFNCVersionSubMinor_get, _PySpin.Camera_DeviceSFNCVersionSubMinor_set, doc=r"""DeviceSFNCVersionSubMinor""")
    DeviceManifestEntrySelector = property(_PySpin.Camera_DeviceManifestEntrySelector_get, _PySpin.Camera_DeviceManifestEntrySelector_set, doc=r"""DeviceManifestEntrySelector""")
    DeviceManifestXMLMajorVersion = property(_PySpin.Camera_DeviceManifestXMLMajorVersion_get, _PySpin.Camera_DeviceManifestXMLMajorVersion_set, doc=r"""DeviceManifestXMLMajorVersion""")
    DeviceManifestXMLMinorVersion = property(_PySpin.Camera_DeviceManifestXMLMinorVersion_get, _PySpin.Camera_DeviceManifestXMLMinorVersion_set, doc=r"""DeviceManifestXMLMinorVersion""")
    DeviceManifestXMLSubMinorVersion = property(_PySpin.Camera_DeviceManifestXMLSubMinorVersion_get, _PySpin.Camera_DeviceManifestXMLSubMinorVersion_set, doc=r"""DeviceManifestXMLSubMinorVersion""")
    DeviceManifestSchemaMajorVersion = property(_PySpin.Camera_DeviceManifestSchemaMajorVersion_get, _PySpin.Camera_DeviceManifestSchemaMajorVersion_set, doc=r"""DeviceManifestSchemaMajorVersion""")
    DeviceManifestSchemaMinorVersion = property(_PySpin.Camera_DeviceManifestSchemaMinorVersion_get, _PySpin.Camera_DeviceManifestSchemaMinorVersion_set, doc=r"""DeviceManifestSchemaMinorVersion""")
    DeviceManifestPrimaryURL = property(_PySpin.Camera_DeviceManifestPrimaryURL_get, _PySpin.Camera_DeviceManifestPrimaryURL_set, doc=r"""DeviceManifestPrimaryURL""")
    DeviceManifestSecondaryURL = property(_PySpin.Camera_DeviceManifestSecondaryURL_get, _PySpin.Camera_DeviceManifestSecondaryURL_set, doc=r"""DeviceManifestSecondaryURL""")
    DeviceTLVersionSubMinor = property(_PySpin.Camera_DeviceTLVersionSubMinor_get, _PySpin.Camera_DeviceTLVersionSubMinor_set, doc=r"""DeviceTLVersionSubMinor""")
    DeviceGenCPVersionMajor = property(_PySpin.Camera_DeviceGenCPVersionMajor_get, _PySpin.Camera_DeviceGenCPVersionMajor_set, doc=r"""DeviceGenCPVersionMajor""")
    DeviceGenCPVersionMinor = property(_PySpin.Camera_DeviceGenCPVersionMinor_get, _PySpin.Camera_DeviceGenCPVersionMinor_set, doc=r"""DeviceGenCPVersionMinor""")
    DeviceConnectionSelector = property(_PySpin.Camera_DeviceConnectionSelector_get, _PySpin.Camera_DeviceConnectionSelector_set, doc=r"""DeviceConnectionSelector""")
    DeviceConnectionSpeed = property(_PySpin.Camera_DeviceConnectionSpeed_get, _PySpin.Camera_DeviceConnectionSpeed_set, doc=r"""DeviceConnectionSpeed""")
    DeviceConnectionStatus = property(_PySpin.Camera_DeviceConnectionStatus_get, _PySpin.Camera_DeviceConnectionStatus_set, doc=r"""DeviceConnectionStatus""")
    DeviceLinkSelector = property(_PySpin.Camera_DeviceLinkSelector_get, _PySpin.Camera_DeviceLinkSelector_set, doc=r"""DeviceLinkSelector""")
    DeviceLinkThroughputLimitMode = property(_PySpin.Camera_DeviceLinkThroughputLimitMode_get, _PySpin.Camera_DeviceLinkThroughputLimitMode_set, doc=r"""DeviceLinkThroughputLimitMode""")
    DeviceLinkConnectionCount = property(_PySpin.Camera_DeviceLinkConnectionCount_get, _PySpin.Camera_DeviceLinkConnectionCount_set, doc=r"""DeviceLinkConnectionCount""")
    DeviceLinkHeartbeatMode = property(_PySpin.Camera_DeviceLinkHeartbeatMode_get, _PySpin.Camera_DeviceLinkHeartbeatMode_set, doc=r"""DeviceLinkHeartbeatMode""")
    DeviceLinkHeartbeatTimeout = property(_PySpin.Camera_DeviceLinkHeartbeatTimeout_get, _PySpin.Camera_DeviceLinkHeartbeatTimeout_set, doc=r"""DeviceLinkHeartbeatTimeout""")
    DeviceLinkCommandTimeout = property(_PySpin.Camera_DeviceLinkCommandTimeout_get, _PySpin.Camera_DeviceLinkCommandTimeout_set, doc=r"""DeviceLinkCommandTimeout""")
    DeviceStreamChannelSelector = property(_PySpin.Camera_DeviceStreamChannelSelector_get, _PySpin.Camera_DeviceStreamChannelSelector_set, doc=r"""DeviceStreamChannelSelector""")
    DeviceStreamChannelType = property(_PySpin.Camera_DeviceStreamChannelType_get, _PySpin.Camera_DeviceStreamChannelType_set, doc=r"""DeviceStreamChannelType""")
    DeviceStreamChannelLink = property(_PySpin.Camera_DeviceStreamChannelLink_get, _PySpin.Camera_DeviceStreamChannelLink_set, doc=r"""DeviceStreamChannelLink""")
    DeviceStreamChannelEndianness = property(_PySpin.Camera_DeviceStreamChannelEndianness_get, _PySpin.Camera_DeviceStreamChannelEndianness_set, doc=r"""DeviceStreamChannelEndianness""")
    DeviceStreamChannelPacketSize = property(_PySpin.Camera_DeviceStreamChannelPacketSize_get, _PySpin.Camera_DeviceStreamChannelPacketSize_set, doc=r"""DeviceStreamChannelPacketSize""")
    DeviceFeaturePersistenceStart = property(_PySpin.Camera_DeviceFeaturePersistenceStart_get, _PySpin.Camera_DeviceFeaturePersistenceStart_set, doc=r"""DeviceFeaturePersistenceStart""")
    DeviceFeaturePersistenceEnd = property(_PySpin.Camera_DeviceFeaturePersistenceEnd_get, _PySpin.Camera_DeviceFeaturePersistenceEnd_set, doc=r"""DeviceFeaturePersistenceEnd""")
    DeviceRegistersStreamingStart = property(_PySpin.Camera_DeviceRegistersStreamingStart_get, _PySpin.Camera_DeviceRegistersStreamingStart_set, doc=r"""DeviceRegistersStreamingStart""")
    DeviceRegistersStreamingEnd = property(_PySpin.Camera_DeviceRegistersStreamingEnd_get, _PySpin.Camera_DeviceRegistersStreamingEnd_set, doc=r"""DeviceRegistersStreamingEnd""")
    DeviceRegistersCheck = property(_PySpin.Camera_DeviceRegistersCheck_get, _PySpin.Camera_DeviceRegistersCheck_set, doc=r"""DeviceRegistersCheck""")
    DeviceRegistersValid = property(_PySpin.Camera_DeviceRegistersValid_get, _PySpin.Camera_DeviceRegistersValid_set, doc=r"""DeviceRegistersValid""")
    DeviceClockSelector = property(_PySpin.Camera_DeviceClockSelector_get, _PySpin.Camera_DeviceClockSelector_set, doc=r"""DeviceClockSelector""")
    DeviceClockFrequency = property(_PySpin.Camera_DeviceClockFrequency_get, _PySpin.Camera_DeviceClockFrequency_set, doc=r"""DeviceClockFrequency""")
    DeviceSerialPortSelector = property(_PySpin.Camera_DeviceSerialPortSelector_get, _PySpin.Camera_DeviceSerialPortSelector_set, doc=r"""DeviceSerialPortSelector""")
    DeviceSerialPortBaudRate = property(_PySpin.Camera_DeviceSerialPortBaudRate_get, _PySpin.Camera_DeviceSerialPortBaudRate_set, doc=r"""DeviceSerialPortBaudRate""")
    Timestamp = property(_PySpin.Camera_Timestamp_get, _PySpin.Camera_Timestamp_set, doc=r"""Timestamp""")
    SensorTaps = property(_PySpin.Camera_SensorTaps_get, _PySpin.Camera_SensorTaps_set, doc=r"""SensorTaps""")
    SensorDigitizationTaps = property(_PySpin.Camera_SensorDigitizationTaps_get, _PySpin.Camera_SensorDigitizationTaps_set, doc=r"""SensorDigitizationTaps""")
    RegionSelector = property(_PySpin.Camera_RegionSelector_get, _PySpin.Camera_RegionSelector_set, doc=r"""RegionSelector""")
    RegionMode = property(_PySpin.Camera_RegionMode_get, _PySpin.Camera_RegionMode_set, doc=r"""RegionMode""")
    RegionDestination = property(_PySpin.Camera_RegionDestination_get, _PySpin.Camera_RegionDestination_set, doc=r"""RegionDestination""")
    ImageComponentSelector = property(_PySpin.Camera_ImageComponentSelector_get, _PySpin.Camera_ImageComponentSelector_set, doc=r"""ImageComponentSelector""")
    ImageComponentEnable = property(_PySpin.Camera_ImageComponentEnable_get, _PySpin.Camera_ImageComponentEnable_set, doc=r"""ImageComponentEnable""")
    LinePitch = property(_PySpin.Camera_LinePitch_get, _PySpin.Camera_LinePitch_set, doc=r"""LinePitch""")
    PixelFormatInfoSelector = property(_PySpin.Camera_PixelFormatInfoSelector_get, _PySpin.Camera_PixelFormatInfoSelector_set, doc=r"""PixelFormatInfoSelector""")
    PixelFormatInfoID = property(_PySpin.Camera_PixelFormatInfoID_get, _PySpin.Camera_PixelFormatInfoID_set, doc=r"""PixelFormatInfoID""")
    Deinterlacing = property(_PySpin.Camera_Deinterlacing_get, _PySpin.Camera_Deinterlacing_set, doc=r"""Deinterlacing""")
    ImageCompressionRateOption = property(_PySpin.Camera_ImageCompressionRateOption_get, _PySpin.Camera_ImageCompressionRateOption_set, doc=r"""ImageCompressionRateOption""")
    ImageCompressionQuality = property(_PySpin.Camera_ImageCompressionQuality_get, _PySpin.Camera_ImageCompressionQuality_set, doc=r"""ImageCompressionQuality""")
    ImageCompressionBitrate = property(_PySpin.Camera_ImageCompressionBitrate_get, _PySpin.Camera_ImageCompressionBitrate_set, doc=r"""ImageCompressionBitrate""")
    ImageCompressionJPEGFormatOption = property(_PySpin.Camera_ImageCompressionJPEGFormatOption_get, _PySpin.Camera_ImageCompressionJPEGFormatOption_set, doc=r"""ImageCompressionJPEGFormatOption""")
    AcquisitionAbort = property(_PySpin.Camera_AcquisitionAbort_get, _PySpin.Camera_AcquisitionAbort_set, doc=r"""AcquisitionAbort""")
    AcquisitionArm = property(_PySpin.Camera_AcquisitionArm_get, _PySpin.Camera_AcquisitionArm_set, doc=r"""AcquisitionArm""")
    AcquisitionStatusSelector = property(_PySpin.Camera_AcquisitionStatusSelector_get, _PySpin.Camera_AcquisitionStatusSelector_set, doc=r"""AcquisitionStatusSelector""")
    AcquisitionStatus = property(_PySpin.Camera_AcquisitionStatus_get, _PySpin.Camera_AcquisitionStatus_set, doc=r"""AcquisitionStatus""")
    TriggerDivider = property(_PySpin.Camera_TriggerDivider_get, _PySpin.Camera_TriggerDivider_set, doc=r"""TriggerDivider""")
    TriggerMultiplier = property(_PySpin.Camera_TriggerMultiplier_get, _PySpin.Camera_TriggerMultiplier_set, doc=r"""TriggerMultiplier""")
    ExposureTimeMode = property(_PySpin.Camera_ExposureTimeMode_get, _PySpin.Camera_ExposureTimeMode_set, doc=r"""ExposureTimeMode""")
    ExposureTimeSelector = property(_PySpin.Camera_ExposureTimeSelector_get, _PySpin.Camera_ExposureTimeSelector_set, doc=r"""ExposureTimeSelector""")
    GainAutoBalance = property(_PySpin.Camera_GainAutoBalance_get, _PySpin.Camera_GainAutoBalance_set, doc=r"""GainAutoBalance""")
    BlackLevelAuto = property(_PySpin.Camera_BlackLevelAuto_get, _PySpin.Camera_BlackLevelAuto_set, doc=r"""BlackLevelAuto""")
    BlackLevelAutoBalance = property(_PySpin.Camera_BlackLevelAutoBalance_get, _PySpin.Camera_BlackLevelAutoBalance_set, doc=r"""BlackLevelAutoBalance""")
    WhiteClipSelector = property(_PySpin.Camera_WhiteClipSelector_get, _PySpin.Camera_WhiteClipSelector_set, doc=r"""WhiteClipSelector""")
    WhiteClip = property(_PySpin.Camera_WhiteClip_get, _PySpin.Camera_WhiteClip_set, doc=r"""WhiteClip""")
    LUTValueAll = property(_PySpin.Camera_LUTValueAll_get, _PySpin.Camera_LUTValueAll_set, doc=r"""LUTValueAll""")
    UserOutputValueAllMask = property(_PySpin.Camera_UserOutputValueAllMask_get, _PySpin.Camera_UserOutputValueAllMask_set, doc=r"""UserOutputValueAllMask""")
    CounterReset = property(_PySpin.Camera_CounterReset_get, _PySpin.Camera_CounterReset_set, doc=r"""CounterReset""")
    TimerSelector = property(_PySpin.Camera_TimerSelector_get, _PySpin.Camera_TimerSelector_set, doc=r"""TimerSelector""")
    TimerDuration = property(_PySpin.Camera_TimerDuration_get, _PySpin.Camera_TimerDuration_set, doc=r"""TimerDuration""")
    TimerDelay = property(_PySpin.Camera_TimerDelay_get, _PySpin.Camera_TimerDelay_set, doc=r"""TimerDelay""")
    TimerReset = property(_PySpin.Camera_TimerReset_get, _PySpin.Camera_TimerReset_set, doc=r"""TimerReset""")
    TimerValue = property(_PySpin.Camera_TimerValue_get, _PySpin.Camera_TimerValue_set, doc=r"""TimerValue""")
    TimerStatus = property(_PySpin.Camera_TimerStatus_get, _PySpin.Camera_TimerStatus_set, doc=r"""TimerStatus""")
    TimerTriggerSource = property(_PySpin.Camera_TimerTriggerSource_get, _PySpin.Camera_TimerTriggerSource_set, doc=r"""TimerTriggerSource""")
    TimerTriggerActivation = property(_PySpin.Camera_TimerTriggerActivation_get, _PySpin.Camera_TimerTriggerActivation_set, doc=r"""TimerTriggerActivation""")
    EncoderSelector = property(_PySpin.Camera_EncoderSelector_get, _PySpin.Camera_EncoderSelector_set, doc=r"""EncoderSelector""")
    EncoderSourceA = property(_PySpin.Camera_EncoderSourceA_get, _PySpin.Camera_EncoderSourceA_set, doc=r"""EncoderSourceA""")
    EncoderSourceB = property(_PySpin.Camera_EncoderSourceB_get, _PySpin.Camera_EncoderSourceB_set, doc=r"""EncoderSourceB""")
    EncoderMode = property(_PySpin.Camera_EncoderMode_get, _PySpin.Camera_EncoderMode_set, doc=r"""EncoderMode""")
    EncoderDivider = property(_PySpin.Camera_EncoderDivider_get, _PySpin.Camera_EncoderDivider_set, doc=r"""EncoderDivider""")
    EncoderOutputMode = property(_PySpin.Camera_EncoderOutputMode_get, _PySpin.Camera_EncoderOutputMode_set, doc=r"""EncoderOutputMode""")
    EncoderStatus = property(_PySpin.Camera_EncoderStatus_get, _PySpin.Camera_EncoderStatus_set, doc=r"""EncoderStatus""")
    EncoderTimeout = property(_PySpin.Camera_EncoderTimeout_get, _PySpin.Camera_EncoderTimeout_set, doc=r"""EncoderTimeout""")
    EncoderResetSource = property(_PySpin.Camera_EncoderResetSource_get, _PySpin.Camera_EncoderResetSource_set, doc=r"""EncoderResetSource""")
    EncoderResetActivation = property(_PySpin.Camera_EncoderResetActivation_get, _PySpin.Camera_EncoderResetActivation_set, doc=r"""EncoderResetActivation""")
    EncoderReset = property(_PySpin.Camera_EncoderReset_get, _PySpin.Camera_EncoderReset_set, doc=r"""EncoderReset""")
    EncoderValue = property(_PySpin.Camera_EncoderValue_get, _PySpin.Camera_EncoderValue_set, doc=r"""EncoderValue""")
    EncoderValueAtReset = property(_PySpin.Camera_EncoderValueAtReset_get, _PySpin.Camera_EncoderValueAtReset_set, doc=r"""EncoderValueAtReset""")
    SoftwareSignalSelector = property(_PySpin.Camera_SoftwareSignalSelector_get, _PySpin.Camera_SoftwareSignalSelector_set, doc=r"""SoftwareSignalSelector""")
    SoftwareSignalPulse = property(_PySpin.Camera_SoftwareSignalPulse_get, _PySpin.Camera_SoftwareSignalPulse_set, doc=r"""SoftwareSignalPulse""")
    ActionUnconditionalMode = property(_PySpin.Camera_ActionUnconditionalMode_get, _PySpin.Camera_ActionUnconditionalMode_set, doc=r"""ActionUnconditionalMode""")
    ActionDeviceKey = property(_PySpin.Camera_ActionDeviceKey_get, _PySpin.Camera_ActionDeviceKey_set, doc=r"""ActionDeviceKey""")
    ActionQueueSize = property(_PySpin.Camera_ActionQueueSize_get, _PySpin.Camera_ActionQueueSize_set, doc=r"""ActionQueueSize""")
    ActionSelector = property(_PySpin.Camera_ActionSelector_get, _PySpin.Camera_ActionSelector_set, doc=r"""ActionSelector""")
    ActionGroupMask = property(_PySpin.Camera_ActionGroupMask_get, _PySpin.Camera_ActionGroupMask_set, doc=r"""ActionGroupMask""")
    ActionGroupKey = property(_PySpin.Camera_ActionGroupKey_get, _PySpin.Camera_ActionGroupKey_set, doc=r"""ActionGroupKey""")
    EventAcquisitionTrigger = property(_PySpin.Camera_EventAcquisitionTrigger_get, _PySpin.Camera_EventAcquisitionTrigger_set, doc=r"""EventAcquisitionTrigger""")
    EventAcquisitionTriggerTimestamp = property(_PySpin.Camera_EventAcquisitionTriggerTimestamp_get, _PySpin.Camera_EventAcquisitionTriggerTimestamp_set, doc=r"""EventAcquisitionTriggerTimestamp""")
    EventAcquisitionTriggerFrameID = property(_PySpin.Camera_EventAcquisitionTriggerFrameID_get, _PySpin.Camera_EventAcquisitionTriggerFrameID_set, doc=r"""EventAcquisitionTriggerFrameID""")
    EventAcquisitionStart = property(_PySpin.Camera_EventAcquisitionStart_get, _PySpin.Camera_EventAcquisitionStart_set, doc=r"""EventAcquisitionStart""")
    EventAcquisitionStartTimestamp = property(_PySpin.Camera_EventAcquisitionStartTimestamp_get, _PySpin.Camera_EventAcquisitionStartTimestamp_set, doc=r"""EventAcquisitionStartTimestamp""")
    EventAcquisitionStartFrameID = property(_PySpin.Camera_EventAcquisitionStartFrameID_get, _PySpin.Camera_EventAcquisitionStartFrameID_set, doc=r"""EventAcquisitionStartFrameID""")
    EventAcquisitionEnd = property(_PySpin.Camera_EventAcquisitionEnd_get, _PySpin.Camera_EventAcquisitionEnd_set, doc=r"""EventAcquisitionEnd""")
    EventAcquisitionEndTimestamp = property(_PySpin.Camera_EventAcquisitionEndTimestamp_get, _PySpin.Camera_EventAcquisitionEndTimestamp_set, doc=r"""EventAcquisitionEndTimestamp""")
    EventAcquisitionEndFrameID = property(_PySpin.Camera_EventAcquisitionEndFrameID_get, _PySpin.Camera_EventAcquisitionEndFrameID_set, doc=r"""EventAcquisitionEndFrameID""")
    EventAcquisitionTransferStart = property(_PySpin.Camera_EventAcquisitionTransferStart_get, _PySpin.Camera_EventAcquisitionTransferStart_set, doc=r"""EventAcquisitionTransferStart""")
    EventAcquisitionTransferStartTimestamp = property(_PySpin.Camera_EventAcquisitionTransferStartTimestamp_get, _PySpin.Camera_EventAcquisitionTransferStartTimestamp_set, doc=r"""EventAcquisitionTransferStartTimestamp""")
    EventAcquisitionTransferStartFrameID = property(_PySpin.Camera_EventAcquisitionTransferStartFrameID_get, _PySpin.Camera_EventAcquisitionTransferStartFrameID_set, doc=r"""EventAcquisitionTransferStartFrameID""")
    EventAcquisitionTransferEnd = property(_PySpin.Camera_EventAcquisitionTransferEnd_get, _PySpin.Camera_EventAcquisitionTransferEnd_set, doc=r"""EventAcquisitionTransferEnd""")
    EventAcquisitionTransferEndTimestamp = property(_PySpin.Camera_EventAcquisitionTransferEndTimestamp_get, _PySpin.Camera_EventAcquisitionTransferEndTimestamp_set, doc=r"""EventAcquisitionTransferEndTimestamp""")
    EventAcquisitionTransferEndFrameID = property(_PySpin.Camera_EventAcquisitionTransferEndFrameID_get, _PySpin.Camera_EventAcquisitionTransferEndFrameID_set, doc=r"""EventAcquisitionTransferEndFrameID""")
    EventAcquisitionError = property(_PySpin.Camera_EventAcquisitionError_get, _PySpin.Camera_EventAcquisitionError_set, doc=r"""EventAcquisitionError""")
    EventAcquisitionErrorTimestamp = property(_PySpin.Camera_EventAcquisitionErrorTimestamp_get, _PySpin.Camera_EventAcquisitionErrorTimestamp_set, doc=r"""EventAcquisitionErrorTimestamp""")
    EventAcquisitionErrorFrameID = property(_PySpin.Camera_EventAcquisitionErrorFrameID_get, _PySpin.Camera_EventAcquisitionErrorFrameID_set, doc=r"""EventAcquisitionErrorFrameID""")
    EventFrameTrigger = property(_PySpin.Camera_EventFrameTrigger_get, _PySpin.Camera_EventFrameTrigger_set, doc=r"""EventFrameTrigger""")
    EventFrameTriggerTimestamp = property(_PySpin.Camera_EventFrameTriggerTimestamp_get, _PySpin.Camera_EventFrameTriggerTimestamp_set, doc=r"""EventFrameTriggerTimestamp""")
    EventFrameTriggerFrameID = property(_PySpin.Camera_EventFrameTriggerFrameID_get, _PySpin.Camera_EventFrameTriggerFrameID_set, doc=r"""EventFrameTriggerFrameID""")
    EventFrameStart = property(_PySpin.Camera_EventFrameStart_get, _PySpin.Camera_EventFrameStart_set, doc=r"""EventFrameStart""")
    EventFrameStartTimestamp = property(_PySpin.Camera_EventFrameStartTimestamp_get, _PySpin.Camera_EventFrameStartTimestamp_set, doc=r"""EventFrameStartTimestamp""")
    EventFrameStartFrameID = property(_PySpin.Camera_EventFrameStartFrameID_get, _PySpin.Camera_EventFrameStartFrameID_set, doc=r"""EventFrameStartFrameID""")
    EventFrameEnd = property(_PySpin.Camera_EventFrameEnd_get, _PySpin.Camera_EventFrameEnd_set, doc=r"""EventFrameEnd""")
    EventFrameEndTimestamp = property(_PySpin.Camera_EventFrameEndTimestamp_get, _PySpin.Camera_EventFrameEndTimestamp_set, doc=r"""EventFrameEndTimestamp""")
    EventFrameEndFrameID = property(_PySpin.Camera_EventFrameEndFrameID_get, _PySpin.Camera_EventFrameEndFrameID_set, doc=r"""EventFrameEndFrameID""")
    EventFrameBurstStart = property(_PySpin.Camera_EventFrameBurstStart_get, _PySpin.Camera_EventFrameBurstStart_set, doc=r"""EventFrameBurstStart""")
    EventFrameBurstStartTimestamp = property(_PySpin.Camera_EventFrameBurstStartTimestamp_get, _PySpin.Camera_EventFrameBurstStartTimestamp_set, doc=r"""EventFrameBurstStartTimestamp""")
    EventFrameBurstStartFrameID = property(_PySpin.Camera_EventFrameBurstStartFrameID_get, _PySpin.Camera_EventFrameBurstStartFrameID_set, doc=r"""EventFrameBurstStartFrameID""")
    EventFrameBurstEnd = property(_PySpin.Camera_EventFrameBurstEnd_get, _PySpin.Camera_EventFrameBurstEnd_set, doc=r"""EventFrameBurstEnd""")
    EventFrameBurstEndTimestamp = property(_PySpin.Camera_EventFrameBurstEndTimestamp_get, _PySpin.Camera_EventFrameBurstEndTimestamp_set, doc=r"""EventFrameBurstEndTimestamp""")
    EventFrameBurstEndFrameID = property(_PySpin.Camera_EventFrameBurstEndFrameID_get, _PySpin.Camera_EventFrameBurstEndFrameID_set, doc=r"""EventFrameBurstEndFrameID""")
    EventFrameTransferStart = property(_PySpin.Camera_EventFrameTransferStart_get, _PySpin.Camera_EventFrameTransferStart_set, doc=r"""EventFrameTransferStart""")
    EventFrameTransferStartTimestamp = property(_PySpin.Camera_EventFrameTransferStartTimestamp_get, _PySpin.Camera_EventFrameTransferStartTimestamp_set, doc=r"""EventFrameTransferStartTimestamp""")
    EventFrameTransferStartFrameID = property(_PySpin.Camera_EventFrameTransferStartFrameID_get, _PySpin.Camera_EventFrameTransferStartFrameID_set, doc=r"""EventFrameTransferStartFrameID""")
    EventFrameTransferEnd = property(_PySpin.Camera_EventFrameTransferEnd_get, _PySpin.Camera_EventFrameTransferEnd_set, doc=r"""EventFrameTransferEnd""")
    EventFrameTransferEndTimestamp = property(_PySpin.Camera_EventFrameTransferEndTimestamp_get, _PySpin.Camera_EventFrameTransferEndTimestamp_set, doc=r"""EventFrameTransferEndTimestamp""")
    EventFrameTransferEndFrameID = property(_PySpin.Camera_EventFrameTransferEndFrameID_get, _PySpin.Camera_EventFrameTransferEndFrameID_set, doc=r"""EventFrameTransferEndFrameID""")
    EventExposureStart = property(_PySpin.Camera_EventExposureStart_get, _PySpin.Camera_EventExposureStart_set, doc=r"""EventExposureStart""")
    EventExposureStartTimestamp = property(_PySpin.Camera_EventExposureStartTimestamp_get, _PySpin.Camera_EventExposureStartTimestamp_set, doc=r"""EventExposureStartTimestamp""")
    EventExposureStartFrameID = property(_PySpin.Camera_EventExposureStartFrameID_get, _PySpin.Camera_EventExposureStartFrameID_set, doc=r"""EventExposureStartFrameID""")
    EventStream0TransferStart = property(_PySpin.Camera_EventStream0TransferStart_get, _PySpin.Camera_EventStream0TransferStart_set, doc=r"""EventStream0TransferStart""")
    EventStream0TransferStartTimestamp = property(_PySpin.Camera_EventStream0TransferStartTimestamp_get, _PySpin.Camera_EventStream0TransferStartTimestamp_set, doc=r"""EventStream0TransferStartTimestamp""")
    EventStream0TransferStartFrameID = property(_PySpin.Camera_EventStream0TransferStartFrameID_get, _PySpin.Camera_EventStream0TransferStartFrameID_set, doc=r"""EventStream0TransferStartFrameID""")
    EventStream0TransferEnd = property(_PySpin.Camera_EventStream0TransferEnd_get, _PySpin.Camera_EventStream0TransferEnd_set, doc=r"""EventStream0TransferEnd""")
    EventStream0TransferEndTimestamp = property(_PySpin.Camera_EventStream0TransferEndTimestamp_get, _PySpin.Camera_EventStream0TransferEndTimestamp_set, doc=r"""EventStream0TransferEndTimestamp""")
    EventStream0TransferEndFrameID = property(_PySpin.Camera_EventStream0TransferEndFrameID_get, _PySpin.Camera_EventStream0TransferEndFrameID_set, doc=r"""EventStream0TransferEndFrameID""")
    EventStream0TransferPause = property(_PySpin.Camera_EventStream0TransferPause_get, _PySpin.Camera_EventStream0TransferPause_set, doc=r"""EventStream0TransferPause""")
    EventStream0TransferPauseTimestamp = property(_PySpin.Camera_EventStream0TransferPauseTimestamp_get, _PySpin.Camera_EventStream0TransferPauseTimestamp_set, doc=r"""EventStream0TransferPauseTimestamp""")
    EventStream0TransferPauseFrameID = property(_PySpin.Camera_EventStream0TransferPauseFrameID_get, _PySpin.Camera_EventStream0TransferPauseFrameID_set, doc=r"""EventStream0TransferPauseFrameID""")
    EventStream0TransferResume = property(_PySpin.Camera_EventStream0TransferResume_get, _PySpin.Camera_EventStream0TransferResume_set, doc=r"""EventStream0TransferResume""")
    EventStream0TransferResumeTimestamp = property(_PySpin.Camera_EventStream0TransferResumeTimestamp_get, _PySpin.Camera_EventStream0TransferResumeTimestamp_set, doc=r"""EventStream0TransferResumeTimestamp""")
    EventStream0TransferResumeFrameID = property(_PySpin.Camera_EventStream0TransferResumeFrameID_get, _PySpin.Camera_EventStream0TransferResumeFrameID_set, doc=r"""EventStream0TransferResumeFrameID""")
    EventStream0TransferBlockStart = property(_PySpin.Camera_EventStream0TransferBlockStart_get, _PySpin.Camera_EventStream0TransferBlockStart_set, doc=r"""EventStream0TransferBlockStart""")
    EventStream0TransferBlockStartTimestamp = property(_PySpin.Camera_EventStream0TransferBlockStartTimestamp_get, _PySpin.Camera_EventStream0TransferBlockStartTimestamp_set, doc=r"""EventStream0TransferBlockStartTimestamp""")
    EventStream0TransferBlockStartFrameID = property(_PySpin.Camera_EventStream0TransferBlockStartFrameID_get, _PySpin.Camera_EventStream0TransferBlockStartFrameID_set, doc=r"""EventStream0TransferBlockStartFrameID""")
    EventStream0TransferBlockEnd = property(_PySpin.Camera_EventStream0TransferBlockEnd_get, _PySpin.Camera_EventStream0TransferBlockEnd_set, doc=r"""EventStream0TransferBlockEnd""")
    EventStream0TransferBlockEndTimestamp = property(_PySpin.Camera_EventStream0TransferBlockEndTimestamp_get, _PySpin.Camera_EventStream0TransferBlockEndTimestamp_set, doc=r"""EventStream0TransferBlockEndTimestamp""")
    EventStream0TransferBlockEndFrameID = property(_PySpin.Camera_EventStream0TransferBlockEndFrameID_get, _PySpin.Camera_EventStream0TransferBlockEndFrameID_set, doc=r"""EventStream0TransferBlockEndFrameID""")
    EventStream0TransferBlockTrigger = property(_PySpin.Camera_EventStream0TransferBlockTrigger_get, _PySpin.Camera_EventStream0TransferBlockTrigger_set, doc=r"""EventStream0TransferBlockTrigger""")
    EventStream0TransferBlockTriggerTimestamp = property(_PySpin.Camera_EventStream0TransferBlockTriggerTimestamp_get, _PySpin.Camera_EventStream0TransferBlockTriggerTimestamp_set, doc=r"""EventStream0TransferBlockTriggerTimestamp""")
    EventStream0TransferBlockTriggerFrameID = property(_PySpin.Camera_EventStream0TransferBlockTriggerFrameID_get, _PySpin.Camera_EventStream0TransferBlockTriggerFrameID_set, doc=r"""EventStream0TransferBlockTriggerFrameID""")
    EventStream0TransferBurstStart = property(_PySpin.Camera_EventStream0TransferBurstStart_get, _PySpin.Camera_EventStream0TransferBurstStart_set, doc=r"""EventStream0TransferBurstStart""")
    EventStream0TransferBurstStartTimestamp = property(_PySpin.Camera_EventStream0TransferBurstStartTimestamp_get, _PySpin.Camera_EventStream0TransferBurstStartTimestamp_set, doc=r"""EventStream0TransferBurstStartTimestamp""")
    EventStream0TransferBurstStartFrameID = property(_PySpin.Camera_EventStream0TransferBurstStartFrameID_get, _PySpin.Camera_EventStream0TransferBurstStartFrameID_set, doc=r"""EventStream0TransferBurstStartFrameID""")
    EventStream0TransferBurstEnd = property(_PySpin.Camera_EventStream0TransferBurstEnd_get, _PySpin.Camera_EventStream0TransferBurstEnd_set, doc=r"""EventStream0TransferBurstEnd""")
    EventStream0TransferBurstEndTimestamp = property(_PySpin.Camera_EventStream0TransferBurstEndTimestamp_get, _PySpin.Camera_EventStream0TransferBurstEndTimestamp_set, doc=r"""EventStream0TransferBurstEndTimestamp""")
    EventStream0TransferBurstEndFrameID = property(_PySpin.Camera_EventStream0TransferBurstEndFrameID_get, _PySpin.Camera_EventStream0TransferBurstEndFrameID_set, doc=r"""EventStream0TransferBurstEndFrameID""")
    EventStream0TransferOverflow = property(_PySpin.Camera_EventStream0TransferOverflow_get, _PySpin.Camera_EventStream0TransferOverflow_set, doc=r"""EventStream0TransferOverflow""")
    EventStream0TransferOverflowTimestamp = property(_PySpin.Camera_EventStream0TransferOverflowTimestamp_get, _PySpin.Camera_EventStream0TransferOverflowTimestamp_set, doc=r"""EventStream0TransferOverflowTimestamp""")
    EventStream0TransferOverflowFrameID = property(_PySpin.Camera_EventStream0TransferOverflowFrameID_get, _PySpin.Camera_EventStream0TransferOverflowFrameID_set, doc=r"""EventStream0TransferOverflowFrameID""")
    EventSequencerSetChange = property(_PySpin.Camera_EventSequencerSetChange_get, _PySpin.Camera_EventSequencerSetChange_set, doc=r"""EventSequencerSetChange""")
    EventSequencerSetChangeTimestamp = property(_PySpin.Camera_EventSequencerSetChangeTimestamp_get, _PySpin.Camera_EventSequencerSetChangeTimestamp_set, doc=r"""EventSequencerSetChangeTimestamp""")
    EventSequencerSetChangeFrameID = property(_PySpin.Camera_EventSequencerSetChangeFrameID_get, _PySpin.Camera_EventSequencerSetChangeFrameID_set, doc=r"""EventSequencerSetChangeFrameID""")
    EventCounter0Start = property(_PySpin.Camera_EventCounter0Start_get, _PySpin.Camera_EventCounter0Start_set, doc=r"""EventCounter0Start""")
    EventCounter0StartTimestamp = property(_PySpin.Camera_EventCounter0StartTimestamp_get, _PySpin.Camera_EventCounter0StartTimestamp_set, doc=r"""EventCounter0StartTimestamp""")
    EventCounter0StartFrameID = property(_PySpin.Camera_EventCounter0StartFrameID_get, _PySpin.Camera_EventCounter0StartFrameID_set, doc=r"""EventCounter0StartFrameID""")
    EventCounter1Start = property(_PySpin.Camera_EventCounter1Start_get, _PySpin.Camera_EventCounter1Start_set, doc=r"""EventCounter1Start""")
    EventCounter1StartTimestamp = property(_PySpin.Camera_EventCounter1StartTimestamp_get, _PySpin.Camera_EventCounter1StartTimestamp_set, doc=r"""EventCounter1StartTimestamp""")
    EventCounter1StartFrameID = property(_PySpin.Camera_EventCounter1StartFrameID_get, _PySpin.Camera_EventCounter1StartFrameID_set, doc=r"""EventCounter1StartFrameID""")
    EventCounter0End = property(_PySpin.Camera_EventCounter0End_get, _PySpin.Camera_EventCounter0End_set, doc=r"""EventCounter0End""")
    EventCounter0EndTimestamp = property(_PySpin.Camera_EventCounter0EndTimestamp_get, _PySpin.Camera_EventCounter0EndTimestamp_set, doc=r"""EventCounter0EndTimestamp""")
    EventCounter0EndFrameID = property(_PySpin.Camera_EventCounter0EndFrameID_get, _PySpin.Camera_EventCounter0EndFrameID_set, doc=r"""EventCounter0EndFrameID""")
    EventCounter1End = property(_PySpin.Camera_EventCounter1End_get, _PySpin.Camera_EventCounter1End_set, doc=r"""EventCounter1End""")
    EventCounter1EndTimestamp = property(_PySpin.Camera_EventCounter1EndTimestamp_get, _PySpin.Camera_EventCounter1EndTimestamp_set, doc=r"""EventCounter1EndTimestamp""")
    EventCounter1EndFrameID = property(_PySpin.Camera_EventCounter1EndFrameID_get, _PySpin.Camera_EventCounter1EndFrameID_set, doc=r"""EventCounter1EndFrameID""")
    EventTimer0Start = property(_PySpin.Camera_EventTimer0Start_get, _PySpin.Camera_EventTimer0Start_set, doc=r"""EventTimer0Start""")
    EventTimer0StartTimestamp = property(_PySpin.Camera_EventTimer0StartTimestamp_get, _PySpin.Camera_EventTimer0StartTimestamp_set, doc=r"""EventTimer0StartTimestamp""")
    EventTimer0StartFrameID = property(_PySpin.Camera_EventTimer0StartFrameID_get, _PySpin.Camera_EventTimer0StartFrameID_set, doc=r"""EventTimer0StartFrameID""")
    EventTimer1Start = property(_PySpin.Camera_EventTimer1Start_get, _PySpin.Camera_EventTimer1Start_set, doc=r"""EventTimer1Start""")
    EventTimer1StartTimestamp = property(_PySpin.Camera_EventTimer1StartTimestamp_get, _PySpin.Camera_EventTimer1StartTimestamp_set, doc=r"""EventTimer1StartTimestamp""")
    EventTimer1StartFrameID = property(_PySpin.Camera_EventTimer1StartFrameID_get, _PySpin.Camera_EventTimer1StartFrameID_set, doc=r"""EventTimer1StartFrameID""")
    EventTimer0End = property(_PySpin.Camera_EventTimer0End_get, _PySpin.Camera_EventTimer0End_set, doc=r"""EventTimer0End""")
    EventTimer0EndTimestamp = property(_PySpin.Camera_EventTimer0EndTimestamp_get, _PySpin.Camera_EventTimer0EndTimestamp_set, doc=r"""EventTimer0EndTimestamp""")
    EventTimer0EndFrameID = property(_PySpin.Camera_EventTimer0EndFrameID_get, _PySpin.Camera_EventTimer0EndFrameID_set, doc=r"""EventTimer0EndFrameID""")
    EventTimer1End = property(_PySpin.Camera_EventTimer1End_get, _PySpin.Camera_EventTimer1End_set, doc=r"""EventTimer1End""")
    EventTimer1EndTimestamp = property(_PySpin.Camera_EventTimer1EndTimestamp_get, _PySpin.Camera_EventTimer1EndTimestamp_set, doc=r"""EventTimer1EndTimestamp""")
    EventTimer1EndFrameID = property(_PySpin.Camera_EventTimer1EndFrameID_get, _PySpin.Camera_EventTimer1EndFrameID_set, doc=r"""EventTimer1EndFrameID""")
    EventEncoder0Stopped = property(_PySpin.Camera_EventEncoder0Stopped_get, _PySpin.Camera_EventEncoder0Stopped_set, doc=r"""EventEncoder0Stopped""")
    EventEncoder0StoppedTimestamp = property(_PySpin.Camera_EventEncoder0StoppedTimestamp_get, _PySpin.Camera_EventEncoder0StoppedTimestamp_set, doc=r"""EventEncoder0StoppedTimestamp""")
    EventEncoder0StoppedFrameID = property(_PySpin.Camera_EventEncoder0StoppedFrameID_get, _PySpin.Camera_EventEncoder0StoppedFrameID_set, doc=r"""EventEncoder0StoppedFrameID""")
    EventEncoder1Stopped = property(_PySpin.Camera_EventEncoder1Stopped_get, _PySpin.Camera_EventEncoder1Stopped_set, doc=r"""EventEncoder1Stopped""")
    EventEncoder1StoppedTimestamp = property(_PySpin.Camera_EventEncoder1StoppedTimestamp_get, _PySpin.Camera_EventEncoder1StoppedTimestamp_set, doc=r"""EventEncoder1StoppedTimestamp""")
    EventEncoder1StoppedFrameID = property(_PySpin.Camera_EventEncoder1StoppedFrameID_get, _PySpin.Camera_EventEncoder1StoppedFrameID_set, doc=r"""EventEncoder1StoppedFrameID""")
    EventEncoder0Restarted = property(_PySpin.Camera_EventEncoder0Restarted_get, _PySpin.Camera_EventEncoder0Restarted_set, doc=r"""EventEncoder0Restarted""")
    EventEncoder0RestartedTimestamp = property(_PySpin.Camera_EventEncoder0RestartedTimestamp_get, _PySpin.Camera_EventEncoder0RestartedTimestamp_set, doc=r"""EventEncoder0RestartedTimestamp""")
    EventEncoder0RestartedFrameID = property(_PySpin.Camera_EventEncoder0RestartedFrameID_get, _PySpin.Camera_EventEncoder0RestartedFrameID_set, doc=r"""EventEncoder0RestartedFrameID""")
    EventEncoder1Restarted = property(_PySpin.Camera_EventEncoder1Restarted_get, _PySpin.Camera_EventEncoder1Restarted_set, doc=r"""EventEncoder1Restarted""")
    EventEncoder1RestartedTimestamp = property(_PySpin.Camera_EventEncoder1RestartedTimestamp_get, _PySpin.Camera_EventEncoder1RestartedTimestamp_set, doc=r"""EventEncoder1RestartedTimestamp""")
    EventEncoder1RestartedFrameID = property(_PySpin.Camera_EventEncoder1RestartedFrameID_get, _PySpin.Camera_EventEncoder1RestartedFrameID_set, doc=r"""EventEncoder1RestartedFrameID""")
    EventLine0RisingEdge = property(_PySpin.Camera_EventLine0RisingEdge_get, _PySpin.Camera_EventLine0RisingEdge_set, doc=r"""EventLine0RisingEdge""")
    EventLine0RisingEdgeTimestamp = property(_PySpin.Camera_EventLine0RisingEdgeTimestamp_get, _PySpin.Camera_EventLine0RisingEdgeTimestamp_set, doc=r"""EventLine0RisingEdgeTimestamp""")
    EventLine0RisingEdgeFrameID = property(_PySpin.Camera_EventLine0RisingEdgeFrameID_get, _PySpin.Camera_EventLine0RisingEdgeFrameID_set, doc=r"""EventLine0RisingEdgeFrameID""")
    EventLine1RisingEdge = property(_PySpin.Camera_EventLine1RisingEdge_get, _PySpin.Camera_EventLine1RisingEdge_set, doc=r"""EventLine1RisingEdge""")
    EventLine1RisingEdgeTimestamp = property(_PySpin.Camera_EventLine1RisingEdgeTimestamp_get, _PySpin.Camera_EventLine1RisingEdgeTimestamp_set, doc=r"""EventLine1RisingEdgeTimestamp""")
    EventLine1RisingEdgeFrameID = property(_PySpin.Camera_EventLine1RisingEdgeFrameID_get, _PySpin.Camera_EventLine1RisingEdgeFrameID_set, doc=r"""EventLine1RisingEdgeFrameID""")
    EventLine0FallingEdge = property(_PySpin.Camera_EventLine0FallingEdge_get, _PySpin.Camera_EventLine0FallingEdge_set, doc=r"""EventLine0FallingEdge""")
    EventLine0FallingEdgeTimestamp = property(_PySpin.Camera_EventLine0FallingEdgeTimestamp_get, _PySpin.Camera_EventLine0FallingEdgeTimestamp_set, doc=r"""EventLine0FallingEdgeTimestamp""")
    EventLine0FallingEdgeFrameID = property(_PySpin.Camera_EventLine0FallingEdgeFrameID_get, _PySpin.Camera_EventLine0FallingEdgeFrameID_set, doc=r"""EventLine0FallingEdgeFrameID""")
    EventLine1FallingEdge = property(_PySpin.Camera_EventLine1FallingEdge_get, _PySpin.Camera_EventLine1FallingEdge_set, doc=r"""EventLine1FallingEdge""")
    EventLine1FallingEdgeTimestamp = property(_PySpin.Camera_EventLine1FallingEdgeTimestamp_get, _PySpin.Camera_EventLine1FallingEdgeTimestamp_set, doc=r"""EventLine1FallingEdgeTimestamp""")
    EventLine1FallingEdgeFrameID = property(_PySpin.Camera_EventLine1FallingEdgeFrameID_get, _PySpin.Camera_EventLine1FallingEdgeFrameID_set, doc=r"""EventLine1FallingEdgeFrameID""")
    EventLine0AnyEdge = property(_PySpin.Camera_EventLine0AnyEdge_get, _PySpin.Camera_EventLine0AnyEdge_set, doc=r"""EventLine0AnyEdge""")
    EventLine0AnyEdgeTimestamp = property(_PySpin.Camera_EventLine0AnyEdgeTimestamp_get, _PySpin.Camera_EventLine0AnyEdgeTimestamp_set, doc=r"""EventLine0AnyEdgeTimestamp""")
    EventLine0AnyEdgeFrameID = property(_PySpin.Camera_EventLine0AnyEdgeFrameID_get, _PySpin.Camera_EventLine0AnyEdgeFrameID_set, doc=r"""EventLine0AnyEdgeFrameID""")
    EventLine1AnyEdge = property(_PySpin.Camera_EventLine1AnyEdge_get, _PySpin.Camera_EventLine1AnyEdge_set, doc=r"""EventLine1AnyEdge""")
    EventLine1AnyEdgeTimestamp = property(_PySpin.Camera_EventLine1AnyEdgeTimestamp_get, _PySpin.Camera_EventLine1AnyEdgeTimestamp_set, doc=r"""EventLine1AnyEdgeTimestamp""")
    EventLine1AnyEdgeFrameID = property(_PySpin.Camera_EventLine1AnyEdgeFrameID_get, _PySpin.Camera_EventLine1AnyEdgeFrameID_set, doc=r"""EventLine1AnyEdgeFrameID""")
    EventLinkTrigger0 = property(_PySpin.Camera_EventLinkTrigger0_get, _PySpin.Camera_EventLinkTrigger0_set, doc=r"""EventLinkTrigger0""")
    EventLinkTrigger0Timestamp = property(_PySpin.Camera_EventLinkTrigger0Timestamp_get, _PySpin.Camera_EventLinkTrigger0Timestamp_set, doc=r"""EventLinkTrigger0Timestamp""")
    EventLinkTrigger0FrameID = property(_PySpin.Camera_EventLinkTrigger0FrameID_get, _PySpin.Camera_EventLinkTrigger0FrameID_set, doc=r"""EventLinkTrigger0FrameID""")
    EventLinkTrigger1 = property(_PySpin.Camera_EventLinkTrigger1_get, _PySpin.Camera_EventLinkTrigger1_set, doc=r"""EventLinkTrigger1""")
    EventLinkTrigger1Timestamp = property(_PySpin.Camera_EventLinkTrigger1Timestamp_get, _PySpin.Camera_EventLinkTrigger1Timestamp_set, doc=r"""EventLinkTrigger1Timestamp""")
    EventLinkTrigger1FrameID = property(_PySpin.Camera_EventLinkTrigger1FrameID_get, _PySpin.Camera_EventLinkTrigger1FrameID_set, doc=r"""EventLinkTrigger1FrameID""")
    EventActionLate = property(_PySpin.Camera_EventActionLate_get, _PySpin.Camera_EventActionLate_set, doc=r"""EventActionLate""")
    EventActionLateTimestamp = property(_PySpin.Camera_EventActionLateTimestamp_get, _PySpin.Camera_EventActionLateTimestamp_set, doc=r"""EventActionLateTimestamp""")
    EventActionLateFrameID = property(_PySpin.Camera_EventActionLateFrameID_get, _PySpin.Camera_EventActionLateFrameID_set, doc=r"""EventActionLateFrameID""")
    EventLinkSpeedChange = property(_PySpin.Camera_EventLinkSpeedChange_get, _PySpin.Camera_EventLinkSpeedChange_set, doc=r"""EventLinkSpeedChange""")
    EventLinkSpeedChangeTimestamp = property(_PySpin.Camera_EventLinkSpeedChangeTimestamp_get, _PySpin.Camera_EventLinkSpeedChangeTimestamp_set, doc=r"""EventLinkSpeedChangeTimestamp""")
    EventLinkSpeedChangeFrameID = property(_PySpin.Camera_EventLinkSpeedChangeFrameID_get, _PySpin.Camera_EventLinkSpeedChangeFrameID_set, doc=r"""EventLinkSpeedChangeFrameID""")
    FileAccessBuffer = property(_PySpin.Camera_FileAccessBuffer_get, _PySpin.Camera_FileAccessBuffer_set, doc=r"""FileAccessBuffer""")
    SourceCount = property(_PySpin.Camera_SourceCount_get, _PySpin.Camera_SourceCount_set, doc=r"""SourceCount""")
    SourceSelector = property(_PySpin.Camera_SourceSelector_get, _PySpin.Camera_SourceSelector_set, doc=r"""SourceSelector""")
    TransferSelector = property(_PySpin.Camera_TransferSelector_get, _PySpin.Camera_TransferSelector_set, doc=r"""TransferSelector""")
    TransferBurstCount = property(_PySpin.Camera_TransferBurstCount_get, _PySpin.Camera_TransferBurstCount_set, doc=r"""TransferBurstCount""")
    TransferAbort = property(_PySpin.Camera_TransferAbort_get, _PySpin.Camera_TransferAbort_set, doc=r"""TransferAbort""")
    TransferPause = property(_PySpin.Camera_TransferPause_get, _PySpin.Camera_TransferPause_set, doc=r"""TransferPause""")
    TransferResume = property(_PySpin.Camera_TransferResume_get, _PySpin.Camera_TransferResume_set, doc=r"""TransferResume""")
    TransferTriggerSelector = property(_PySpin.Camera_TransferTriggerSelector_get, _PySpin.Camera_TransferTriggerSelector_set, doc=r"""TransferTriggerSelector""")
    TransferTriggerMode = property(_PySpin.Camera_TransferTriggerMode_get, _PySpin.Camera_TransferTriggerMode_set, doc=r"""TransferTriggerMode""")
    TransferTriggerSource = property(_PySpin.Camera_TransferTriggerSource_get, _PySpin.Camera_TransferTriggerSource_set, doc=r"""TransferTriggerSource""")
    TransferTriggerActivation = property(_PySpin.Camera_TransferTriggerActivation_get, _PySpin.Camera_TransferTriggerActivation_set, doc=r"""TransferTriggerActivation""")
    TransferStatusSelector = property(_PySpin.Camera_TransferStatusSelector_get, _PySpin.Camera_TransferStatusSelector_set, doc=r"""TransferStatusSelector""")
    TransferStatus = property(_PySpin.Camera_TransferStatus_get, _PySpin.Camera_TransferStatus_set, doc=r"""TransferStatus""")
    TransferComponentSelector = property(_PySpin.Camera_TransferComponentSelector_get, _PySpin.Camera_TransferComponentSelector_set, doc=r"""TransferComponentSelector""")
    TransferStreamChannel = property(_PySpin.Camera_TransferStreamChannel_get, _PySpin.Camera_TransferStreamChannel_set, doc=r"""TransferStreamChannel""")
    Scan3dDistanceUnit = property(_PySpin.Camera_Scan3dDistanceUnit_get, _PySpin.Camera_Scan3dDistanceUnit_set, doc=r"""Scan3dDistanceUnit""")
    Scan3dCoordinateSystem = property(_PySpin.Camera_Scan3dCoordinateSystem_get, _PySpin.Camera_Scan3dCoordinateSystem_set, doc=r"""Scan3dCoordinateSystem""")
    Scan3dOutputMode = property(_PySpin.Camera_Scan3dOutputMode_get, _PySpin.Camera_Scan3dOutputMode_set, doc=r"""Scan3dOutputMode""")
    Scan3dCoordinateSystemReference = property(_PySpin.Camera_Scan3dCoordinateSystemReference_get, _PySpin.Camera_Scan3dCoordinateSystemReference_set, doc=r"""Scan3dCoordinateSystemReference""")
    Scan3dCoordinateSelector = property(_PySpin.Camera_Scan3dCoordinateSelector_get, _PySpin.Camera_Scan3dCoordinateSelector_set, doc=r"""Scan3dCoordinateSelector""")
    Scan3dCoordinateScale = property(_PySpin.Camera_Scan3dCoordinateScale_get, _PySpin.Camera_Scan3dCoordinateScale_set, doc=r"""Scan3dCoordinateScale""")
    Scan3dCoordinateOffset = property(_PySpin.Camera_Scan3dCoordinateOffset_get, _PySpin.Camera_Scan3dCoordinateOffset_set, doc=r"""Scan3dCoordinateOffset""")
    Scan3dInvalidDataFlag = property(_PySpin.Camera_Scan3dInvalidDataFlag_get, _PySpin.Camera_Scan3dInvalidDataFlag_set, doc=r"""Scan3dInvalidDataFlag""")
    Scan3dInvalidDataValue = property(_PySpin.Camera_Scan3dInvalidDataValue_get, _PySpin.Camera_Scan3dInvalidDataValue_set, doc=r"""Scan3dInvalidDataValue""")
    Scan3dAxisMin = property(_PySpin.Camera_Scan3dAxisMin_get, _PySpin.Camera_Scan3dAxisMin_set, doc=r"""Scan3dAxisMin""")
    Scan3dAxisMax = property(_PySpin.Camera_Scan3dAxisMax_get, _PySpin.Camera_Scan3dAxisMax_set, doc=r"""Scan3dAxisMax""")
    Scan3dCoordinateTransformSelector = property(_PySpin.Camera_Scan3dCoordinateTransformSelector_get, _PySpin.Camera_Scan3dCoordinateTransformSelector_set, doc=r"""Scan3dCoordinateTransformSelector""")
    Scan3dTransformValue = property(_PySpin.Camera_Scan3dTransformValue_get, _PySpin.Camera_Scan3dTransformValue_set, doc=r"""Scan3dTransformValue""")
    Scan3dCoordinateReferenceSelector = property(_PySpin.Camera_Scan3dCoordinateReferenceSelector_get, _PySpin.Camera_Scan3dCoordinateReferenceSelector_set, doc=r"""Scan3dCoordinateReferenceSelector""")
    Scan3dCoordinateReferenceValue = property(_PySpin.Camera_Scan3dCoordinateReferenceValue_get, _PySpin.Camera_Scan3dCoordinateReferenceValue_set, doc=r"""Scan3dCoordinateReferenceValue""")
    ChunkPartSelector = property(_PySpin.Camera_ChunkPartSelector_get, _PySpin.Camera_ChunkPartSelector_set, doc=r"""ChunkPartSelector""")
    ChunkImageComponent = property(_PySpin.Camera_ChunkImageComponent_get, _PySpin.Camera_ChunkImageComponent_set, doc=r"""ChunkImageComponent""")
    ChunkPixelDynamicRangeMin = property(_PySpin.Camera_ChunkPixelDynamicRangeMin_get, _PySpin.Camera_ChunkPixelDynamicRangeMin_set, doc=r"""ChunkPixelDynamicRangeMin""")
    ChunkPixelDynamicRangeMax = property(_PySpin.Camera_ChunkPixelDynamicRangeMax_get, _PySpin.Camera_ChunkPixelDynamicRangeMax_set, doc=r"""ChunkPixelDynamicRangeMax""")
    ChunkTimestampLatchValue = property(_PySpin.Camera_ChunkTimestampLatchValue_get, _PySpin.Camera_ChunkTimestampLatchValue_set, doc=r"""ChunkTimestampLatchValue""")
    ChunkLineStatusAll = property(_PySpin.Camera_ChunkLineStatusAll_get, _PySpin.Camera_ChunkLineStatusAll_set, doc=r"""ChunkLineStatusAll""")
    ChunkCounterSelector = property(_PySpin.Camera_ChunkCounterSelector_get, _PySpin.Camera_ChunkCounterSelector_set, doc=r"""ChunkCounterSelector""")
    ChunkCounterValue = property(_PySpin.Camera_ChunkCounterValue_get, _PySpin.Camera_ChunkCounterValue_set, doc=r"""ChunkCounterValue""")
    ChunkTimerSelector = property(_PySpin.Camera_ChunkTimerSelector_get, _PySpin.Camera_ChunkTimerSelector_set, doc=r"""ChunkTimerSelector""")
    ChunkTimerValue = property(_PySpin.Camera_ChunkTimerValue_get, _PySpin.Camera_ChunkTimerValue_set, doc=r"""ChunkTimerValue""")
    ChunkEncoderSelector = property(_PySpin.Camera_ChunkEncoderSelector_get, _PySpin.Camera_ChunkEncoderSelector_set, doc=r"""ChunkEncoderSelector""")
    ChunkScanLineSelector = property(_PySpin.Camera_ChunkScanLineSelector_get, _PySpin.Camera_ChunkScanLineSelector_set, doc=r"""ChunkScanLineSelector""")
    ChunkEncoderValue = property(_PySpin.Camera_ChunkEncoderValue_get, _PySpin.Camera_ChunkEncoderValue_set, doc=r"""ChunkEncoderValue""")
    ChunkEncoderStatus = property(_PySpin.Camera_ChunkEncoderStatus_get, _PySpin.Camera_ChunkEncoderStatus_set, doc=r"""ChunkEncoderStatus""")
    ChunkExposureTimeSelector = property(_PySpin.Camera_ChunkExposureTimeSelector_get, _PySpin.Camera_ChunkExposureTimeSelector_set, doc=r"""ChunkExposureTimeSelector""")
    ChunkLinePitch = property(_PySpin.Camera_ChunkLinePitch_get, _PySpin.Camera_ChunkLinePitch_set, doc=r"""ChunkLinePitch""")
    ChunkSourceID = property(_PySpin.Camera_ChunkSourceID_get, _PySpin.Camera_ChunkSourceID_set, doc=r"""ChunkSourceID""")
    ChunkRegionID = property(_PySpin.Camera_ChunkRegionID_get, _PySpin.Camera_ChunkRegionID_set, doc=r"""ChunkRegionID""")
    ChunkTransferBlockID = property(_PySpin.Camera_ChunkTransferBlockID_get, _PySpin.Camera_ChunkTransferBlockID_set, doc=r"""ChunkTransferBlockID""")
    ChunkTransferStreamID = property(_PySpin.Camera_ChunkTransferStreamID_get, _PySpin.Camera_ChunkTransferStreamID_set, doc=r"""ChunkTransferStreamID""")
    ChunkTransferQueueCurrentBlockCount = property(_PySpin.Camera_ChunkTransferQueueCurrentBlockCount_get, _PySpin.Camera_ChunkTransferQueueCurrentBlockCount_set, doc=r"""ChunkTransferQueueCurrentBlockCount""")
    ChunkStreamChannelID = property(_PySpin.Camera_ChunkStreamChannelID_get, _PySpin.Camera_ChunkStreamChannelID_set, doc=r"""ChunkStreamChannelID""")
    ChunkScan3dDistanceUnit = property(_PySpin.Camera_ChunkScan3dDistanceUnit_get, _PySpin.Camera_ChunkScan3dDistanceUnit_set, doc=r"""ChunkScan3dDistanceUnit""")
    ChunkScan3dOutputMode = property(_PySpin.Camera_ChunkScan3dOutputMode_get, _PySpin.Camera_ChunkScan3dOutputMode_set, doc=r"""ChunkScan3dOutputMode""")
    ChunkScan3dCoordinateSystem = property(_PySpin.Camera_ChunkScan3dCoordinateSystem_get, _PySpin.Camera_ChunkScan3dCoordinateSystem_set, doc=r"""ChunkScan3dCoordinateSystem""")
    ChunkScan3dCoordinateSystemReference = property(_PySpin.Camera_ChunkScan3dCoordinateSystemReference_get, _PySpin.Camera_ChunkScan3dCoordinateSystemReference_set, doc=r"""ChunkScan3dCoordinateSystemReference""")
    ChunkScan3dCoordinateSelector = property(_PySpin.Camera_ChunkScan3dCoordinateSelector_get, _PySpin.Camera_ChunkScan3dCoordinateSelector_set, doc=r"""ChunkScan3dCoordinateSelector""")
    ChunkScan3dCoordinateScale = property(_PySpin.Camera_ChunkScan3dCoordinateScale_get, _PySpin.Camera_ChunkScan3dCoordinateScale_set, doc=r"""ChunkScan3dCoordinateScale""")
    ChunkScan3dCoordinateOffset = property(_PySpin.Camera_ChunkScan3dCoordinateOffset_get, _PySpin.Camera_ChunkScan3dCoordinateOffset_set, doc=r"""ChunkScan3dCoordinateOffset""")
    ChunkScan3dInvalidDataFlag = property(_PySpin.Camera_ChunkScan3dInvalidDataFlag_get, _PySpin.Camera_ChunkScan3dInvalidDataFlag_set, doc=r"""ChunkScan3dInvalidDataFlag""")
    ChunkScan3dInvalidDataValue = property(_PySpin.Camera_ChunkScan3dInvalidDataValue_get, _PySpin.Camera_ChunkScan3dInvalidDataValue_set, doc=r"""ChunkScan3dInvalidDataValue""")
    ChunkScan3dAxisMin = property(_PySpin.Camera_ChunkScan3dAxisMin_get, _PySpin.Camera_ChunkScan3dAxisMin_set, doc=r"""ChunkScan3dAxisMin""")
    ChunkScan3dAxisMax = property(_PySpin.Camera_ChunkScan3dAxisMax_get, _PySpin.Camera_ChunkScan3dAxisMax_set, doc=r"""ChunkScan3dAxisMax""")
    ChunkScan3dCoordinateTransformSelector = property(_PySpin.Camera_ChunkScan3dCoordinateTransformSelector_get, _PySpin.Camera_ChunkScan3dCoordinateTransformSelector_set, doc=r"""ChunkScan3dCoordinateTransformSelector""")
    ChunkScan3dTransformValue = property(_PySpin.Camera_ChunkScan3dTransformValue_get, _PySpin.Camera_ChunkScan3dTransformValue_set, doc=r"""ChunkScan3dTransformValue""")
    ChunkScan3dCoordinateReferenceSelector = property(_PySpin.Camera_ChunkScan3dCoordinateReferenceSelector_get, _PySpin.Camera_ChunkScan3dCoordinateReferenceSelector_set, doc=r"""ChunkScan3dCoordinateReferenceSelector""")
    ChunkScan3dCoordinateReferenceValue = property(_PySpin.Camera_ChunkScan3dCoordinateReferenceValue_get, _PySpin.Camera_ChunkScan3dCoordinateReferenceValue_set, doc=r"""ChunkScan3dCoordinateReferenceValue""")
    TestPendingAck = property(_PySpin.Camera_TestPendingAck_get, _PySpin.Camera_TestPendingAck_set, doc=r"""TestPendingAck""")
    DeviceTapGeometry = property(_PySpin.Camera_DeviceTapGeometry_get, _PySpin.Camera_DeviceTapGeometry_set, doc=r"""DeviceTapGeometry""")
    GevPhysicalLinkConfiguration = property(_PySpin.Camera_GevPhysicalLinkConfiguration_get, _PySpin.Camera_GevPhysicalLinkConfiguration_set, doc=r"""GevPhysicalLinkConfiguration""")
    GevCurrentPhysicalLinkConfiguration = property(_PySpin.Camera_GevCurrentPhysicalLinkConfiguration_get, _PySpin.Camera_GevCurrentPhysicalLinkConfiguration_set, doc=r"""GevCurrentPhysicalLinkConfiguration""")
    GevActiveLinkCount = property(_PySpin.Camera_GevActiveLinkCount_get, _PySpin.Camera_GevActiveLinkCount_set, doc=r"""GevActiveLinkCount""")
    GevPAUSEFrameReception = property(_PySpin.Camera_GevPAUSEFrameReception_get, _PySpin.Camera_GevPAUSEFrameReception_set, doc=r"""GevPAUSEFrameReception""")
    GevPAUSEFrameTransmission = property(_PySpin.Camera_GevPAUSEFrameTransmission_get, _PySpin.Camera_GevPAUSEFrameTransmission_set, doc=r"""GevPAUSEFrameTransmission""")
    GevIPConfigurationStatus = property(_PySpin.Camera_GevIPConfigurationStatus_get, _PySpin.Camera_GevIPConfigurationStatus_set, doc=r"""GevIPConfigurationStatus""")
    GevDiscoveryAckDelay = property(_PySpin.Camera_GevDiscoveryAckDelay_get, _PySpin.Camera_GevDiscoveryAckDelay_set, doc=r"""GevDiscoveryAckDelay""")
    GevGVCPExtendedStatusCodesSelector = property(_PySpin.Camera_GevGVCPExtendedStatusCodesSelector_get, _PySpin.Camera_GevGVCPExtendedStatusCodesSelector_set, doc=r"""GevGVCPExtendedStatusCodesSelector""")
    GevGVCPExtendedStatusCodes = property(_PySpin.Camera_GevGVCPExtendedStatusCodes_get, _PySpin.Camera_GevGVCPExtendedStatusCodes_set, doc=r"""GevGVCPExtendedStatusCodes""")
    GevPrimaryApplicationSwitchoverKey = property(_PySpin.Camera_GevPrimaryApplicationSwitchoverKey_get, _PySpin.Camera_GevPrimaryApplicationSwitchoverKey_set, doc=r"""GevPrimaryApplicationSwitchoverKey""")
    GevGVSPExtendedIDMode = property(_PySpin.Camera_GevGVSPExtendedIDMode_get, _PySpin.Camera_GevGVSPExtendedIDMode_set, doc=r"""GevGVSPExtendedIDMode""")
    GevPrimaryApplicationSocket = property(_PySpin.Camera_GevPrimaryApplicationSocket_get, _PySpin.Camera_GevPrimaryApplicationSocket_set, doc=r"""GevPrimaryApplicationSocket""")
    GevPrimaryApplicationIPAddress = property(_PySpin.Camera_GevPrimaryApplicationIPAddress_get, _PySpin.Camera_GevPrimaryApplicationIPAddress_set, doc=r"""GevPrimaryApplicationIPAddress""")
    GevSCCFGPacketResendDestination = property(_PySpin.Camera_GevSCCFGPacketResendDestination_get, _PySpin.Camera_GevSCCFGPacketResendDestination_set, doc=r"""GevSCCFGPacketResendDestination""")
    GevSCCFGAllInTransmission = property(_PySpin.Camera_GevSCCFGAllInTransmission_get, _PySpin.Camera_GevSCCFGAllInTransmission_set, doc=r"""GevSCCFGAllInTransmission""")
    GevSCZoneCount = property(_PySpin.Camera_GevSCZoneCount_get, _PySpin.Camera_GevSCZoneCount_set, doc=r"""GevSCZoneCount""")
    GevSCZoneDirectionAll = property(_PySpin.Camera_GevSCZoneDirectionAll_get, _PySpin.Camera_GevSCZoneDirectionAll_set, doc=r"""GevSCZoneDirectionAll""")
    GevSCZoneConfigurationLock = property(_PySpin.Camera_GevSCZoneConfigurationLock_get, _PySpin.Camera_GevSCZoneConfigurationLock_set, doc=r"""GevSCZoneConfigurationLock""")
    aPAUSEMACCtrlFramesTransmitted = property(_PySpin.Camera_aPAUSEMACCtrlFramesTransmitted_get, _PySpin.Camera_aPAUSEMACCtrlFramesTransmitted_set, doc=r"""aPAUSEMACCtrlFramesTransmitted""")
    aPAUSEMACCtrlFramesReceived = property(_PySpin.Camera_aPAUSEMACCtrlFramesReceived_get, _PySpin.Camera_aPAUSEMACCtrlFramesReceived_set, doc=r"""aPAUSEMACCtrlFramesReceived""")
    ClConfiguration = property(_PySpin.Camera_ClConfiguration_get, _PySpin.Camera_ClConfiguration_set, doc=r"""ClConfiguration""")
    ClTimeSlotsCount = property(_PySpin.Camera_ClTimeSlotsCount_get, _PySpin.Camera_ClTimeSlotsCount_set, doc=r"""ClTimeSlotsCount""")
    CxpLinkConfigurationStatus = property(_PySpin.Camera_CxpLinkConfigurationStatus_get, _PySpin.Camera_CxpLinkConfigurationStatus_set, doc=r"""CxpLinkConfigurationStatus""")
    CxpLinkConfigurationPreferred = property(_PySpin.Camera_CxpLinkConfigurationPreferred_get, _PySpin.Camera_CxpLinkConfigurationPreferred_set, doc=r"""CxpLinkConfigurationPreferred""")
    CxpLinkConfiguration = property(_PySpin.Camera_CxpLinkConfiguration_get, _PySpin.Camera_CxpLinkConfiguration_set, doc=r"""CxpLinkConfiguration""")
    CxpConnectionSelector = property(_PySpin.Camera_CxpConnectionSelector_get, _PySpin.Camera_CxpConnectionSelector_set, doc=r"""CxpConnectionSelector""")
    CxpConnectionTestMode = property(_PySpin.Camera_CxpConnectionTestMode_get, _PySpin.Camera_CxpConnectionTestMode_set, doc=r"""CxpConnectionTestMode""")
    CxpConnectionTestErrorCount = property(_PySpin.Camera_CxpConnectionTestErrorCount_get, _PySpin.Camera_CxpConnectionTestErrorCount_set, doc=r"""CxpConnectionTestErrorCount""")
    CxpConnectionTestPacketCount = property(_PySpin.Camera_CxpConnectionTestPacketCount_get, _PySpin.Camera_CxpConnectionTestPacketCount_set, doc=r"""CxpConnectionTestPacketCount""")
    CxpPoCxpAuto = property(_PySpin.Camera_CxpPoCxpAuto_get, _PySpin.Camera_CxpPoCxpAuto_set, doc=r"""CxpPoCxpAuto""")
    CxpPoCxpTurnOff = property(_PySpin.Camera_CxpPoCxpTurnOff_get, _PySpin.Camera_CxpPoCxpTurnOff_set, doc=r"""CxpPoCxpTurnOff""")
    CxpPoCxpTripReset = property(_PySpin.Camera_CxpPoCxpTripReset_get, _PySpin.Camera_CxpPoCxpTripReset_set, doc=r"""CxpPoCxpTripReset""")
    CxpPoCxpStatus = property(_PySpin.Camera_CxpPoCxpStatus_get, _PySpin.Camera_CxpPoCxpStatus_set, doc=r"""CxpPoCxpStatus""")
    ChunkInferenceFrameId = property(_PySpin.Camera_ChunkInferenceFrameId_get, _PySpin.Camera_ChunkInferenceFrameId_set, doc=r"""ChunkInferenceFrameId""")
    ChunkInferenceResult = property(_PySpin.Camera_ChunkInferenceResult_get, _PySpin.Camera_ChunkInferenceResult_set, doc=r"""ChunkInferenceResult""")
    ChunkInferenceConfidence = property(_PySpin.Camera_ChunkInferenceConfidence_get, _PySpin.Camera_ChunkInferenceConfidence_set, doc=r"""ChunkInferenceConfidence""")
    ChunkInferenceBoundingBoxResult = property(_PySpin.Camera_ChunkInferenceBoundingBoxResult_get, _PySpin.Camera_ChunkInferenceBoundingBoxResult_set, doc=r"""ChunkInferenceBoundingBoxResult""")

# Register Camera in _PySpin:
_PySpin.Camera_swigregister(Camera)

class IChunkData(object):
    r"""Proxy of C++ Spinnaker::IChunkData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IChunkData

    def SetChunks(self, pNodeMap):
        r"""
        SetChunks(self, pNodeMap)

        Parameters
        ----------
        pNodeMap: Spinnaker::GenApi::INodeMap &

        """
        return _PySpin.IChunkData_SetChunks(self, pNodeMap)

    def GetBlackLevel(self):
        r"""GetBlackLevel(self) -> float64_t"""
        return _PySpin.IChunkData_GetBlackLevel(self)

    def GetFrameID(self):
        r"""GetFrameID(self) -> int64_t"""
        return _PySpin.IChunkData_GetFrameID(self)

    def GetExposureTime(self):
        r"""GetExposureTime(self) -> float64_t"""
        return _PySpin.IChunkData_GetExposureTime(self)

    def GetCompressionMode(self):
        r"""GetCompressionMode(self) -> int64_t"""
        return _PySpin.IChunkData_GetCompressionMode(self)

    def GetCompressionRatio(self):
        r"""GetCompressionRatio(self) -> float64_t"""
        return _PySpin.IChunkData_GetCompressionRatio(self)

    def GetTimestamp(self):
        r"""GetTimestamp(self) -> int64_t"""
        return _PySpin.IChunkData_GetTimestamp(self)

    def GetExposureEndLineStatusAll(self):
        r"""GetExposureEndLineStatusAll(self) -> int64_t"""
        return _PySpin.IChunkData_GetExposureEndLineStatusAll(self)

    def GetWidth(self):
        r"""GetWidth(self) -> int64_t"""
        return _PySpin.IChunkData_GetWidth(self)

    def GetImage(self):
        r"""GetImage(self) -> int64_t"""
        return _PySpin.IChunkData_GetImage(self)

    def GetHeight(self):
        r"""GetHeight(self) -> int64_t"""
        return _PySpin.IChunkData_GetHeight(self)

    def GetGain(self):
        r"""GetGain(self) -> float64_t"""
        return _PySpin.IChunkData_GetGain(self)

    def GetSequencerSetActive(self):
        r"""GetSequencerSetActive(self) -> int64_t"""
        return _PySpin.IChunkData_GetSequencerSetActive(self)

    def GetCRC(self):
        r"""GetCRC(self) -> int64_t"""
        return _PySpin.IChunkData_GetCRC(self)

    def GetOffsetX(self):
        r"""GetOffsetX(self) -> int64_t"""
        return _PySpin.IChunkData_GetOffsetX(self)

    def GetOffsetY(self):
        r"""GetOffsetY(self) -> int64_t"""
        return _PySpin.IChunkData_GetOffsetY(self)

    def GetSerialDataLength(self):
        r"""GetSerialDataLength(self) -> int64_t"""
        return _PySpin.IChunkData_GetSerialDataLength(self)

    def GetPartSelector(self):
        r"""GetPartSelector(self) -> int64_t"""
        return _PySpin.IChunkData_GetPartSelector(self)

    def GetPixelDynamicRangeMin(self):
        r"""GetPixelDynamicRangeMin(self) -> int64_t"""
        return _PySpin.IChunkData_GetPixelDynamicRangeMin(self)

    def GetPixelDynamicRangeMax(self):
        r"""GetPixelDynamicRangeMax(self) -> int64_t"""
        return _PySpin.IChunkData_GetPixelDynamicRangeMax(self)

    def GetTimestampLatchValue(self):
        r"""GetTimestampLatchValue(self) -> int64_t"""
        return _PySpin.IChunkData_GetTimestampLatchValue(self)

    def GetLineStatusAll(self):
        r"""GetLineStatusAll(self) -> int64_t"""
        return _PySpin.IChunkData_GetLineStatusAll(self)

    def GetCounterValue(self):
        r"""GetCounterValue(self) -> int64_t"""
        return _PySpin.IChunkData_GetCounterValue(self)

    def GetTimerValue(self):
        r"""GetTimerValue(self) -> float64_t"""
        return _PySpin.IChunkData_GetTimerValue(self)

    def GetScanLineSelector(self):
        r"""GetScanLineSelector(self) -> int64_t"""
        return _PySpin.IChunkData_GetScanLineSelector(self)

    def GetEncoderValue(self):
        r"""GetEncoderValue(self) -> int64_t"""
        return _PySpin.IChunkData_GetEncoderValue(self)

    def GetLinePitch(self):
        r"""GetLinePitch(self) -> int64_t"""
        return _PySpin.IChunkData_GetLinePitch(self)

    def GetTransferBlockID(self):
        r"""GetTransferBlockID(self) -> int64_t"""
        return _PySpin.IChunkData_GetTransferBlockID(self)

    def GetTransferQueueCurrentBlockCount(self):
        r"""GetTransferQueueCurrentBlockCount(self) -> int64_t"""
        return _PySpin.IChunkData_GetTransferQueueCurrentBlockCount(self)

    def GetStreamChannelID(self):
        r"""GetStreamChannelID(self) -> int64_t"""
        return _PySpin.IChunkData_GetStreamChannelID(self)

    def GetScan3dCoordinateScale(self):
        r"""GetScan3dCoordinateScale(self) -> float64_t"""
        return _PySpin.IChunkData_GetScan3dCoordinateScale(self)

    def GetScan3dCoordinateOffset(self):
        r"""GetScan3dCoordinateOffset(self) -> float64_t"""
        return _PySpin.IChunkData_GetScan3dCoordinateOffset(self)

    def GetScan3dInvalidDataValue(self):
        r"""GetScan3dInvalidDataValue(self) -> float64_t"""
        return _PySpin.IChunkData_GetScan3dInvalidDataValue(self)

    def GetScan3dAxisMin(self):
        r"""GetScan3dAxisMin(self) -> float64_t"""
        return _PySpin.IChunkData_GetScan3dAxisMin(self)

    def GetScan3dAxisMax(self):
        r"""GetScan3dAxisMax(self) -> float64_t"""
        return _PySpin.IChunkData_GetScan3dAxisMax(self)

    def GetScan3dTransformValue(self):
        r"""GetScan3dTransformValue(self) -> float64_t"""
        return _PySpin.IChunkData_GetScan3dTransformValue(self)

    def GetScan3dCoordinateReferenceValue(self):
        r"""GetScan3dCoordinateReferenceValue(self) -> float64_t"""
        return _PySpin.IChunkData_GetScan3dCoordinateReferenceValue(self)

    def GetInferenceFrameId(self):
        r"""GetInferenceFrameId(self) -> int64_t"""
        return _PySpin.IChunkData_GetInferenceFrameId(self)

    def GetInferenceResult(self):
        r"""GetInferenceResult(self) -> int64_t"""
        return _PySpin.IChunkData_GetInferenceResult(self)

    def GetInferenceConfidence(self):
        r"""GetInferenceConfidence(self) -> float64_t"""
        return _PySpin.IChunkData_GetInferenceConfidence(self)

    def GetInferenceBoundingBoxResult(self):
        r"""GetInferenceBoundingBoxResult(self) -> InferenceBoundingBoxResult"""
        return _PySpin.IChunkData_GetInferenceBoundingBoxResult(self)

# Register IChunkData in _PySpin:
_PySpin.IChunkData_swigregister(IChunkData)

INFERENCE_BOX_TYPE_RECTANGLE = _PySpin.INFERENCE_BOX_TYPE_RECTANGLE

INFERENCE_BOX_TYPE_CIRCLE = _PySpin.INFERENCE_BOX_TYPE_CIRCLE

INFERENCE_BOX_TYPE_ROTATED_RECTANGLE = _PySpin.INFERENCE_BOX_TYPE_ROTATED_RECTANGLE

class InferenceBoxRect(object):
    r"""Proxy of C++ Spinnaker::InferenceBoxRect class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    topLeftXCoord = property(_PySpin.InferenceBoxRect_topLeftXCoord_get, _PySpin.InferenceBoxRect_topLeftXCoord_set, doc=r"""topLeftXCoord""")
    topLeftYCoord = property(_PySpin.InferenceBoxRect_topLeftYCoord_get, _PySpin.InferenceBoxRect_topLeftYCoord_set, doc=r"""topLeftYCoord""")
    bottomRightXCoord = property(_PySpin.InferenceBoxRect_bottomRightXCoord_get, _PySpin.InferenceBoxRect_bottomRightXCoord_set, doc=r"""bottomRightXCoord""")
    bottomRightYCoord = property(_PySpin.InferenceBoxRect_bottomRightYCoord_get, _PySpin.InferenceBoxRect_bottomRightYCoord_set, doc=r"""bottomRightYCoord""")

    def __init__(self):
        r"""__init__(self) -> InferenceBoxRect"""
        _PySpin.InferenceBoxRect_swiginit(self, _PySpin.new_InferenceBoxRect())
    __swig_destroy__ = _PySpin.delete_InferenceBoxRect

# Register InferenceBoxRect in _PySpin:
_PySpin.InferenceBoxRect_swigregister(InferenceBoxRect)

class InferenceBoxCircle(object):
    r"""Proxy of C++ Spinnaker::InferenceBoxCircle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    centerXCoord = property(_PySpin.InferenceBoxCircle_centerXCoord_get, _PySpin.InferenceBoxCircle_centerXCoord_set, doc=r"""centerXCoord""")
    centerYCoord = property(_PySpin.InferenceBoxCircle_centerYCoord_get, _PySpin.InferenceBoxCircle_centerYCoord_set, doc=r"""centerYCoord""")
    radius = property(_PySpin.InferenceBoxCircle_radius_get, _PySpin.InferenceBoxCircle_radius_set, doc=r"""radius""")

    def __init__(self):
        r"""__init__(self) -> InferenceBoxCircle"""
        _PySpin.InferenceBoxCircle_swiginit(self, _PySpin.new_InferenceBoxCircle())
    __swig_destroy__ = _PySpin.delete_InferenceBoxCircle

# Register InferenceBoxCircle in _PySpin:
_PySpin.InferenceBoxCircle_swigregister(InferenceBoxCircle)

class InferenceBoxRotatedRect(object):
    r"""Proxy of C++ Spinnaker::InferenceBoxRotatedRect class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    topLeftXCoord = property(_PySpin.InferenceBoxRotatedRect_topLeftXCoord_get, _PySpin.InferenceBoxRotatedRect_topLeftXCoord_set, doc=r"""topLeftXCoord""")
    topLeftYCoord = property(_PySpin.InferenceBoxRotatedRect_topLeftYCoord_get, _PySpin.InferenceBoxRotatedRect_topLeftYCoord_set, doc=r"""topLeftYCoord""")
    bottomRightXCoord = property(_PySpin.InferenceBoxRotatedRect_bottomRightXCoord_get, _PySpin.InferenceBoxRotatedRect_bottomRightXCoord_set, doc=r"""bottomRightXCoord""")
    bottomRightYCoord = property(_PySpin.InferenceBoxRotatedRect_bottomRightYCoord_get, _PySpin.InferenceBoxRotatedRect_bottomRightYCoord_set, doc=r"""bottomRightYCoord""")
    rotationAngle = property(_PySpin.InferenceBoxRotatedRect_rotationAngle_get, _PySpin.InferenceBoxRotatedRect_rotationAngle_set, doc=r"""rotationAngle""")

    def __init__(self):
        r"""__init__(self) -> InferenceBoxRotatedRect"""
        _PySpin.InferenceBoxRotatedRect_swiginit(self, _PySpin.new_InferenceBoxRotatedRect())
    __swig_destroy__ = _PySpin.delete_InferenceBoxRotatedRect

# Register InferenceBoxRotatedRect in _PySpin:
_PySpin.InferenceBoxRotatedRect_swigregister(InferenceBoxRotatedRect)

class InferenceBoundingBox(object):
    r"""Proxy of C++ Spinnaker::InferenceBoundingBox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    boxType = property(_PySpin.InferenceBoundingBox_boxType_get, _PySpin.InferenceBoundingBox_boxType_set, doc=r"""boxType""")
    classId = property(_PySpin.InferenceBoundingBox_classId_get, _PySpin.InferenceBoundingBox_classId_set, doc=r"""classId""")
    confidence = property(_PySpin.InferenceBoundingBox_confidence_get, _PySpin.InferenceBoundingBox_confidence_set, doc=r"""confidence""")
    rect = property(_PySpin.InferenceBoundingBox_rect_get, _PySpin.InferenceBoundingBox_rect_set, doc=r"""rect""")
    circle = property(_PySpin.InferenceBoundingBox_circle_get, _PySpin.InferenceBoundingBox_circle_set, doc=r"""circle""")
    rotatedRect = property(_PySpin.InferenceBoundingBox_rotatedRect_get, _PySpin.InferenceBoundingBox_rotatedRect_set, doc=r"""rotatedRect""")

    def __init__(self):
        r"""__init__(self) -> InferenceBoundingBox"""
        _PySpin.InferenceBoundingBox_swiginit(self, _PySpin.new_InferenceBoundingBox())
    __swig_destroy__ = _PySpin.delete_InferenceBoundingBox

# Register InferenceBoundingBox in _PySpin:
_PySpin.InferenceBoundingBox_swigregister(InferenceBoundingBox)

class InferenceBoundingBoxResult(object):
    r"""Proxy of C++ Spinnaker::InferenceBoundingBoxResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_InferenceBoundingBoxResult

    def __init__(self, *args):
        r"""
        __init__(self) -> InferenceBoundingBoxResult
        __init__(self, data, lengthInBytes) -> InferenceBoundingBoxResult

        Parameters
        ----------
        data: uint8_t const *
        lengthInBytes: int64_t const

        __init__(self, other) -> InferenceBoundingBoxResult

        Parameters
        ----------
        other: Spinnaker::InferenceBoundingBoxResult const &

        """
        _PySpin.InferenceBoundingBoxResult_swiginit(self, _PySpin.new_InferenceBoundingBoxResult(*args))

    def GetVersion(self):
        r"""GetVersion(self) -> int8_t"""
        return _PySpin.InferenceBoundingBoxResult_GetVersion(self)

    def GetBoxCount(self):
        r"""GetBoxCount(self) -> int16_t"""
        return _PySpin.InferenceBoundingBoxResult_GetBoxCount(self)

    def GetBoxSize(self):
        r"""GetBoxSize(self) -> int8_t"""
        return _PySpin.InferenceBoundingBoxResult_GetBoxSize(self)

    def GetBoxAt(self, index):
        r"""
        GetBoxAt(self, index) -> InferenceBoundingBox

        Parameters
        ----------
        index: uint16_t const

        """
        return _PySpin.InferenceBoundingBoxResult_GetBoxAt(self, index)

# Register InferenceBoundingBoxResult in _PySpin:
_PySpin.InferenceBoundingBoxResult_swigregister(InferenceBoundingBoxResult)

class ChunkData(IChunkData):
    r"""


    The chunk data which contains additional information about an image.

    C++ includes: ChunkData.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> ChunkData
        __init__(self, src) -> ChunkData

        Parameters
        ----------
        src: Spinnaker::ChunkData const &

        Spinnaker::ChunkData::ChunkData(const ChunkData &src) 
        """
        _PySpin.ChunkData_swiginit(self, _PySpin.new_ChunkData(*args))
    __swig_destroy__ = _PySpin.delete_ChunkData

    def SetChunks(self, pNodeMap):
        r"""
        SetChunks(self, pNodeMap)

        Parameters
        ----------
        pNodeMap: Spinnaker::GenApi::INodeMap &

        void
        Spinnaker::ChunkData::SetChunks(GenApi::INodeMap &pNodeMap) 
        """
        return _PySpin.ChunkData_SetChunks(self, pNodeMap)

    def GetBlackLevel(self):
        r"""
        GetBlackLevel(self) -> float64_t
        float64_t
        Spinnaker::ChunkData::GetBlackLevel() const

        Description: Returns the black level used to capture the image
        included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetBlackLevel(self)

    def GetFrameID(self):
        r"""
        GetFrameID(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetFrameID() const

        Description: Returns the unique Identifier of the frame (or image)
        included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetFrameID(self)

    def GetExposureTime(self):
        r"""
        GetExposureTime(self) -> float64_t
        float64_t Spinnaker::ChunkData::GetExposureTime() const

        Description: Returns the exposure time used to capture the image.
        Visibility: Expert 
        """
        return _PySpin.ChunkData_GetExposureTime(self)

    def GetCompressionMode(self):
        r"""GetCompressionMode(self) -> int64_t"""
        return _PySpin.ChunkData_GetCompressionMode(self)

    def GetCompressionRatio(self):
        r"""GetCompressionRatio(self) -> float64_t"""
        return _PySpin.ChunkData_GetCompressionRatio(self)

    def GetTimestamp(self):
        r"""
        GetTimestamp(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetTimestamp() const

        Description: Returns the Timestamp of the image included in the
        payload at the time of the FrameStart internal event. Visibility:
        Expert 
        """
        return _PySpin.ChunkData_GetTimestamp(self)

    def GetExposureEndLineStatusAll(self):
        r"""GetExposureEndLineStatusAll(self) -> int64_t"""
        return _PySpin.ChunkData_GetExposureEndLineStatusAll(self)

    def GetWidth(self):
        r"""
        GetWidth(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetWidth() const

        Description: Returns the Width of the image included in the payload.
        Visibility: Expert 
        """
        return _PySpin.ChunkData_GetWidth(self)

    def GetImage(self):
        r"""GetImage(self) -> int64_t"""
        return _PySpin.ChunkData_GetImage(self)

    def GetHeight(self):
        r"""
        GetHeight(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetHeight() const

        Description: Returns the Height of the image included in the payload.
        Visibility: Expert 
        """
        return _PySpin.ChunkData_GetHeight(self)

    def GetGain(self):
        r"""
        GetGain(self) -> float64_t
        float64_t
        Spinnaker::ChunkData::GetGain() const

        Description: Returns the gain used to capture the image. Visibility:
        Expert 
        """
        return _PySpin.ChunkData_GetGain(self)

    def GetSequencerSetActive(self):
        r"""
        GetSequencerSetActive(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetSequencerSetActive() const

        Description: Return the index of the active set of the running
        sequencer included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetSequencerSetActive(self)

    def GetCRC(self):
        r"""GetCRC(self) -> int64_t"""
        return _PySpin.ChunkData_GetCRC(self)

    def GetOffsetX(self):
        r"""
        GetOffsetX(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetOffsetX() const

        Description: Returns the OffsetX of the image included in the payload.
        Visibility: Expert 
        """
        return _PySpin.ChunkData_GetOffsetX(self)

    def GetOffsetY(self):
        r"""
        GetOffsetY(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetOffsetY() const

        Description: Returns the OffsetY of the image included in the payload.
        Visibility: Expert 
        """
        return _PySpin.ChunkData_GetOffsetY(self)

    def GetSerialDataLength(self):
        r"""GetSerialDataLength(self) -> int64_t"""
        return _PySpin.ChunkData_GetSerialDataLength(self)

    def GetPartSelector(self):
        r"""
        GetPartSelector(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetPartSelector() const

        Description: Selects the part to access in chunk data in a multipart
        transmission. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetPartSelector(self)

    def GetPixelDynamicRangeMin(self):
        r"""
        GetPixelDynamicRangeMin(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetPixelDynamicRangeMin() const

        Description: Returns the minimum value of dynamic range of the image
        included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetPixelDynamicRangeMin(self)

    def GetPixelDynamicRangeMax(self):
        r"""
        GetPixelDynamicRangeMax(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetPixelDynamicRangeMax() const

        Description: Returns the maximum value of dynamic range of the image
        included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetPixelDynamicRangeMax(self)

    def GetTimestampLatchValue(self):
        r"""
        GetTimestampLatchValue(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetTimestampLatchValue() const

        Description: Returns the last Timestamp latched with the
        TimestampLatch command. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetTimestampLatchValue(self)

    def GetLineStatusAll(self):
        r"""
        GetLineStatusAll(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetLineStatusAll() const

        Description: Returns the status of all the I/O lines at the time of
        the FrameStart internal event. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetLineStatusAll(self)

    def GetCounterValue(self):
        r"""
        GetCounterValue(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetCounterValue() const

        Description: Returns the value of the selected Chunk counter at the
        time of the FrameStart event. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetCounterValue(self)

    def GetTimerValue(self):
        r"""
        GetTimerValue(self) -> float64_t
        float64_t
        Spinnaker::ChunkData::GetTimerValue() const

        Description: Returns the value of the selected Timer at the time of
        the FrameStart internal event. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetTimerValue(self)

    def GetScanLineSelector(self):
        r"""
        GetScanLineSelector(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetScanLineSelector() const

        Description: Index for vector representation of one chunk value per
        line in an image. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetScanLineSelector(self)

    def GetEncoderValue(self):
        r"""
        GetEncoderValue(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetEncoderValue() const

        Description: Returns the counter's value of the selected Encoder at
        the time of the FrameStart in area scan mode or the counter's value at
        the time of the LineStart selected by ChunkScanLineSelector in
        LineScan mode. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetEncoderValue(self)

    def GetLinePitch(self):
        r"""
        GetLinePitch(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetLinePitch() const

        Description: Returns the LinePitch of the image included in the
        payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetLinePitch(self)

    def GetTransferBlockID(self):
        r"""
        GetTransferBlockID(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetTransferBlockID() const

        Description: Returns the unique identifier of the transfer block used
        to transport the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetTransferBlockID(self)

    def GetTransferQueueCurrentBlockCount(self):
        r"""
        GetTransferQueueCurrentBlockCount(self) -> int64_t
        int64_t
        Spinnaker::ChunkData::GetTransferQueueCurrentBlockCount() const

        Description: Returns the current number of blocks in the transfer
        queue. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetTransferQueueCurrentBlockCount(self)

    def GetStreamChannelID(self):
        r"""
        GetStreamChannelID(self) -> int64_t
        int64_t Spinnaker::ChunkData::GetStreamChannelID() const

        Description: Returns identifier of the stream channel used to carry
        the block. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetStreamChannelID(self)

    def GetScan3dCoordinateScale(self):
        r"""
        GetScan3dCoordinateScale(self) -> float64_t
        float64_t Spinnaker::ChunkData::GetScan3dCoordinateScale() const

        Description: Returns the Scale for the selected coordinate axis of the
        image included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetScan3dCoordinateScale(self)

    def GetScan3dCoordinateOffset(self):
        r"""
        GetScan3dCoordinateOffset(self) -> float64_t
        float64_t Spinnaker::ChunkData::GetScan3dCoordinateOffset() const

        Description: Returns the Offset for the selected coordinate axis of
        the image included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetScan3dCoordinateOffset(self)

    def GetScan3dInvalidDataValue(self):
        r"""
        GetScan3dInvalidDataValue(self) -> float64_t
        float64_t Spinnaker::ChunkData::GetScan3dInvalidDataValue() const

        Description: Returns the Invalid Data Value used for the image
        included in the payload. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetScan3dInvalidDataValue(self)

    def GetScan3dAxisMin(self):
        r"""
        GetScan3dAxisMin(self) -> float64_t
        float64_t Spinnaker::ChunkData::GetScan3dAxisMin() const

        Description: Returns the Minimum Axis value for the selected
        coordinate axis of the image included in the payload. Visibility:
        Expert 
        """
        return _PySpin.ChunkData_GetScan3dAxisMin(self)

    def GetScan3dAxisMax(self):
        r"""
        GetScan3dAxisMax(self) -> float64_t
        float64_t Spinnaker::ChunkData::GetScan3dAxisMax() const

        Description: Returns the Maximum Axis value for the selected
        coordinate axis of the image included in the payload. Visibility:
        Expert 
        """
        return _PySpin.ChunkData_GetScan3dAxisMax(self)

    def GetScan3dTransformValue(self):
        r"""
        GetScan3dTransformValue(self) -> float64_t
        float64_t Spinnaker::ChunkData::GetScan3dTransformValue() const

        Description: Returns the transform value. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetScan3dTransformValue(self)

    def GetScan3dCoordinateReferenceValue(self):
        r"""
        GetScan3dCoordinateReferenceValue(self) -> float64_t
        float64_t
        Spinnaker::ChunkData::GetScan3dCoordinateReferenceValue() const

        Description: Reads the value of a position or pose coordinate for the
        anchor or transformed coordinate systems relative to the reference
        point. Visibility: Expert 
        """
        return _PySpin.ChunkData_GetScan3dCoordinateReferenceValue(self)

    def GetInferenceFrameId(self):
        r"""GetInferenceFrameId(self) -> int64_t"""
        return _PySpin.ChunkData_GetInferenceFrameId(self)

    def GetInferenceResult(self):
        r"""GetInferenceResult(self) -> int64_t"""
        return _PySpin.ChunkData_GetInferenceResult(self)

    def GetInferenceConfidence(self):
        r"""GetInferenceConfidence(self) -> float64_t"""
        return _PySpin.ChunkData_GetInferenceConfidence(self)

    def GetInferenceBoundingBoxResult(self):
        r"""GetInferenceBoundingBoxResult(self) -> InferenceBoundingBoxResult"""
        return _PySpin.ChunkData_GetInferenceBoundingBoxResult(self)

# Register ChunkData in _PySpin:
_PySpin.ChunkData_swigregister(ChunkData)

class ChannelStatistics(object):
    r"""

    Class used to store statistics (as properties) for one channel of an image.
    Properties:

        * channel: The image channel that the statistics are based on (as an int).
        * range_min: The smallest possible pixel value.
        * range_max: The largest possible pixel value.
        * pixel_value_min: The smallest pixel value in the current channel.
        * pixel_value_max: The largest pixel value in the current channel.
        * num_pixel_values: The total number of pixel values in the current channel.
        * pixel_value_mean: The average pixel value in the current channel.
        * histogram: NumPy array representing the histogram of the current channel.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channel = property(_PySpin.ChannelStatistics_channel_get, _PySpin.ChannelStatistics_channel_set, doc=r"""channel""")
    range_min = property(_PySpin.ChannelStatistics_range_min_get, _PySpin.ChannelStatistics_range_min_set, doc=r"""range_min""")
    range_max = property(_PySpin.ChannelStatistics_range_max_get, _PySpin.ChannelStatistics_range_max_set, doc=r"""range_max""")
    pixel_value_min = property(_PySpin.ChannelStatistics_pixel_value_min_get, _PySpin.ChannelStatistics_pixel_value_min_set, doc=r"""pixel_value_min""")
    pixel_value_max = property(_PySpin.ChannelStatistics_pixel_value_max_get, _PySpin.ChannelStatistics_pixel_value_max_set, doc=r"""pixel_value_max""")
    num_pixel_values = property(_PySpin.ChannelStatistics_num_pixel_values_get, _PySpin.ChannelStatistics_num_pixel_values_set, doc=r"""num_pixel_values""")
    pixel_value_mean = property(_PySpin.ChannelStatistics_pixel_value_mean_get, _PySpin.ChannelStatistics_pixel_value_mean_set, doc=r"""pixel_value_mean""")
    histogram = property(_PySpin.ChannelStatistics_histogram_get, _PySpin.ChannelStatistics_histogram_set, doc=r"""histogram""")

    def __init__(self, image, channel):
        r"""
        __init__(self, image, channel) -> ChannelStatistics

        Parameters
        ----------
        image: IImage *
        channel: StatisticsChannel


        Constructor for the ChannelStatistics class.

        Parameters:
        -----------
        image: ImagePtr to generate statistics for.
        channel: Channel to generate statistics on.

        """
        _PySpin.ChannelStatistics_swiginit(self, _PySpin.new_ChannelStatistics(image, channel))
    __swig_destroy__ = _PySpin.delete_ChannelStatistics

# Register ChannelStatistics in _PySpin:
_PySpin.ChannelStatistics_swigregister(ChannelStatistics)

class IImage(object):
    r"""Proxy of C++ Spinnaker::IImage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IImage

    def GetColorProcessing(self):
        r"""GetColorProcessing(self) -> Spinnaker::ColorProcessingAlgorithm"""
        return _PySpin.IImage_GetColorProcessing(self)

    def ResetImage(self, *args):
        r"""
        ResetImage(self, width, height, offsetX, offsetY, pixelFormat)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums

        ResetImage(self, width, height, offsetX, offsetY, pixelFormat, pData)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *

        ResetImage(self, width, height, offsetX, offsetY, pixelFormat, pData, dataPayloadType, dataSize)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *
        dataPayloadType: enum Spinnaker::TLPayloadType
        dataSize: size_t

        """
        return _PySpin.IImage_ResetImage(self, *args)

    def Release(self):
        r"""Release(self)"""
        return _PySpin.IImage_Release(self)

    def GetID(self):
        r"""GetID(self) -> uint64_t"""
        return _PySpin.IImage_GetID(self)

    def GetStreamIndex(self):
        r"""GetStreamIndex(self) -> uint64_t"""
        return _PySpin.IImage_GetStreamIndex(self)

    def GetPrivateData(self):
        r"""GetPrivateData(self) -> void *"""
        return _PySpin.IImage_GetPrivateData(self)

    def GetDataAbsoluteMax(self):
        r"""GetDataAbsoluteMax(self) -> float"""
        return _PySpin.IImage_GetDataAbsoluteMax(self)

    def GetDataAbsoluteMin(self):
        r"""GetDataAbsoluteMin(self) -> float"""
        return _PySpin.IImage_GetDataAbsoluteMin(self)

    def GetBufferSize(self):
        r"""GetBufferSize(self) -> size_t"""
        return _PySpin.IImage_GetBufferSize(self)

    def DeepCopy(self, pSrcImage):
        r"""
        DeepCopy(self, pSrcImage)

        Parameters
        ----------
        pSrcImage: Spinnaker::ImagePtr const

        """
        return _PySpin.IImage_DeepCopy(self, pSrcImage)

    def GetWidth(self):
        r"""GetWidth(self) -> size_t"""
        return _PySpin.IImage_GetWidth(self)

    def GetHeight(self):
        r"""GetHeight(self) -> size_t"""
        return _PySpin.IImage_GetHeight(self)

    def GetStride(self):
        r"""GetStride(self) -> size_t"""
        return _PySpin.IImage_GetStride(self)

    def GetBitsPerPixel(self):
        r"""GetBitsPerPixel(self) -> size_t"""
        return _PySpin.IImage_GetBitsPerPixel(self)

    def GetNumChannels(self):
        r"""GetNumChannels(self) -> size_t"""
        return _PySpin.IImage_GetNumChannels(self)

    def GetXOffset(self):
        r"""GetXOffset(self) -> size_t"""
        return _PySpin.IImage_GetXOffset(self)

    def GetYOffset(self):
        r"""GetYOffset(self) -> size_t"""
        return _PySpin.IImage_GetYOffset(self)

    def GetXPadding(self):
        r"""GetXPadding(self) -> size_t"""
        return _PySpin.IImage_GetXPadding(self)

    def GetYPadding(self):
        r"""GetYPadding(self) -> size_t"""
        return _PySpin.IImage_GetYPadding(self)

    def GetFrameID(self):
        r"""GetFrameID(self) -> uint64_t"""
        return _PySpin.IImage_GetFrameID(self)

    def GetPayloadType(self):
        r"""GetPayloadType(self) -> size_t"""
        return _PySpin.IImage_GetPayloadType(self)

    def GetTLPayloadType(self):
        r"""GetTLPayloadType(self) -> Spinnaker::TLPayloadType"""
        return _PySpin.IImage_GetTLPayloadType(self)

    def GetTLPixelFormat(self):
        r"""GetTLPixelFormat(self) -> uint64_t"""
        return _PySpin.IImage_GetTLPixelFormat(self)

    def GetTLPixelFormatNamespace(self):
        r"""GetTLPixelFormatNamespace(self) -> Spinnaker::TLPixelFormatNamespace"""
        return _PySpin.IImage_GetTLPixelFormatNamespace(self)

    def GetPixelFormatName(self):
        r"""GetPixelFormatName(self) -> gcstring"""
        return _PySpin.IImage_GetPixelFormatName(self)

    def GetPixelFormat(self):
        r"""GetPixelFormat(self) -> Spinnaker::PixelFormatEnums"""
        return _PySpin.IImage_GetPixelFormat(self)

    def GetPixelFormatIntType(self):
        r"""GetPixelFormatIntType(self) -> Spinnaker::PixelFormatIntType"""
        return _PySpin.IImage_GetPixelFormatIntType(self)

    def IsIncomplete(self):
        r"""IsIncomplete(self) -> bool"""
        return _PySpin.IImage_IsIncomplete(self)

    def GetValidPayloadSize(self):
        r"""GetValidPayloadSize(self) -> size_t"""
        return _PySpin.IImage_GetValidPayloadSize(self)

    def GetChunkLayoutId(self):
        r"""GetChunkLayoutId(self) -> uint64_t"""
        return _PySpin.IImage_GetChunkLayoutId(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> uint64_t"""
        return _PySpin.IImage_GetTimeStamp(self)

    def Save(self, *args):
        r"""
        Save(self, pFilename, format=SPINNAKER_IMAGE_FILE_FORMAT_FROM_FILE_EXT)

        Parameters
        ----------
        pFilename: char const *
        format: enum Spinnaker::ImageFileFormat

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PNGOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PPMOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PGMOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::TIFFOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::JPEGOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::JPG2Option &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::BMPOption &

        Save(self, pFilename, option)

        Parameters
        ----------
        pFilename: char const *
        option: Spinnaker::SIOption &

        """
        return _PySpin.IImage_Save(self, *args)

    def GetChunkData(self):
        r"""GetChunkData(self) -> ChunkData"""
        return _PySpin.IImage_GetChunkData(self)

    def CalculateStatistics(self, pStatistics):
        r"""
        CalculateStatistics(self, pStatistics)

        Parameters
        ----------
        pStatistics: Spinnaker::ImageStatistics &

        """
        return _PySpin.IImage_CalculateStatistics(self, pStatistics)

    def HasCRC(self):
        r"""HasCRC(self) -> bool"""
        return _PySpin.IImage_HasCRC(self)

    def HasChunkData(self):
        r"""HasChunkData(self) -> bool"""
        return _PySpin.IImage_HasChunkData(self)

    def CheckCRC(self):
        r"""CheckCRC(self) -> bool"""
        return _PySpin.IImage_CheckCRC(self)

    def GetImageSize(self):
        r"""GetImageSize(self) -> size_t"""
        return _PySpin.IImage_GetImageSize(self)

    def IsInUse(self):
        r"""IsInUse(self) -> bool"""
        return _PySpin.IImage_IsInUse(self)

    def GetImageStatus(self):
        r"""GetImageStatus(self) -> Spinnaker::ImageStatus"""
        return _PySpin.IImage_GetImageStatus(self)

    def IsCompressed(self):
        r"""IsCompressed(self) -> bool"""
        return _PySpin.IImage_IsCompressed(self)

    def CalculateChannelStatistics(self, channel):
        r"""
        CalculateChannelStatistics(self, channel) -> ChannelStatistics

        Parameters
        ----------
        channel: enum Spinnaker::StatisticsChannel

        """
        return _PySpin.IImage_CalculateChannelStatistics(self, channel)

    def GetData(self, *args):
        r"""
        GetData(self)
        GetData(self) -> PyObject *
        """
        return _PySpin.IImage_GetData(self, *args)

    def GetNDArray(self):
        r"""GetNDArray(self) -> PyObject *"""
        return _PySpin.IImage_GetNDArray(self)

# Register IImage in _PySpin:
_PySpin.IImage_swigregister(IImage)

class Image(IImage):
    r"""


    The image object class.

    C++ includes: Image.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create(*args):
        r"""
        Create() -> ImagePtr
        Create(image) -> ImagePtr

        Parameters
        ----------
        image: Spinnaker::ImagePtr const

        Create(width, height, offsetX, offsetY, pixelFormat, pData) -> ImagePtr

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *

        Create(width, height, offsetX, offsetY, pixelFormat, pData, dataPayloadType, dataSize) -> ImagePtr

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *
        dataPayloadType: enum Spinnaker::TLPayloadType
        dataSize: size_t

        Creates a new Image object, either using a default constructor, copied from another ImagePtr, or using width, height,
        offset_x, offset_y, pixel format, and a NumPy array containing 8-bit unsigned ints representing the image data
        (replaces the void* pData argument).
        """
        return _PySpin.Image_Create(*args)
    __swig_destroy__ = _PySpin.delete_Image

    def GetColorProcessing(self):
        r"""
        GetColorProcessing(self) -> Spinnaker::ColorProcessingAlgorithm
        ColorProcessingAlgorithm Spinnaker::Image::GetColorProcessing() const

        Gets the algorithm used to produce the image.

        See:   Convert()

        The color processing algorithm used to produce the image. 
        """
        return _PySpin.Image_GetColorProcessing(self)

    def ResetImage(self, *args):
        r"""
        ResetImage(self, width, height, offsetX, offsetY, pixelFormat)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums

        ResetImage(self, width, height, offsetX, offsetY, pixelFormat, pData)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *

        ResetImage(self, width, height, offsetX, offsetY, pixelFormat, pData, dataPayloadType, dataSize)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *
        dataPayloadType: enum Spinnaker::TLPayloadType
        dataSize: size_t

        void
        Spinnaker::Image::ResetImage(size_t width, size_t height, size_t
        offsetX, size_t offsetY, Spinnaker::PixelFormatEnums pixelFormat, void
        *pData)

        Sets new dimensions of the image object.

        Parameters:
        -----------

        width:  The width of image in pixels to set.

        height:  The height of image in pixels to set.

        offsetX:  The x offset in pixels to set.

        offsetY:  The y offset in pixels to set.

        pixelFormat:  Pixel format to set.

        pData:  Pointer to the image buffer. 
        """
        return _PySpin.Image_ResetImage(self, *args)

    def Release(self):
        r"""
        Release(self)
        void
        Spinnaker::Image::Release() 
        """
        return _PySpin.Image_Release(self)

    def GetID(self):
        r"""
        GetID(self) -> uint64_t
        uint64_t
        Spinnaker::Image::GetID() const

        Gets a unique ID for this image. Each image in a steam will have a
        unique ID to help identify it.

        The 64 bit unique id for this image. 
        """
        return _PySpin.Image_GetID(self)

    def GetStreamIndex(self):
        r"""GetStreamIndex(self) -> uint64_t"""
        return _PySpin.Image_GetStreamIndex(self)

    def GetDataAbsoluteMax(self):
        r"""GetDataAbsoluteMax(self) -> float"""
        return _PySpin.Image_GetDataAbsoluteMax(self)

    def GetDataAbsoluteMin(self):
        r"""GetDataAbsoluteMin(self) -> float"""
        return _PySpin.Image_GetDataAbsoluteMin(self)

    def GetPrivateData(self):
        r"""
        GetPrivateData(self) -> void *
        void*
        Spinnaker::Image::GetPrivateData() const

        Gets a pointer to the user passed data associated with the image. This
        function is considered unsafe. The pointer returned could be
        invalidated if the buffer is released. The pointer may also be
        invalidated if the Image object is passed to Image::Release().

        TODO: no way to set private data for image yet.

        A pointer to the user passed data pointer. 
        """
        return _PySpin.Image_GetPrivateData(self)

    def GetBufferSize(self):
        r"""
        GetBufferSize(self) -> size_t
        size_t
        Spinnaker::Image::GetBufferSize() const

        Gets the size of the buffer associated with the image in bytes.

        The size of the buffer, in bytes. 
        """
        return _PySpin.Image_GetBufferSize(self)

    def DeepCopy(self, pSrcImage):
        r"""
        DeepCopy(self, pSrcImage)

        Parameters
        ----------
        pSrcImage: Spinnaker::ImagePtr const

        void
        Spinnaker::Image::DeepCopy(const ImagePtr pSrcImage)

        Performs a deep copy of the Image. After this operation, the image
        contents and member variables will be the same. The Images will not
        share a buffer. The Image's current buffer will not be released.

        Parameters:
        -----------

        pSrcImage:  The Image to copy the data from. 
        """
        return _PySpin.Image_DeepCopy(self, pSrcImage)

    def GetWidth(self):
        r"""
        GetWidth(self) -> size_t
        size_t
        Spinnaker::Image::GetWidth() const

        Gets the width of the image in pixels. This information is retrieved
        from the Transport Layer image format headers. It is retrieved on a
        per image basis.

        The width in pixels. 
        """
        return _PySpin.Image_GetWidth(self)

    def GetHeight(self):
        r"""
        GetHeight(self) -> size_t
        size_t
        Spinnaker::Image::GetHeight() const

        Gets the height of the image in pixels. This information is retrieved
        from the Transport Layer Image format headers. It is retrieved on a
        per image basis.

        The height in pixels. 
        """
        return _PySpin.Image_GetHeight(self)

    def GetStride(self):
        r"""
        GetStride(self) -> size_t
        size_t
        Spinnaker::Image::GetStride() const

        Gets the stride of the image in bytes. The stride of an image is how
        many bytes are in each row. This information is retrieved from the
        Transport Layer Image format headers. It is retrieved on a per image
        basis.

        The stride in bytes. 
        """
        return _PySpin.Image_GetStride(self)

    def GetBitsPerPixel(self):
        r"""
        GetBitsPerPixel(self) -> size_t
        size_t
        Spinnaker::Image::GetBitsPerPixel() const

        Gets the number of bits used per pixel in the image. This information
        is retrieved from the Transport Layer Image format headers. It is
        retrieved on a per image basis.

        The number of bits used per pixel. 
        """
        return _PySpin.Image_GetBitsPerPixel(self)

    def GetNumChannels(self):
        r"""GetNumChannels(self) -> size_t"""
        return _PySpin.Image_GetNumChannels(self)

    def GetXOffset(self):
        r"""
        GetXOffset(self) -> size_t
        size_t
        Spinnaker::Image::GetXOffset() const

        Gets the ROI x offset in pixels for this image. This information is
        retrieved from the Transport Layer Image format headers. It is
        retrieved on a per image basis.

        The x offset in pixels. 
        """
        return _PySpin.Image_GetXOffset(self)

    def GetYOffset(self):
        r"""
        GetYOffset(self) -> size_t
        size_t
        Spinnaker::Image::GetYOffset() const

        Gets the ROI y offset in pixels for this image. This information is
        retrieved from the Transport Layer Image format headers. It is
        retrieved on a per image basis.

        The y offset in pixels. 
        """
        return _PySpin.Image_GetYOffset(self)

    def GetXPadding(self):
        r"""
        GetXPadding(self) -> size_t
        size_t
        Spinnaker::Image::GetXPadding() const

        Gets the x padding in bytes for this image. This is the number of
        bytes at the end of each line to facilitate alignment in buffers. This
        information is retrieved from the Transport Layer Image format
        headers. It is retrieved on a per image basis.

        The x padding in bytes. 
        """
        return _PySpin.Image_GetXPadding(self)

    def GetYPadding(self):
        r"""
        GetYPadding(self) -> size_t
        size_t
        Spinnaker::Image::GetYPadding() const

        Gets the y padding in bytes for this image. This is the number of
        bytes at the end of each image to facilitate alignment in buffers.
        This information is retrieved from the Transport Layer Image format
        headers. It is retrieved on a per image basis.

        The y padding in bytes. 
        """
        return _PySpin.Image_GetYPadding(self)

    def GetFrameID(self):
        r"""
        GetFrameID(self) -> uint64_t
        uint64_t
        Spinnaker::Image::GetFrameID() const

        Gets the frame ID for this image.

        The frame ID. 
        """
        return _PySpin.Image_GetFrameID(self)

    def GetPayloadType(self):
        r"""
        GetPayloadType(self) -> size_t
        size_t
        Spinnaker::Image::GetPayloadType() const

        Gets the payload type that was transmitted. This is a device types
        specific value that identifies how the image was transmitted. This
        information is retrieved from the Transport Layer Image format
        headers. It is retrieved on a per image basis.

        Device types specific payload type. 
        """
        return _PySpin.Image_GetPayloadType(self)

    def GetTLPayloadType(self):
        r"""
        GetTLPayloadType(self) -> Spinnaker::TLPayloadType
        PayloadTypeInfoIDs Spinnaker::Image::GetTLPayloadType() const

        Gets the GenTL specific payload type that was transmitted. This is a
        Transport Layer specific value that identifies how the image was
        transmitted. This information is retrieved from the Transport Layer
        Image format headers. It is retrieved on a per image basis.

        Transport Layer specific payload type. 
        """
        return _PySpin.Image_GetTLPayloadType(self)

    def GetTLPixelFormat(self):
        r"""
        GetTLPixelFormat(self) -> uint64_t
        uint64_t
        Spinnaker::Image::GetTLPixelFormat() const

        Gets the pixel format of the image. This is a Transport Layer specific
        pixel format that identifies how the pixels in the image should be
        interpreted. To understand how to interpret this value it is necessary
        to know what the transport layer namespace is. This can be retrieved
        through a call to GetTLPixelFormatNamespace(). This information is
        retrieved from the Transport Layer Image format headers. It is
        retrieved on a per image basis.

        See:   GetTLPixelFormatNamespace()

        Transport Layer specific pixel format. 
        """
        return _PySpin.Image_GetTLPixelFormat(self)

    def GetTLPixelFormatNamespace(self):
        r"""
        GetTLPixelFormatNamespace(self) -> Spinnaker::TLPixelFormatNamespace
        PixelFormatNamespaceID Spinnaker::Image::GetTLPixelFormatNamespace()
        const

        Returns an enum value that represents the namespace in which this
        image's TL specific pixel format resides. This information is
        important to properly interpret the value returned by
        GetTLPixelFormat()

        See:   GetTLPixelFormat()

        enum value representing the PixelFormatNamespace. 
        """
        return _PySpin.Image_GetTLPixelFormatNamespace(self)

    def GetPixelFormatName(self):
        r"""
        GetPixelFormatName(self) -> gcstring
        GenICam::gcstring Spinnaker::Image::GetPixelFormatName() const

        Returns a string value that represents this image's pixel format. The
        string is a valid SFNC name that maps to the underlying TL specific
        pixel format. This is the most generic way to identify the pixel
        format of the image.

        string value representing the PixelFormat. 
        """
        return _PySpin.Image_GetPixelFormatName(self)

    def GetPixelFormat(self):
        r"""
        GetPixelFormat(self) -> Spinnaker::PixelFormatEnums
        Spinnaker::PixelFormatEnums Spinnaker::Image::GetPixelFormat() const

        Returns an enum value that represents the pixel format of this image.
        The enum can be used with the easy access GenICam features available
        through the Camera.h header file. This easy access enum can also be
        used in the Convert() function.

        See:   Convert()

        enum value representing the PixelFormat. 
        """
        return _PySpin.Image_GetPixelFormat(self)

    def GetPixelFormatIntType(self):
        r"""GetPixelFormatIntType(self) -> Spinnaker::PixelFormatIntType"""
        return _PySpin.Image_GetPixelFormatIntType(self)

    def IsIncomplete(self):
        r"""
        IsIncomplete(self) -> bool
        bool
        Spinnaker::Image::IsIncomplete() const

        Returns a boolean value indicating if this image was incomplete. An
        image is marked as incomplete if the transport layer received less
        data then it requested.

        Returns true if image is incomplete, false otherwise. 
        """
        return _PySpin.Image_IsIncomplete(self)

    def GetValidPayloadSize(self):
        r"""
        GetValidPayloadSize(self) -> size_t
        size_t
        Spinnaker::Image::GetValidPayloadSize() const

        Returns the size of valid data in the image payload. This is the
        actual amount of data read from the device. A user created image has a
        payload size of zero. GetBufferSize() returns the total size of bytes
        allocated for the image.

        See:   GetBufferSize()

        size_t value representing valid payload. 
        """
        return _PySpin.Image_GetValidPayloadSize(self)

    def GetChunkLayoutId(self):
        r"""
        GetChunkLayoutId(self) -> uint64_t
        uint64_t
        Spinnaker::Image::GetChunkLayoutId() const

        Returns the id of the chunk data layout.

        uint64_t value representing the id of the chunk data layout. 
        """
        return _PySpin.Image_GetChunkLayoutId(self)

    def GetTimeStamp(self):
        r"""
        GetTimeStamp(self) -> uint64_t
        uint64_t
        Spinnaker::Image::GetTimeStamp() const

        Gets the time stamp for the image in nanoseconds.

        The time stamp of the image. 
        """
        return _PySpin.Image_GetTimeStamp(self)

    def Save(self, *args):
        r"""
        Save(self, pFilename, format=SPINNAKER_IMAGE_FILE_FORMAT_FROM_FILE_EXT)

        Parameters
        ----------
        pFilename: char const *
        format: enum Spinnaker::ImageFileFormat

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PNGOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PPMOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PGMOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::TIFFOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::JPEGOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::JPG2Option &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::BMPOption &

        Save(self, pFilename, option)

        Parameters
        ----------
        pFilename: char const *
        option: Spinnaker::SIOption &

        void
        Spinnaker::Image::Save(const char *pFilename, BMPOption &pOption)

        Saves the image to the specified file name with the options specified.

        Parameters:
        -----------

        pFilename:  Filename to save image with.

        pOption:  Options to use while saving image. 
        """
        return _PySpin.Image_Save(self, *args)

    @staticmethod
    def Load(*args):
        r"""
        Load(pFilename, format=SPINNAKER_IMAGE_FILE_FORMAT_FROM_FILE_EXT) -> ImagePtr

        Parameters
        ----------
        pFilename: char const *
        format: enum Spinnaker::ImageFileFormat

        """
        return _PySpin.Image_Load(*args)

    def HasChunkData(self):
        r"""HasChunkData(self) -> bool"""
        return _PySpin.Image_HasChunkData(self)

    def GetChunkData(self):
        r"""
        GetChunkData(self) -> ChunkData
        const
        ChunkData& Spinnaker::Image::GetChunkData() const

        Returns a pointer to a chunk data interface. No ownership is
        transfered, the chunk data interface reference is valid until
        Image::Release() is called on this image.

        ChunkData interface that provides access to image chunks. 
        """
        return _PySpin.Image_GetChunkData(self)

    def HasCRC(self):
        r"""
        HasCRC(self) -> bool
        bool
        Spinnaker::Image::HasCRC() const

        Checks if the image contains ImageCRC checksum from chunk data

        Returns true if image contains ImageCRC checksum from chunk data and
        false otherwise. 
        """
        return _PySpin.Image_HasCRC(self)

    def CheckCRC(self):
        r"""
        CheckCRC(self) -> bool
        bool
        Spinnaker::Image::CheckCRC() const

        Checks if the computed checksum matches with chunk data's ImageCRC

        Returns true if computed checksum matches with the chunk data's CRC
        and false otherwise. 
        """
        return _PySpin.Image_CheckCRC(self)

    def GetImageSize(self):
        r"""
        GetImageSize(self) -> size_t
        size_t
        Spinnaker::Image::GetImageSize() const

        Returns the size of the image

        The image size in bytes. 
        """
        return _PySpin.Image_GetImageSize(self)

    def IsInUse(self):
        r"""
        IsInUse(self) -> bool
        bool
        Spinnaker::Image::IsInUse()

        Returns true if the image is still in use by the stream

        Returns true if the image is in use and false otherwise. 
        """
        return _PySpin.Image_IsInUse(self)

    def GetImageStatus(self):
        r"""
        GetImageStatus(self) -> Spinnaker::ImageStatus
        ImageStatus
        Spinnaker::Image::GetImageStatus() const

        Returns data integrity status of the image returned from
        GetNextImage()

        Returns whether image has any data integrity issues. 
        """
        return _PySpin.Image_GetImageStatus(self)

    @staticmethod
    def GetImageStatusDescription(status):
        r"""
        GetImageStatusDescription(status) -> char const *

        Parameters
        ----------
        status: enum Spinnaker::ImageStatus

        """
        return _PySpin.Image_GetImageStatusDescription(status)

    def IsCompressed(self):
        r"""IsCompressed(self) -> bool"""
        return _PySpin.Image_IsCompressed(self)

# Register Image in _PySpin:
_PySpin.Image_swigregister(Image)

def Image_Create(*args):
    r"""
    Image_Create() -> ImagePtr
    Image_Create(image) -> ImagePtr

    Parameters
    ----------
    image: Spinnaker::ImagePtr const

    Image_Create(width, height, offsetX, offsetY, pixelFormat, pData) -> ImagePtr

    Parameters
    ----------
    width: size_t
    height: size_t
    offsetX: size_t
    offsetY: size_t
    pixelFormat: enum Spinnaker::PixelFormatEnums
    pData: void *

    Image_Create(width, height, offsetX, offsetY, pixelFormat, pData, dataPayloadType, dataSize) -> ImagePtr

    Parameters
    ----------
    width: size_t
    height: size_t
    offsetX: size_t
    offsetY: size_t
    pixelFormat: enum Spinnaker::PixelFormatEnums
    pData: void *
    dataPayloadType: enum Spinnaker::TLPayloadType
    dataSize: size_t

    Creates a new Image object, either using a default constructor, copied from another ImagePtr, or using width, height,
    offset_x, offset_y, pixel format, and a NumPy array containing 8-bit unsigned ints representing the image data
    (replaces the void* pData argument).
    """
    return _PySpin.Image_Create(*args)

def Image_Load(*args):
    r"""
    Image_Load(pFilename, format=SPINNAKER_IMAGE_FILE_FORMAT_FROM_FILE_EXT) -> ImagePtr

    Parameters
    ----------
    pFilename: char const *
    format: enum Spinnaker::ImageFileFormat

    """
    return _PySpin.Image_Load(*args)

def Image_GetImageStatusDescription(status):
    r"""
    Image_GetImageStatusDescription(status) -> char const *

    Parameters
    ----------
    status: enum Spinnaker::ImageStatus

    """
    return _PySpin.Image_GetImageStatusDescription(status)

class _SWIG_CamPtr(object):
    r"""


    The base class of the SystemPtr, CameraPtr, InterfacePtr, ImagePtr and
    LoggingEventDataPtr objects.

    C++ includes: BasePtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete__SWIG_CamPtr

    def __init__(self, *args):
        r"""
        __init__(self) -> _SWIG_CamPtr
        __init__(self, other) -> _SWIG_CamPtr

        Parameters
        ----------
        other: Spinnaker::BasePtr< Spinnaker::Camera,Spinnaker::ICameraBase > const &

        Spinnaker::BasePtr< T, B >::BasePtr(const BasePtr &other)  throw ()
        """
        _PySpin._SWIG_CamPtr_swiginit(self, _PySpin.new__SWIG_CamPtr(*args))

    def __deref__(self):
        r"""__deref__(self) -> Camera"""
        return _PySpin._SWIG_CamPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        virtual bool
        Spinnaker::BasePtr< T, B >::IsValid() const  throw () true if the
        pointer is valid 
        """
        return _PySpin._SWIG_CamPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin._SWIG_CamPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::Camera,Spinnaker::ICameraBase > const &

        __eq__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_CamPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::Camera,Spinnaker::ICameraBase > const &

        __ne__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_CamPtr___ne__(self, *args)

    def get(self):
        r"""get(self) -> Camera"""
        return _PySpin._SWIG_CamPtr_get(self)

    def Init(self):
        r"""
        Init(self)
        void
        Spinnaker::Camera::Init() 
        """
        return _PySpin._SWIG_CamPtr_Init(self)
    LUTIndex = property(_PySpin._SWIG_CamPtr_LUTIndex_get, _PySpin._SWIG_CamPtr_LUTIndex_set, doc=r"""LUTIndex""")
    LUTEnable = property(_PySpin._SWIG_CamPtr_LUTEnable_get, _PySpin._SWIG_CamPtr_LUTEnable_set, doc=r"""LUTEnable""")
    LUTValue = property(_PySpin._SWIG_CamPtr_LUTValue_get, _PySpin._SWIG_CamPtr_LUTValue_set, doc=r"""LUTValue""")
    LUTSelector = property(_PySpin._SWIG_CamPtr_LUTSelector_get, _PySpin._SWIG_CamPtr_LUTSelector_set, doc=r"""LUTSelector""")
    ExposureTime = property(_PySpin._SWIG_CamPtr_ExposureTime_get, _PySpin._SWIG_CamPtr_ExposureTime_set, doc=r"""ExposureTime""")
    AcquisitionStop = property(_PySpin._SWIG_CamPtr_AcquisitionStop_get, _PySpin._SWIG_CamPtr_AcquisitionStop_set, doc=r"""AcquisitionStop""")
    AcquisitionResultingFrameRate = property(_PySpin._SWIG_CamPtr_AcquisitionResultingFrameRate_get, _PySpin._SWIG_CamPtr_AcquisitionResultingFrameRate_set, doc=r"""AcquisitionResultingFrameRate""")
    AcquisitionLineRate = property(_PySpin._SWIG_CamPtr_AcquisitionLineRate_get, _PySpin._SWIG_CamPtr_AcquisitionLineRate_set, doc=r"""AcquisitionLineRate""")
    AcquisitionStart = property(_PySpin._SWIG_CamPtr_AcquisitionStart_get, _PySpin._SWIG_CamPtr_AcquisitionStart_set, doc=r"""AcquisitionStart""")
    TriggerSoftware = property(_PySpin._SWIG_CamPtr_TriggerSoftware_get, _PySpin._SWIG_CamPtr_TriggerSoftware_set, doc=r"""TriggerSoftware""")
    ExposureMode = property(_PySpin._SWIG_CamPtr_ExposureMode_get, _PySpin._SWIG_CamPtr_ExposureMode_set, doc=r"""ExposureMode""")
    AcquisitionMode = property(_PySpin._SWIG_CamPtr_AcquisitionMode_get, _PySpin._SWIG_CamPtr_AcquisitionMode_set, doc=r"""AcquisitionMode""")
    AcquisitionFrameCount = property(_PySpin._SWIG_CamPtr_AcquisitionFrameCount_get, _PySpin._SWIG_CamPtr_AcquisitionFrameCount_set, doc=r"""AcquisitionFrameCount""")
    TriggerSource = property(_PySpin._SWIG_CamPtr_TriggerSource_get, _PySpin._SWIG_CamPtr_TriggerSource_set, doc=r"""TriggerSource""")
    TriggerActivation = property(_PySpin._SWIG_CamPtr_TriggerActivation_get, _PySpin._SWIG_CamPtr_TriggerActivation_set, doc=r"""TriggerActivation""")
    SensorShutterMode = property(_PySpin._SWIG_CamPtr_SensorShutterMode_get, _PySpin._SWIG_CamPtr_SensorShutterMode_set, doc=r"""SensorShutterMode""")
    TriggerDelay = property(_PySpin._SWIG_CamPtr_TriggerDelay_get, _PySpin._SWIG_CamPtr_TriggerDelay_set, doc=r"""TriggerDelay""")
    TriggerMode = property(_PySpin._SWIG_CamPtr_TriggerMode_get, _PySpin._SWIG_CamPtr_TriggerMode_set, doc=r"""TriggerMode""")
    AcquisitionFrameRate = property(_PySpin._SWIG_CamPtr_AcquisitionFrameRate_get, _PySpin._SWIG_CamPtr_AcquisitionFrameRate_set, doc=r"""AcquisitionFrameRate""")
    TriggerOverlap = property(_PySpin._SWIG_CamPtr_TriggerOverlap_get, _PySpin._SWIG_CamPtr_TriggerOverlap_set, doc=r"""TriggerOverlap""")
    TriggerSelector = property(_PySpin._SWIG_CamPtr_TriggerSelector_get, _PySpin._SWIG_CamPtr_TriggerSelector_set, doc=r"""TriggerSelector""")
    AcquisitionFrameRateEnable = property(_PySpin._SWIG_CamPtr_AcquisitionFrameRateEnable_get, _PySpin._SWIG_CamPtr_AcquisitionFrameRateEnable_set, doc=r"""AcquisitionFrameRateEnable""")
    ExposureAuto = property(_PySpin._SWIG_CamPtr_ExposureAuto_get, _PySpin._SWIG_CamPtr_ExposureAuto_set, doc=r"""ExposureAuto""")
    AcquisitionBurstFrameCount = property(_PySpin._SWIG_CamPtr_AcquisitionBurstFrameCount_get, _PySpin._SWIG_CamPtr_AcquisitionBurstFrameCount_set, doc=r"""AcquisitionBurstFrameCount""")
    EventTest = property(_PySpin._SWIG_CamPtr_EventTest_get, _PySpin._SWIG_CamPtr_EventTest_set, doc=r"""EventTest""")
    EventTestTimestamp = property(_PySpin._SWIG_CamPtr_EventTestTimestamp_get, _PySpin._SWIG_CamPtr_EventTestTimestamp_set, doc=r"""EventTestTimestamp""")
    EventExposureEndFrameID = property(_PySpin._SWIG_CamPtr_EventExposureEndFrameID_get, _PySpin._SWIG_CamPtr_EventExposureEndFrameID_set, doc=r"""EventExposureEndFrameID""")
    EventExposureEnd = property(_PySpin._SWIG_CamPtr_EventExposureEnd_get, _PySpin._SWIG_CamPtr_EventExposureEnd_set, doc=r"""EventExposureEnd""")
    EventExposureEndTimestamp = property(_PySpin._SWIG_CamPtr_EventExposureEndTimestamp_get, _PySpin._SWIG_CamPtr_EventExposureEndTimestamp_set, doc=r"""EventExposureEndTimestamp""")
    EventError = property(_PySpin._SWIG_CamPtr_EventError_get, _PySpin._SWIG_CamPtr_EventError_set, doc=r"""EventError""")
    EventErrorTimestamp = property(_PySpin._SWIG_CamPtr_EventErrorTimestamp_get, _PySpin._SWIG_CamPtr_EventErrorTimestamp_set, doc=r"""EventErrorTimestamp""")
    EventErrorCode = property(_PySpin._SWIG_CamPtr_EventErrorCode_get, _PySpin._SWIG_CamPtr_EventErrorCode_set, doc=r"""EventErrorCode""")
    EventErrorFrameID = property(_PySpin._SWIG_CamPtr_EventErrorFrameID_get, _PySpin._SWIG_CamPtr_EventErrorFrameID_set, doc=r"""EventErrorFrameID""")
    EventSelector = property(_PySpin._SWIG_CamPtr_EventSelector_get, _PySpin._SWIG_CamPtr_EventSelector_set, doc=r"""EventSelector""")
    EventSerialReceiveOverflow = property(_PySpin._SWIG_CamPtr_EventSerialReceiveOverflow_get, _PySpin._SWIG_CamPtr_EventSerialReceiveOverflow_set, doc=r"""EventSerialReceiveOverflow""")
    EventSerialPortReceive = property(_PySpin._SWIG_CamPtr_EventSerialPortReceive_get, _PySpin._SWIG_CamPtr_EventSerialPortReceive_set, doc=r"""EventSerialPortReceive""")
    EventSerialPortReceiveTimestamp = property(_PySpin._SWIG_CamPtr_EventSerialPortReceiveTimestamp_get, _PySpin._SWIG_CamPtr_EventSerialPortReceiveTimestamp_set, doc=r"""EventSerialPortReceiveTimestamp""")
    EventSerialData = property(_PySpin._SWIG_CamPtr_EventSerialData_get, _PySpin._SWIG_CamPtr_EventSerialData_set, doc=r"""EventSerialData""")
    EventSerialDataLength = property(_PySpin._SWIG_CamPtr_EventSerialDataLength_get, _PySpin._SWIG_CamPtr_EventSerialDataLength_set, doc=r"""EventSerialDataLength""")
    EventNotification = property(_PySpin._SWIG_CamPtr_EventNotification_get, _PySpin._SWIG_CamPtr_EventNotification_set, doc=r"""EventNotification""")
    LogicBlockLUTRowIndex = property(_PySpin._SWIG_CamPtr_LogicBlockLUTRowIndex_get, _PySpin._SWIG_CamPtr_LogicBlockLUTRowIndex_set, doc=r"""LogicBlockLUTRowIndex""")
    LogicBlockSelector = property(_PySpin._SWIG_CamPtr_LogicBlockSelector_get, _PySpin._SWIG_CamPtr_LogicBlockSelector_set, doc=r"""LogicBlockSelector""")
    LogicBlockLUTInputActivation = property(_PySpin._SWIG_CamPtr_LogicBlockLUTInputActivation_get, _PySpin._SWIG_CamPtr_LogicBlockLUTInputActivation_set, doc=r"""LogicBlockLUTInputActivation""")
    LogicBlockLUTInputSelector = property(_PySpin._SWIG_CamPtr_LogicBlockLUTInputSelector_get, _PySpin._SWIG_CamPtr_LogicBlockLUTInputSelector_set, doc=r"""LogicBlockLUTInputSelector""")
    LogicBlockLUTInputSource = property(_PySpin._SWIG_CamPtr_LogicBlockLUTInputSource_get, _PySpin._SWIG_CamPtr_LogicBlockLUTInputSource_set, doc=r"""LogicBlockLUTInputSource""")
    LogicBlockLUTOutputValue = property(_PySpin._SWIG_CamPtr_LogicBlockLUTOutputValue_get, _PySpin._SWIG_CamPtr_LogicBlockLUTOutputValue_set, doc=r"""LogicBlockLUTOutputValue""")
    LogicBlockLUTOutputValueAll = property(_PySpin._SWIG_CamPtr_LogicBlockLUTOutputValueAll_get, _PySpin._SWIG_CamPtr_LogicBlockLUTOutputValueAll_set, doc=r"""LogicBlockLUTOutputValueAll""")
    LogicBlockLUTSelector = property(_PySpin._SWIG_CamPtr_LogicBlockLUTSelector_get, _PySpin._SWIG_CamPtr_LogicBlockLUTSelector_set, doc=r"""LogicBlockLUTSelector""")
    ColorTransformationValue = property(_PySpin._SWIG_CamPtr_ColorTransformationValue_get, _PySpin._SWIG_CamPtr_ColorTransformationValue_set, doc=r"""ColorTransformationValue""")
    ColorTransformationEnable = property(_PySpin._SWIG_CamPtr_ColorTransformationEnable_get, _PySpin._SWIG_CamPtr_ColorTransformationEnable_set, doc=r"""ColorTransformationEnable""")
    ColorTransformationSelector = property(_PySpin._SWIG_CamPtr_ColorTransformationSelector_get, _PySpin._SWIG_CamPtr_ColorTransformationSelector_set, doc=r"""ColorTransformationSelector""")
    RgbTransformLightSource = property(_PySpin._SWIG_CamPtr_RgbTransformLightSource_get, _PySpin._SWIG_CamPtr_RgbTransformLightSource_set, doc=r"""RgbTransformLightSource""")
    Saturation = property(_PySpin._SWIG_CamPtr_Saturation_get, _PySpin._SWIG_CamPtr_Saturation_set, doc=r"""Saturation""")
    SaturationEnable = property(_PySpin._SWIG_CamPtr_SaturationEnable_get, _PySpin._SWIG_CamPtr_SaturationEnable_set, doc=r"""SaturationEnable""")
    ColorTransformationValueSelector = property(_PySpin._SWIG_CamPtr_ColorTransformationValueSelector_get, _PySpin._SWIG_CamPtr_ColorTransformationValueSelector_set, doc=r"""ColorTransformationValueSelector""")
    TimestampLatchValue = property(_PySpin._SWIG_CamPtr_TimestampLatchValue_get, _PySpin._SWIG_CamPtr_TimestampLatchValue_set, doc=r"""TimestampLatchValue""")
    TimestampReset = property(_PySpin._SWIG_CamPtr_TimestampReset_get, _PySpin._SWIG_CamPtr_TimestampReset_set, doc=r"""TimestampReset""")
    DeviceUserID = property(_PySpin._SWIG_CamPtr_DeviceUserID_get, _PySpin._SWIG_CamPtr_DeviceUserID_set, doc=r"""DeviceUserID""")
    DeviceTemperature = property(_PySpin._SWIG_CamPtr_DeviceTemperature_get, _PySpin._SWIG_CamPtr_DeviceTemperature_set, doc=r"""DeviceTemperature""")
    MaxDeviceResetTime = property(_PySpin._SWIG_CamPtr_MaxDeviceResetTime_get, _PySpin._SWIG_CamPtr_MaxDeviceResetTime_set, doc=r"""MaxDeviceResetTime""")
    DeviceTLVersionMinor = property(_PySpin._SWIG_CamPtr_DeviceTLVersionMinor_get, _PySpin._SWIG_CamPtr_DeviceTLVersionMinor_set, doc=r"""DeviceTLVersionMinor""")
    DeviceSerialNumber = property(_PySpin._SWIG_CamPtr_DeviceSerialNumber_get, _PySpin._SWIG_CamPtr_DeviceSerialNumber_set, doc=r"""DeviceSerialNumber""")
    DeviceVendorName = property(_PySpin._SWIG_CamPtr_DeviceVendorName_get, _PySpin._SWIG_CamPtr_DeviceVendorName_set, doc=r"""DeviceVendorName""")
    DeviceRegistersEndianness = property(_PySpin._SWIG_CamPtr_DeviceRegistersEndianness_get, _PySpin._SWIG_CamPtr_DeviceRegistersEndianness_set, doc=r"""DeviceRegistersEndianness""")
    DeviceManufacturerInfo = property(_PySpin._SWIG_CamPtr_DeviceManufacturerInfo_get, _PySpin._SWIG_CamPtr_DeviceManufacturerInfo_set, doc=r"""DeviceManufacturerInfo""")
    DeviceLinkSpeed = property(_PySpin._SWIG_CamPtr_DeviceLinkSpeed_get, _PySpin._SWIG_CamPtr_DeviceLinkSpeed_set, doc=r"""DeviceLinkSpeed""")
    LinkUptime = property(_PySpin._SWIG_CamPtr_LinkUptime_get, _PySpin._SWIG_CamPtr_LinkUptime_set, doc=r"""LinkUptime""")
    DeviceEventChannelCount = property(_PySpin._SWIG_CamPtr_DeviceEventChannelCount_get, _PySpin._SWIG_CamPtr_DeviceEventChannelCount_set, doc=r"""DeviceEventChannelCount""")
    TimestampLatch = property(_PySpin._SWIG_CamPtr_TimestampLatch_get, _PySpin._SWIG_CamPtr_TimestampLatch_set, doc=r"""TimestampLatch""")
    DeviceScanType = property(_PySpin._SWIG_CamPtr_DeviceScanType_get, _PySpin._SWIG_CamPtr_DeviceScanType_set, doc=r"""DeviceScanType""")
    DeviceReset = property(_PySpin._SWIG_CamPtr_DeviceReset_get, _PySpin._SWIG_CamPtr_DeviceReset_set, doc=r"""DeviceReset""")
    DeviceCharacterSet = property(_PySpin._SWIG_CamPtr_DeviceCharacterSet_get, _PySpin._SWIG_CamPtr_DeviceCharacterSet_set, doc=r"""DeviceCharacterSet""")
    DeviceLinkThroughputLimit = property(_PySpin._SWIG_CamPtr_DeviceLinkThroughputLimit_get, _PySpin._SWIG_CamPtr_DeviceLinkThroughputLimit_set, doc=r"""DeviceLinkThroughputLimit""")
    DeviceFirmwareVersion = property(_PySpin._SWIG_CamPtr_DeviceFirmwareVersion_get, _PySpin._SWIG_CamPtr_DeviceFirmwareVersion_set, doc=r"""DeviceFirmwareVersion""")
    DeviceStreamChannelCount = property(_PySpin._SWIG_CamPtr_DeviceStreamChannelCount_get, _PySpin._SWIG_CamPtr_DeviceStreamChannelCount_set, doc=r"""DeviceStreamChannelCount""")
    DeviceTLType = property(_PySpin._SWIG_CamPtr_DeviceTLType_get, _PySpin._SWIG_CamPtr_DeviceTLType_set, doc=r"""DeviceTLType""")
    DeviceVersion = property(_PySpin._SWIG_CamPtr_DeviceVersion_get, _PySpin._SWIG_CamPtr_DeviceVersion_set, doc=r"""DeviceVersion""")
    DevicePowerSupplySelector = property(_PySpin._SWIG_CamPtr_DevicePowerSupplySelector_get, _PySpin._SWIG_CamPtr_DevicePowerSupplySelector_set, doc=r"""DevicePowerSupplySelector""")
    SensorDescription = property(_PySpin._SWIG_CamPtr_SensorDescription_get, _PySpin._SWIG_CamPtr_SensorDescription_set, doc=r"""SensorDescription""")
    DeviceModelName = property(_PySpin._SWIG_CamPtr_DeviceModelName_get, _PySpin._SWIG_CamPtr_DeviceModelName_set, doc=r"""DeviceModelName""")
    DeviceTLVersionMajor = property(_PySpin._SWIG_CamPtr_DeviceTLVersionMajor_get, _PySpin._SWIG_CamPtr_DeviceTLVersionMajor_set, doc=r"""DeviceTLVersionMajor""")
    DeviceTemperatureSelector = property(_PySpin._SWIG_CamPtr_DeviceTemperatureSelector_get, _PySpin._SWIG_CamPtr_DeviceTemperatureSelector_set, doc=r"""DeviceTemperatureSelector""")
    EnumerationCount = property(_PySpin._SWIG_CamPtr_EnumerationCount_get, _PySpin._SWIG_CamPtr_EnumerationCount_set, doc=r"""EnumerationCount""")
    PowerSupplyCurrent = property(_PySpin._SWIG_CamPtr_PowerSupplyCurrent_get, _PySpin._SWIG_CamPtr_PowerSupplyCurrent_set, doc=r"""PowerSupplyCurrent""")
    DeviceID = property(_PySpin._SWIG_CamPtr_DeviceID_get, _PySpin._SWIG_CamPtr_DeviceID_set, doc=r"""DeviceID""")
    DeviceUptime = property(_PySpin._SWIG_CamPtr_DeviceUptime_get, _PySpin._SWIG_CamPtr_DeviceUptime_set, doc=r"""DeviceUptime""")
    DeviceLinkCurrentThroughput = property(_PySpin._SWIG_CamPtr_DeviceLinkCurrentThroughput_get, _PySpin._SWIG_CamPtr_DeviceLinkCurrentThroughput_set, doc=r"""DeviceLinkCurrentThroughput""")
    DeviceMaxThroughput = property(_PySpin._SWIG_CamPtr_DeviceMaxThroughput_get, _PySpin._SWIG_CamPtr_DeviceMaxThroughput_set, doc=r"""DeviceMaxThroughput""")
    FactoryReset = property(_PySpin._SWIG_CamPtr_FactoryReset_get, _PySpin._SWIG_CamPtr_FactoryReset_set, doc=r"""FactoryReset""")
    PowerSupplyVoltage = property(_PySpin._SWIG_CamPtr_PowerSupplyVoltage_get, _PySpin._SWIG_CamPtr_PowerSupplyVoltage_set, doc=r"""PowerSupplyVoltage""")
    DeviceIndicatorMode = property(_PySpin._SWIG_CamPtr_DeviceIndicatorMode_get, _PySpin._SWIG_CamPtr_DeviceIndicatorMode_set, doc=r"""DeviceIndicatorMode""")
    DeviceLinkBandwidthReserve = property(_PySpin._SWIG_CamPtr_DeviceLinkBandwidthReserve_get, _PySpin._SWIG_CamPtr_DeviceLinkBandwidthReserve_set, doc=r"""DeviceLinkBandwidthReserve""")
    AasRoiOffsetY = property(_PySpin._SWIG_CamPtr_AasRoiOffsetY_get, _PySpin._SWIG_CamPtr_AasRoiOffsetY_set, doc=r"""AasRoiOffsetY""")
    AasRoiOffsetX = property(_PySpin._SWIG_CamPtr_AasRoiOffsetX_get, _PySpin._SWIG_CamPtr_AasRoiOffsetX_set, doc=r"""AasRoiOffsetX""")
    AutoExposureControlPriority = property(_PySpin._SWIG_CamPtr_AutoExposureControlPriority_get, _PySpin._SWIG_CamPtr_AutoExposureControlPriority_set, doc=r"""AutoExposureControlPriority""")
    BalanceWhiteAutoLowerLimit = property(_PySpin._SWIG_CamPtr_BalanceWhiteAutoLowerLimit_get, _PySpin._SWIG_CamPtr_BalanceWhiteAutoLowerLimit_set, doc=r"""BalanceWhiteAutoLowerLimit""")
    BalanceWhiteAutoDamping = property(_PySpin._SWIG_CamPtr_BalanceWhiteAutoDamping_get, _PySpin._SWIG_CamPtr_BalanceWhiteAutoDamping_set, doc=r"""BalanceWhiteAutoDamping""")
    AasRoiHeight = property(_PySpin._SWIG_CamPtr_AasRoiHeight_get, _PySpin._SWIG_CamPtr_AasRoiHeight_set, doc=r"""AasRoiHeight""")
    AutoExposureGreyValueUpperLimit = property(_PySpin._SWIG_CamPtr_AutoExposureGreyValueUpperLimit_get, _PySpin._SWIG_CamPtr_AutoExposureGreyValueUpperLimit_set, doc=r"""AutoExposureGreyValueUpperLimit""")
    AutoExposureTargetGreyValue = property(_PySpin._SWIG_CamPtr_AutoExposureTargetGreyValue_get, _PySpin._SWIG_CamPtr_AutoExposureTargetGreyValue_set, doc=r"""AutoExposureTargetGreyValue""")
    AutoExposureGainLowerLimit = property(_PySpin._SWIG_CamPtr_AutoExposureGainLowerLimit_get, _PySpin._SWIG_CamPtr_AutoExposureGainLowerLimit_set, doc=r"""AutoExposureGainLowerLimit""")
    AutoExposureGreyValueLowerLimit = property(_PySpin._SWIG_CamPtr_AutoExposureGreyValueLowerLimit_get, _PySpin._SWIG_CamPtr_AutoExposureGreyValueLowerLimit_set, doc=r"""AutoExposureGreyValueLowerLimit""")
    AutoExposureMeteringMode = property(_PySpin._SWIG_CamPtr_AutoExposureMeteringMode_get, _PySpin._SWIG_CamPtr_AutoExposureMeteringMode_set, doc=r"""AutoExposureMeteringMode""")
    AutoExposureExposureTimeUpperLimit = property(_PySpin._SWIG_CamPtr_AutoExposureExposureTimeUpperLimit_get, _PySpin._SWIG_CamPtr_AutoExposureExposureTimeUpperLimit_set, doc=r"""AutoExposureExposureTimeUpperLimit""")
    AutoExposureGainUpperLimit = property(_PySpin._SWIG_CamPtr_AutoExposureGainUpperLimit_get, _PySpin._SWIG_CamPtr_AutoExposureGainUpperLimit_set, doc=r"""AutoExposureGainUpperLimit""")
    AutoExposureControlLoopDamping = property(_PySpin._SWIG_CamPtr_AutoExposureControlLoopDamping_get, _PySpin._SWIG_CamPtr_AutoExposureControlLoopDamping_set, doc=r"""AutoExposureControlLoopDamping""")
    AutoExposureEVCompensation = property(_PySpin._SWIG_CamPtr_AutoExposureEVCompensation_get, _PySpin._SWIG_CamPtr_AutoExposureEVCompensation_set, doc=r"""AutoExposureEVCompensation""")
    AutoExposureExposureTimeLowerLimit = property(_PySpin._SWIG_CamPtr_AutoExposureExposureTimeLowerLimit_get, _PySpin._SWIG_CamPtr_AutoExposureExposureTimeLowerLimit_set, doc=r"""AutoExposureExposureTimeLowerLimit""")
    BalanceWhiteAutoProfile = property(_PySpin._SWIG_CamPtr_BalanceWhiteAutoProfile_get, _PySpin._SWIG_CamPtr_BalanceWhiteAutoProfile_set, doc=r"""BalanceWhiteAutoProfile""")
    AutoAlgorithmSelector = property(_PySpin._SWIG_CamPtr_AutoAlgorithmSelector_get, _PySpin._SWIG_CamPtr_AutoAlgorithmSelector_set, doc=r"""AutoAlgorithmSelector""")
    AutoExposureTargetGreyValueAuto = property(_PySpin._SWIG_CamPtr_AutoExposureTargetGreyValueAuto_get, _PySpin._SWIG_CamPtr_AutoExposureTargetGreyValueAuto_set, doc=r"""AutoExposureTargetGreyValueAuto""")
    AasRoiEnable = property(_PySpin._SWIG_CamPtr_AasRoiEnable_get, _PySpin._SWIG_CamPtr_AasRoiEnable_set, doc=r"""AasRoiEnable""")
    AutoExposureLightingMode = property(_PySpin._SWIG_CamPtr_AutoExposureLightingMode_get, _PySpin._SWIG_CamPtr_AutoExposureLightingMode_set, doc=r"""AutoExposureLightingMode""")
    AasRoiWidth = property(_PySpin._SWIG_CamPtr_AasRoiWidth_get, _PySpin._SWIG_CamPtr_AasRoiWidth_set, doc=r"""AasRoiWidth""")
    BalanceWhiteAutoUpperLimit = property(_PySpin._SWIG_CamPtr_BalanceWhiteAutoUpperLimit_get, _PySpin._SWIG_CamPtr_BalanceWhiteAutoUpperLimit_set, doc=r"""BalanceWhiteAutoUpperLimit""")
    LinkErrorCount = property(_PySpin._SWIG_CamPtr_LinkErrorCount_get, _PySpin._SWIG_CamPtr_LinkErrorCount_set, doc=r"""LinkErrorCount""")
    GevCurrentIPConfigurationDHCP = property(_PySpin._SWIG_CamPtr_GevCurrentIPConfigurationDHCP_get, _PySpin._SWIG_CamPtr_GevCurrentIPConfigurationDHCP_set, doc=r"""GevCurrentIPConfigurationDHCP""")
    GevInterfaceSelector = property(_PySpin._SWIG_CamPtr_GevInterfaceSelector_get, _PySpin._SWIG_CamPtr_GevInterfaceSelector_set, doc=r"""GevInterfaceSelector""")
    GevSCPD = property(_PySpin._SWIG_CamPtr_GevSCPD_get, _PySpin._SWIG_CamPtr_GevSCPD_set, doc=r"""GevSCPD""")
    GevTimestampTickFrequency = property(_PySpin._SWIG_CamPtr_GevTimestampTickFrequency_get, _PySpin._SWIG_CamPtr_GevTimestampTickFrequency_set, doc=r"""GevTimestampTickFrequency""")
    GevSCPSPacketSize = property(_PySpin._SWIG_CamPtr_GevSCPSPacketSize_get, _PySpin._SWIG_CamPtr_GevSCPSPacketSize_set, doc=r"""GevSCPSPacketSize""")
    GevCurrentDefaultGateway = property(_PySpin._SWIG_CamPtr_GevCurrentDefaultGateway_get, _PySpin._SWIG_CamPtr_GevCurrentDefaultGateway_set, doc=r"""GevCurrentDefaultGateway""")
    GevSCCFGUnconditionalStreaming = property(_PySpin._SWIG_CamPtr_GevSCCFGUnconditionalStreaming_get, _PySpin._SWIG_CamPtr_GevSCCFGUnconditionalStreaming_set, doc=r"""GevSCCFGUnconditionalStreaming""")
    GevMCTT = property(_PySpin._SWIG_CamPtr_GevMCTT_get, _PySpin._SWIG_CamPtr_GevMCTT_set, doc=r"""GevMCTT""")
    GevSCPSDoNotFragment = property(_PySpin._SWIG_CamPtr_GevSCPSDoNotFragment_get, _PySpin._SWIG_CamPtr_GevSCPSDoNotFragment_set, doc=r"""GevSCPSDoNotFragment""")
    GevCurrentSubnetMask = property(_PySpin._SWIG_CamPtr_GevCurrentSubnetMask_get, _PySpin._SWIG_CamPtr_GevCurrentSubnetMask_set, doc=r"""GevCurrentSubnetMask""")
    GevStreamChannelSelector = property(_PySpin._SWIG_CamPtr_GevStreamChannelSelector_get, _PySpin._SWIG_CamPtr_GevStreamChannelSelector_set, doc=r"""GevStreamChannelSelector""")
    GevCurrentIPAddress = property(_PySpin._SWIG_CamPtr_GevCurrentIPAddress_get, _PySpin._SWIG_CamPtr_GevCurrentIPAddress_set, doc=r"""GevCurrentIPAddress""")
    GevMCSP = property(_PySpin._SWIG_CamPtr_GevMCSP_get, _PySpin._SWIG_CamPtr_GevMCSP_set, doc=r"""GevMCSP""")
    GevGVCPPendingTimeout = property(_PySpin._SWIG_CamPtr_GevGVCPPendingTimeout_get, _PySpin._SWIG_CamPtr_GevGVCPPendingTimeout_set, doc=r"""GevGVCPPendingTimeout""")
    GevIEEE1588Status = property(_PySpin._SWIG_CamPtr_GevIEEE1588Status_get, _PySpin._SWIG_CamPtr_GevIEEE1588Status_set, doc=r"""GevIEEE1588Status""")
    GevFirstURL = property(_PySpin._SWIG_CamPtr_GevFirstURL_get, _PySpin._SWIG_CamPtr_GevFirstURL_set, doc=r"""GevFirstURL""")
    GevMACAddress = property(_PySpin._SWIG_CamPtr_GevMACAddress_get, _PySpin._SWIG_CamPtr_GevMACAddress_set, doc=r"""GevMACAddress""")
    GevPersistentSubnetMask = property(_PySpin._SWIG_CamPtr_GevPersistentSubnetMask_get, _PySpin._SWIG_CamPtr_GevPersistentSubnetMask_set, doc=r"""GevPersistentSubnetMask""")
    GevMCPHostPort = property(_PySpin._SWIG_CamPtr_GevMCPHostPort_get, _PySpin._SWIG_CamPtr_GevMCPHostPort_set, doc=r"""GevMCPHostPort""")
    GevSCPHostPort = property(_PySpin._SWIG_CamPtr_GevSCPHostPort_get, _PySpin._SWIG_CamPtr_GevSCPHostPort_set, doc=r"""GevSCPHostPort""")
    GevGVCPPendingAck = property(_PySpin._SWIG_CamPtr_GevGVCPPendingAck_get, _PySpin._SWIG_CamPtr_GevGVCPPendingAck_set, doc=r"""GevGVCPPendingAck""")
    GevSCPInterfaceIndex = property(_PySpin._SWIG_CamPtr_GevSCPInterfaceIndex_get, _PySpin._SWIG_CamPtr_GevSCPInterfaceIndex_set, doc=r"""GevSCPInterfaceIndex""")
    GevSupportedOption = property(_PySpin._SWIG_CamPtr_GevSupportedOption_get, _PySpin._SWIG_CamPtr_GevSupportedOption_set, doc=r"""GevSupportedOption""")
    GevIEEE1588Mode = property(_PySpin._SWIG_CamPtr_GevIEEE1588Mode_get, _PySpin._SWIG_CamPtr_GevIEEE1588Mode_set, doc=r"""GevIEEE1588Mode""")
    GevCurrentIPConfigurationLLA = property(_PySpin._SWIG_CamPtr_GevCurrentIPConfigurationLLA_get, _PySpin._SWIG_CamPtr_GevCurrentIPConfigurationLLA_set, doc=r"""GevCurrentIPConfigurationLLA""")
    GevSCSP = property(_PySpin._SWIG_CamPtr_GevSCSP_get, _PySpin._SWIG_CamPtr_GevSCSP_set, doc=r"""GevSCSP""")
    GevIEEE1588 = property(_PySpin._SWIG_CamPtr_GevIEEE1588_get, _PySpin._SWIG_CamPtr_GevIEEE1588_set, doc=r"""GevIEEE1588""")
    GevSCCFGExtendedChunkData = property(_PySpin._SWIG_CamPtr_GevSCCFGExtendedChunkData_get, _PySpin._SWIG_CamPtr_GevSCCFGExtendedChunkData_set, doc=r"""GevSCCFGExtendedChunkData""")
    GevPersistentIPAddress = property(_PySpin._SWIG_CamPtr_GevPersistentIPAddress_get, _PySpin._SWIG_CamPtr_GevPersistentIPAddress_set, doc=r"""GevPersistentIPAddress""")
    GevCurrentIPConfigurationPersistentIP = property(_PySpin._SWIG_CamPtr_GevCurrentIPConfigurationPersistentIP_get, _PySpin._SWIG_CamPtr_GevCurrentIPConfigurationPersistentIP_set, doc=r"""GevCurrentIPConfigurationPersistentIP""")
    GevIEEE1588ClockAccuracy = property(_PySpin._SWIG_CamPtr_GevIEEE1588ClockAccuracy_get, _PySpin._SWIG_CamPtr_GevIEEE1588ClockAccuracy_set, doc=r"""GevIEEE1588ClockAccuracy""")
    GevHeartbeatTimeout = property(_PySpin._SWIG_CamPtr_GevHeartbeatTimeout_get, _PySpin._SWIG_CamPtr_GevHeartbeatTimeout_set, doc=r"""GevHeartbeatTimeout""")
    GevPersistentDefaultGateway = property(_PySpin._SWIG_CamPtr_GevPersistentDefaultGateway_get, _PySpin._SWIG_CamPtr_GevPersistentDefaultGateway_set, doc=r"""GevPersistentDefaultGateway""")
    GevCCP = property(_PySpin._SWIG_CamPtr_GevCCP_get, _PySpin._SWIG_CamPtr_GevCCP_set, doc=r"""GevCCP""")
    GevMCDA = property(_PySpin._SWIG_CamPtr_GevMCDA_get, _PySpin._SWIG_CamPtr_GevMCDA_set, doc=r"""GevMCDA""")
    GevSCDA = property(_PySpin._SWIG_CamPtr_GevSCDA_get, _PySpin._SWIG_CamPtr_GevSCDA_set, doc=r"""GevSCDA""")
    GevSCPDirection = property(_PySpin._SWIG_CamPtr_GevSCPDirection_get, _PySpin._SWIG_CamPtr_GevSCPDirection_set, doc=r"""GevSCPDirection""")
    GevSCPSFireTestPacket = property(_PySpin._SWIG_CamPtr_GevSCPSFireTestPacket_get, _PySpin._SWIG_CamPtr_GevSCPSFireTestPacket_set, doc=r"""GevSCPSFireTestPacket""")
    GevSecondURL = property(_PySpin._SWIG_CamPtr_GevSecondURL_get, _PySpin._SWIG_CamPtr_GevSecondURL_set, doc=r"""GevSecondURL""")
    GevSupportedOptionSelector = property(_PySpin._SWIG_CamPtr_GevSupportedOptionSelector_get, _PySpin._SWIG_CamPtr_GevSupportedOptionSelector_set, doc=r"""GevSupportedOptionSelector""")
    GevGVCPHeartbeatDisable = property(_PySpin._SWIG_CamPtr_GevGVCPHeartbeatDisable_get, _PySpin._SWIG_CamPtr_GevGVCPHeartbeatDisable_set, doc=r"""GevGVCPHeartbeatDisable""")
    GevMCRC = property(_PySpin._SWIG_CamPtr_GevMCRC_get, _PySpin._SWIG_CamPtr_GevMCRC_set, doc=r"""GevMCRC""")
    GevSCPSBigEndian = property(_PySpin._SWIG_CamPtr_GevSCPSBigEndian_get, _PySpin._SWIG_CamPtr_GevSCPSBigEndian_set, doc=r"""GevSCPSBigEndian""")
    GevNumberOfInterfaces = property(_PySpin._SWIG_CamPtr_GevNumberOfInterfaces_get, _PySpin._SWIG_CamPtr_GevNumberOfInterfaces_set, doc=r"""GevNumberOfInterfaces""")
    TLParamsLocked = property(_PySpin._SWIG_CamPtr_TLParamsLocked_get, _PySpin._SWIG_CamPtr_TLParamsLocked_set, doc=r"""TLParamsLocked""")
    PayloadSize = property(_PySpin._SWIG_CamPtr_PayloadSize_get, _PySpin._SWIG_CamPtr_PayloadSize_set, doc=r"""PayloadSize""")
    PacketResendRequestCount = property(_PySpin._SWIG_CamPtr_PacketResendRequestCount_get, _PySpin._SWIG_CamPtr_PacketResendRequestCount_set, doc=r"""PacketResendRequestCount""")
    SharpeningEnable = property(_PySpin._SWIG_CamPtr_SharpeningEnable_get, _PySpin._SWIG_CamPtr_SharpeningEnable_set, doc=r"""SharpeningEnable""")
    BlackLevelSelector = property(_PySpin._SWIG_CamPtr_BlackLevelSelector_get, _PySpin._SWIG_CamPtr_BlackLevelSelector_set, doc=r"""BlackLevelSelector""")
    GammaEnable = property(_PySpin._SWIG_CamPtr_GammaEnable_get, _PySpin._SWIG_CamPtr_GammaEnable_set, doc=r"""GammaEnable""")
    SharpeningAuto = property(_PySpin._SWIG_CamPtr_SharpeningAuto_get, _PySpin._SWIG_CamPtr_SharpeningAuto_set, doc=r"""SharpeningAuto""")
    BlackLevelClampingEnable = property(_PySpin._SWIG_CamPtr_BlackLevelClampingEnable_get, _PySpin._SWIG_CamPtr_BlackLevelClampingEnable_set, doc=r"""BlackLevelClampingEnable""")
    BalanceRatio = property(_PySpin._SWIG_CamPtr_BalanceRatio_get, _PySpin._SWIG_CamPtr_BalanceRatio_set, doc=r"""BalanceRatio""")
    BalanceWhiteAuto = property(_PySpin._SWIG_CamPtr_BalanceWhiteAuto_get, _PySpin._SWIG_CamPtr_BalanceWhiteAuto_set, doc=r"""BalanceWhiteAuto""")
    SharpeningThreshold = property(_PySpin._SWIG_CamPtr_SharpeningThreshold_get, _PySpin._SWIG_CamPtr_SharpeningThreshold_set, doc=r"""SharpeningThreshold""")
    GainAuto = property(_PySpin._SWIG_CamPtr_GainAuto_get, _PySpin._SWIG_CamPtr_GainAuto_set, doc=r"""GainAuto""")
    Sharpening = property(_PySpin._SWIG_CamPtr_Sharpening_get, _PySpin._SWIG_CamPtr_Sharpening_set, doc=r"""Sharpening""")
    Gain = property(_PySpin._SWIG_CamPtr_Gain_get, _PySpin._SWIG_CamPtr_Gain_set, doc=r"""Gain""")
    BalanceRatioSelector = property(_PySpin._SWIG_CamPtr_BalanceRatioSelector_get, _PySpin._SWIG_CamPtr_BalanceRatioSelector_set, doc=r"""BalanceRatioSelector""")
    GainSelector = property(_PySpin._SWIG_CamPtr_GainSelector_get, _PySpin._SWIG_CamPtr_GainSelector_set, doc=r"""GainSelector""")
    BlackLevel = property(_PySpin._SWIG_CamPtr_BlackLevel_get, _PySpin._SWIG_CamPtr_BlackLevel_set, doc=r"""BlackLevel""")
    BlackLevelRaw = property(_PySpin._SWIG_CamPtr_BlackLevelRaw_get, _PySpin._SWIG_CamPtr_BlackLevelRaw_set, doc=r"""BlackLevelRaw""")
    Gamma = property(_PySpin._SWIG_CamPtr_Gamma_get, _PySpin._SWIG_CamPtr_Gamma_set, doc=r"""Gamma""")
    DefectTableIndex = property(_PySpin._SWIG_CamPtr_DefectTableIndex_get, _PySpin._SWIG_CamPtr_DefectTableIndex_set, doc=r"""DefectTableIndex""")
    DefectTableFactoryRestore = property(_PySpin._SWIG_CamPtr_DefectTableFactoryRestore_get, _PySpin._SWIG_CamPtr_DefectTableFactoryRestore_set, doc=r"""DefectTableFactoryRestore""")
    DefectTableCoordinateY = property(_PySpin._SWIG_CamPtr_DefectTableCoordinateY_get, _PySpin._SWIG_CamPtr_DefectTableCoordinateY_set, doc=r"""DefectTableCoordinateY""")
    DefectTableSave = property(_PySpin._SWIG_CamPtr_DefectTableSave_get, _PySpin._SWIG_CamPtr_DefectTableSave_set, doc=r"""DefectTableSave""")
    DefectCorrectionMode = property(_PySpin._SWIG_CamPtr_DefectCorrectionMode_get, _PySpin._SWIG_CamPtr_DefectCorrectionMode_set, doc=r"""DefectCorrectionMode""")
    DefectTableCoordinateX = property(_PySpin._SWIG_CamPtr_DefectTableCoordinateX_get, _PySpin._SWIG_CamPtr_DefectTableCoordinateX_set, doc=r"""DefectTableCoordinateX""")
    DefectTablePixelCount = property(_PySpin._SWIG_CamPtr_DefectTablePixelCount_get, _PySpin._SWIG_CamPtr_DefectTablePixelCount_set, doc=r"""DefectTablePixelCount""")
    DefectCorrectStaticEnable = property(_PySpin._SWIG_CamPtr_DefectCorrectStaticEnable_get, _PySpin._SWIG_CamPtr_DefectCorrectStaticEnable_set, doc=r"""DefectCorrectStaticEnable""")
    DefectTableApply = property(_PySpin._SWIG_CamPtr_DefectTableApply_get, _PySpin._SWIG_CamPtr_DefectTableApply_set, doc=r"""DefectTableApply""")
    UserSetFeatureEnable = property(_PySpin._SWIG_CamPtr_UserSetFeatureEnable_get, _PySpin._SWIG_CamPtr_UserSetFeatureEnable_set, doc=r"""UserSetFeatureEnable""")
    UserSetSave = property(_PySpin._SWIG_CamPtr_UserSetSave_get, _PySpin._SWIG_CamPtr_UserSetSave_set, doc=r"""UserSetSave""")
    UserSetSelector = property(_PySpin._SWIG_CamPtr_UserSetSelector_get, _PySpin._SWIG_CamPtr_UserSetSelector_set, doc=r"""UserSetSelector""")
    UserSetLoad = property(_PySpin._SWIG_CamPtr_UserSetLoad_get, _PySpin._SWIG_CamPtr_UserSetLoad_set, doc=r"""UserSetLoad""")
    UserSetDefault = property(_PySpin._SWIG_CamPtr_UserSetDefault_get, _PySpin._SWIG_CamPtr_UserSetDefault_set, doc=r"""UserSetDefault""")
    SerialPortBaudRate = property(_PySpin._SWIG_CamPtr_SerialPortBaudRate_get, _PySpin._SWIG_CamPtr_SerialPortBaudRate_set, doc=r"""SerialPortBaudRate""")
    SerialPortDataBits = property(_PySpin._SWIG_CamPtr_SerialPortDataBits_get, _PySpin._SWIG_CamPtr_SerialPortDataBits_set, doc=r"""SerialPortDataBits""")
    SerialPortParity = property(_PySpin._SWIG_CamPtr_SerialPortParity_get, _PySpin._SWIG_CamPtr_SerialPortParity_set, doc=r"""SerialPortParity""")
    SerialTransmitQueueMaxCharacterCount = property(_PySpin._SWIG_CamPtr_SerialTransmitQueueMaxCharacterCount_get, _PySpin._SWIG_CamPtr_SerialTransmitQueueMaxCharacterCount_set, doc=r"""SerialTransmitQueueMaxCharacterCount""")
    SerialReceiveQueueCurrentCharacterCount = property(_PySpin._SWIG_CamPtr_SerialReceiveQueueCurrentCharacterCount_get, _PySpin._SWIG_CamPtr_SerialReceiveQueueCurrentCharacterCount_set, doc=r"""SerialReceiveQueueCurrentCharacterCount""")
    SerialPortSelector = property(_PySpin._SWIG_CamPtr_SerialPortSelector_get, _PySpin._SWIG_CamPtr_SerialPortSelector_set, doc=r"""SerialPortSelector""")
    SerialPortStopBits = property(_PySpin._SWIG_CamPtr_SerialPortStopBits_get, _PySpin._SWIG_CamPtr_SerialPortStopBits_set, doc=r"""SerialPortStopBits""")
    SerialReceiveQueueClear = property(_PySpin._SWIG_CamPtr_SerialReceiveQueueClear_get, _PySpin._SWIG_CamPtr_SerialReceiveQueueClear_set, doc=r"""SerialReceiveQueueClear""")
    SerialReceiveFramingErrorCount = property(_PySpin._SWIG_CamPtr_SerialReceiveFramingErrorCount_get, _PySpin._SWIG_CamPtr_SerialReceiveFramingErrorCount_set, doc=r"""SerialReceiveFramingErrorCount""")
    SerialTransmitQueueCurrentCharacterCount = property(_PySpin._SWIG_CamPtr_SerialTransmitQueueCurrentCharacterCount_get, _PySpin._SWIG_CamPtr_SerialTransmitQueueCurrentCharacterCount_set, doc=r"""SerialTransmitQueueCurrentCharacterCount""")
    SerialReceiveParityErrorCount = property(_PySpin._SWIG_CamPtr_SerialReceiveParityErrorCount_get, _PySpin._SWIG_CamPtr_SerialReceiveParityErrorCount_set, doc=r"""SerialReceiveParityErrorCount""")
    SerialPortSource = property(_PySpin._SWIG_CamPtr_SerialPortSource_get, _PySpin._SWIG_CamPtr_SerialPortSource_set, doc=r"""SerialPortSource""")
    SerialReceiveQueueMaxCharacterCount = property(_PySpin._SWIG_CamPtr_SerialReceiveQueueMaxCharacterCount_get, _PySpin._SWIG_CamPtr_SerialReceiveQueueMaxCharacterCount_set, doc=r"""SerialReceiveQueueMaxCharacterCount""")
    SequencerSetStart = property(_PySpin._SWIG_CamPtr_SequencerSetStart_get, _PySpin._SWIG_CamPtr_SequencerSetStart_set, doc=r"""SequencerSetStart""")
    SequencerMode = property(_PySpin._SWIG_CamPtr_SequencerMode_get, _PySpin._SWIG_CamPtr_SequencerMode_set, doc=r"""SequencerMode""")
    SequencerConfigurationValid = property(_PySpin._SWIG_CamPtr_SequencerConfigurationValid_get, _PySpin._SWIG_CamPtr_SequencerConfigurationValid_set, doc=r"""SequencerConfigurationValid""")
    SequencerSetValid = property(_PySpin._SWIG_CamPtr_SequencerSetValid_get, _PySpin._SWIG_CamPtr_SequencerSetValid_set, doc=r"""SequencerSetValid""")
    SequencerSetSelector = property(_PySpin._SWIG_CamPtr_SequencerSetSelector_get, _PySpin._SWIG_CamPtr_SequencerSetSelector_set, doc=r"""SequencerSetSelector""")
    SequencerTriggerActivation = property(_PySpin._SWIG_CamPtr_SequencerTriggerActivation_get, _PySpin._SWIG_CamPtr_SequencerTriggerActivation_set, doc=r"""SequencerTriggerActivation""")
    SequencerConfigurationMode = property(_PySpin._SWIG_CamPtr_SequencerConfigurationMode_get, _PySpin._SWIG_CamPtr_SequencerConfigurationMode_set, doc=r"""SequencerConfigurationMode""")
    SequencerSetSave = property(_PySpin._SWIG_CamPtr_SequencerSetSave_get, _PySpin._SWIG_CamPtr_SequencerSetSave_set, doc=r"""SequencerSetSave""")
    SequencerTriggerSource = property(_PySpin._SWIG_CamPtr_SequencerTriggerSource_get, _PySpin._SWIG_CamPtr_SequencerTriggerSource_set, doc=r"""SequencerTriggerSource""")
    SequencerSetActive = property(_PySpin._SWIG_CamPtr_SequencerSetActive_get, _PySpin._SWIG_CamPtr_SequencerSetActive_set, doc=r"""SequencerSetActive""")
    SequencerSetNext = property(_PySpin._SWIG_CamPtr_SequencerSetNext_get, _PySpin._SWIG_CamPtr_SequencerSetNext_set, doc=r"""SequencerSetNext""")
    SequencerSetLoad = property(_PySpin._SWIG_CamPtr_SequencerSetLoad_get, _PySpin._SWIG_CamPtr_SequencerSetLoad_set, doc=r"""SequencerSetLoad""")
    SequencerPathSelector = property(_PySpin._SWIG_CamPtr_SequencerPathSelector_get, _PySpin._SWIG_CamPtr_SequencerPathSelector_set, doc=r"""SequencerPathSelector""")
    SequencerFeatureEnable = property(_PySpin._SWIG_CamPtr_SequencerFeatureEnable_get, _PySpin._SWIG_CamPtr_SequencerFeatureEnable_set, doc=r"""SequencerFeatureEnable""")
    TransferBlockCount = property(_PySpin._SWIG_CamPtr_TransferBlockCount_get, _PySpin._SWIG_CamPtr_TransferBlockCount_set, doc=r"""TransferBlockCount""")
    TransferStart = property(_PySpin._SWIG_CamPtr_TransferStart_get, _PySpin._SWIG_CamPtr_TransferStart_set, doc=r"""TransferStart""")
    TransferQueueMaxBlockCount = property(_PySpin._SWIG_CamPtr_TransferQueueMaxBlockCount_get, _PySpin._SWIG_CamPtr_TransferQueueMaxBlockCount_set, doc=r"""TransferQueueMaxBlockCount""")
    TransferQueueCurrentBlockCount = property(_PySpin._SWIG_CamPtr_TransferQueueCurrentBlockCount_get, _PySpin._SWIG_CamPtr_TransferQueueCurrentBlockCount_set, doc=r"""TransferQueueCurrentBlockCount""")
    TransferQueueMode = property(_PySpin._SWIG_CamPtr_TransferQueueMode_get, _PySpin._SWIG_CamPtr_TransferQueueMode_set, doc=r"""TransferQueueMode""")
    TransferOperationMode = property(_PySpin._SWIG_CamPtr_TransferOperationMode_get, _PySpin._SWIG_CamPtr_TransferOperationMode_set, doc=r"""TransferOperationMode""")
    TransferStop = property(_PySpin._SWIG_CamPtr_TransferStop_get, _PySpin._SWIG_CamPtr_TransferStop_set, doc=r"""TransferStop""")
    TransferQueueOverflowCount = property(_PySpin._SWIG_CamPtr_TransferQueueOverflowCount_get, _PySpin._SWIG_CamPtr_TransferQueueOverflowCount_set, doc=r"""TransferQueueOverflowCount""")
    TransferControlMode = property(_PySpin._SWIG_CamPtr_TransferControlMode_get, _PySpin._SWIG_CamPtr_TransferControlMode_set, doc=r"""TransferControlMode""")
    ChunkBlackLevel = property(_PySpin._SWIG_CamPtr_ChunkBlackLevel_get, _PySpin._SWIG_CamPtr_ChunkBlackLevel_set, doc=r"""ChunkBlackLevel""")
    ChunkFrameID = property(_PySpin._SWIG_CamPtr_ChunkFrameID_get, _PySpin._SWIG_CamPtr_ChunkFrameID_set, doc=r"""ChunkFrameID""")
    ChunkSerialData = property(_PySpin._SWIG_CamPtr_ChunkSerialData_get, _PySpin._SWIG_CamPtr_ChunkSerialData_set, doc=r"""ChunkSerialData""")
    ChunkExposureTime = property(_PySpin._SWIG_CamPtr_ChunkExposureTime_get, _PySpin._SWIG_CamPtr_ChunkExposureTime_set, doc=r"""ChunkExposureTime""")
    ChunkCompressionMode = property(_PySpin._SWIG_CamPtr_ChunkCompressionMode_get, _PySpin._SWIG_CamPtr_ChunkCompressionMode_set, doc=r"""ChunkCompressionMode""")
    ChunkCompressionRatio = property(_PySpin._SWIG_CamPtr_ChunkCompressionRatio_get, _PySpin._SWIG_CamPtr_ChunkCompressionRatio_set, doc=r"""ChunkCompressionRatio""")
    ChunkSerialReceiveOverflow = property(_PySpin._SWIG_CamPtr_ChunkSerialReceiveOverflow_get, _PySpin._SWIG_CamPtr_ChunkSerialReceiveOverflow_set, doc=r"""ChunkSerialReceiveOverflow""")
    ChunkTimestamp = property(_PySpin._SWIG_CamPtr_ChunkTimestamp_get, _PySpin._SWIG_CamPtr_ChunkTimestamp_set, doc=r"""ChunkTimestamp""")
    ChunkModeActive = property(_PySpin._SWIG_CamPtr_ChunkModeActive_get, _PySpin._SWIG_CamPtr_ChunkModeActive_set, doc=r"""ChunkModeActive""")
    ChunkExposureEndLineStatusAll = property(_PySpin._SWIG_CamPtr_ChunkExposureEndLineStatusAll_get, _PySpin._SWIG_CamPtr_ChunkExposureEndLineStatusAll_set, doc=r"""ChunkExposureEndLineStatusAll""")
    ChunkGainSelector = property(_PySpin._SWIG_CamPtr_ChunkGainSelector_get, _PySpin._SWIG_CamPtr_ChunkGainSelector_set, doc=r"""ChunkGainSelector""")
    ChunkSelector = property(_PySpin._SWIG_CamPtr_ChunkSelector_get, _PySpin._SWIG_CamPtr_ChunkSelector_set, doc=r"""ChunkSelector""")
    ChunkBlackLevelSelector = property(_PySpin._SWIG_CamPtr_ChunkBlackLevelSelector_get, _PySpin._SWIG_CamPtr_ChunkBlackLevelSelector_set, doc=r"""ChunkBlackLevelSelector""")
    ChunkWidth = property(_PySpin._SWIG_CamPtr_ChunkWidth_get, _PySpin._SWIG_CamPtr_ChunkWidth_set, doc=r"""ChunkWidth""")
    ChunkImage = property(_PySpin._SWIG_CamPtr_ChunkImage_get, _PySpin._SWIG_CamPtr_ChunkImage_set, doc=r"""ChunkImage""")
    ChunkHeight = property(_PySpin._SWIG_CamPtr_ChunkHeight_get, _PySpin._SWIG_CamPtr_ChunkHeight_set, doc=r"""ChunkHeight""")
    ChunkPixelFormat = property(_PySpin._SWIG_CamPtr_ChunkPixelFormat_get, _PySpin._SWIG_CamPtr_ChunkPixelFormat_set, doc=r"""ChunkPixelFormat""")
    ChunkGain = property(_PySpin._SWIG_CamPtr_ChunkGain_get, _PySpin._SWIG_CamPtr_ChunkGain_set, doc=r"""ChunkGain""")
    ChunkSequencerSetActive = property(_PySpin._SWIG_CamPtr_ChunkSequencerSetActive_get, _PySpin._SWIG_CamPtr_ChunkSequencerSetActive_set, doc=r"""ChunkSequencerSetActive""")
    ChunkCRC = property(_PySpin._SWIG_CamPtr_ChunkCRC_get, _PySpin._SWIG_CamPtr_ChunkCRC_set, doc=r"""ChunkCRC""")
    ChunkOffsetX = property(_PySpin._SWIG_CamPtr_ChunkOffsetX_get, _PySpin._SWIG_CamPtr_ChunkOffsetX_set, doc=r"""ChunkOffsetX""")
    ChunkOffsetY = property(_PySpin._SWIG_CamPtr_ChunkOffsetY_get, _PySpin._SWIG_CamPtr_ChunkOffsetY_set, doc=r"""ChunkOffsetY""")
    ChunkEnable = property(_PySpin._SWIG_CamPtr_ChunkEnable_get, _PySpin._SWIG_CamPtr_ChunkEnable_set, doc=r"""ChunkEnable""")
    ChunkSerialDataLength = property(_PySpin._SWIG_CamPtr_ChunkSerialDataLength_get, _PySpin._SWIG_CamPtr_ChunkSerialDataLength_set, doc=r"""ChunkSerialDataLength""")
    FileAccessOffset = property(_PySpin._SWIG_CamPtr_FileAccessOffset_get, _PySpin._SWIG_CamPtr_FileAccessOffset_set, doc=r"""FileAccessOffset""")
    FileAccessLength = property(_PySpin._SWIG_CamPtr_FileAccessLength_get, _PySpin._SWIG_CamPtr_FileAccessLength_set, doc=r"""FileAccessLength""")
    FileOperationStatus = property(_PySpin._SWIG_CamPtr_FileOperationStatus_get, _PySpin._SWIG_CamPtr_FileOperationStatus_set, doc=r"""FileOperationStatus""")
    FileOperationExecute = property(_PySpin._SWIG_CamPtr_FileOperationExecute_get, _PySpin._SWIG_CamPtr_FileOperationExecute_set, doc=r"""FileOperationExecute""")
    FileOpenMode = property(_PySpin._SWIG_CamPtr_FileOpenMode_get, _PySpin._SWIG_CamPtr_FileOpenMode_set, doc=r"""FileOpenMode""")
    FileOperationResult = property(_PySpin._SWIG_CamPtr_FileOperationResult_get, _PySpin._SWIG_CamPtr_FileOperationResult_set, doc=r"""FileOperationResult""")
    FileOperationSelector = property(_PySpin._SWIG_CamPtr_FileOperationSelector_get, _PySpin._SWIG_CamPtr_FileOperationSelector_set, doc=r"""FileOperationSelector""")
    FileSelector = property(_PySpin._SWIG_CamPtr_FileSelector_get, _PySpin._SWIG_CamPtr_FileSelector_set, doc=r"""FileSelector""")
    FileSize = property(_PySpin._SWIG_CamPtr_FileSize_get, _PySpin._SWIG_CamPtr_FileSize_set, doc=r"""FileSize""")
    BinningSelector = property(_PySpin._SWIG_CamPtr_BinningSelector_get, _PySpin._SWIG_CamPtr_BinningSelector_set, doc=r"""BinningSelector""")
    PixelDynamicRangeMin = property(_PySpin._SWIG_CamPtr_PixelDynamicRangeMin_get, _PySpin._SWIG_CamPtr_PixelDynamicRangeMin_set, doc=r"""PixelDynamicRangeMin""")
    PixelDynamicRangeMax = property(_PySpin._SWIG_CamPtr_PixelDynamicRangeMax_get, _PySpin._SWIG_CamPtr_PixelDynamicRangeMax_set, doc=r"""PixelDynamicRangeMax""")
    OffsetY = property(_PySpin._SWIG_CamPtr_OffsetY_get, _PySpin._SWIG_CamPtr_OffsetY_set, doc=r"""OffsetY""")
    BinningHorizontal = property(_PySpin._SWIG_CamPtr_BinningHorizontal_get, _PySpin._SWIG_CamPtr_BinningHorizontal_set, doc=r"""BinningHorizontal""")
    Width = property(_PySpin._SWIG_CamPtr_Width_get, _PySpin._SWIG_CamPtr_Width_set, doc=r"""Width""")
    TestPatternGeneratorSelector = property(_PySpin._SWIG_CamPtr_TestPatternGeneratorSelector_get, _PySpin._SWIG_CamPtr_TestPatternGeneratorSelector_set, doc=r"""TestPatternGeneratorSelector""")
    CompressionRatio = property(_PySpin._SWIG_CamPtr_CompressionRatio_get, _PySpin._SWIG_CamPtr_CompressionRatio_set, doc=r"""CompressionRatio""")
    CompressionSaturationPriority = property(_PySpin._SWIG_CamPtr_CompressionSaturationPriority_get, _PySpin._SWIG_CamPtr_CompressionSaturationPriority_set, doc=r"""CompressionSaturationPriority""")
    ReverseX = property(_PySpin._SWIG_CamPtr_ReverseX_get, _PySpin._SWIG_CamPtr_ReverseX_set, doc=r"""ReverseX""")
    ReverseY = property(_PySpin._SWIG_CamPtr_ReverseY_get, _PySpin._SWIG_CamPtr_ReverseY_set, doc=r"""ReverseY""")
    TestPattern = property(_PySpin._SWIG_CamPtr_TestPattern_get, _PySpin._SWIG_CamPtr_TestPattern_set, doc=r"""TestPattern""")
    PixelColorFilter = property(_PySpin._SWIG_CamPtr_PixelColorFilter_get, _PySpin._SWIG_CamPtr_PixelColorFilter_set, doc=r"""PixelColorFilter""")
    WidthMax = property(_PySpin._SWIG_CamPtr_WidthMax_get, _PySpin._SWIG_CamPtr_WidthMax_set, doc=r"""WidthMax""")
    AdcBitDepth = property(_PySpin._SWIG_CamPtr_AdcBitDepth_get, _PySpin._SWIG_CamPtr_AdcBitDepth_set, doc=r"""AdcBitDepth""")
    BinningVertical = property(_PySpin._SWIG_CamPtr_BinningVertical_get, _PySpin._SWIG_CamPtr_BinningVertical_set, doc=r"""BinningVertical""")
    DecimationHorizontalMode = property(_PySpin._SWIG_CamPtr_DecimationHorizontalMode_get, _PySpin._SWIG_CamPtr_DecimationHorizontalMode_set, doc=r"""DecimationHorizontalMode""")
    BinningVerticalMode = property(_PySpin._SWIG_CamPtr_BinningVerticalMode_get, _PySpin._SWIG_CamPtr_BinningVerticalMode_set, doc=r"""BinningVerticalMode""")
    OffsetX = property(_PySpin._SWIG_CamPtr_OffsetX_get, _PySpin._SWIG_CamPtr_OffsetX_set, doc=r"""OffsetX""")
    HeightMax = property(_PySpin._SWIG_CamPtr_HeightMax_get, _PySpin._SWIG_CamPtr_HeightMax_set, doc=r"""HeightMax""")
    DecimationHorizontal = property(_PySpin._SWIG_CamPtr_DecimationHorizontal_get, _PySpin._SWIG_CamPtr_DecimationHorizontal_set, doc=r"""DecimationHorizontal""")
    PixelSize = property(_PySpin._SWIG_CamPtr_PixelSize_get, _PySpin._SWIG_CamPtr_PixelSize_set, doc=r"""PixelSize""")
    SensorHeight = property(_PySpin._SWIG_CamPtr_SensorHeight_get, _PySpin._SWIG_CamPtr_SensorHeight_set, doc=r"""SensorHeight""")
    DecimationSelector = property(_PySpin._SWIG_CamPtr_DecimationSelector_get, _PySpin._SWIG_CamPtr_DecimationSelector_set, doc=r"""DecimationSelector""")
    IspEnable = property(_PySpin._SWIG_CamPtr_IspEnable_get, _PySpin._SWIG_CamPtr_IspEnable_set, doc=r"""IspEnable""")
    AdaptiveCompressionEnable = property(_PySpin._SWIG_CamPtr_AdaptiveCompressionEnable_get, _PySpin._SWIG_CamPtr_AdaptiveCompressionEnable_set, doc=r"""AdaptiveCompressionEnable""")
    ImageCompressionMode = property(_PySpin._SWIG_CamPtr_ImageCompressionMode_get, _PySpin._SWIG_CamPtr_ImageCompressionMode_set, doc=r"""ImageCompressionMode""")
    DecimationVertical = property(_PySpin._SWIG_CamPtr_DecimationVertical_get, _PySpin._SWIG_CamPtr_DecimationVertical_set, doc=r"""DecimationVertical""")
    Height = property(_PySpin._SWIG_CamPtr_Height_get, _PySpin._SWIG_CamPtr_Height_set, doc=r"""Height""")
    BinningHorizontalMode = property(_PySpin._SWIG_CamPtr_BinningHorizontalMode_get, _PySpin._SWIG_CamPtr_BinningHorizontalMode_set, doc=r"""BinningHorizontalMode""")
    PixelFormat = property(_PySpin._SWIG_CamPtr_PixelFormat_get, _PySpin._SWIG_CamPtr_PixelFormat_set, doc=r"""PixelFormat""")
    SensorWidth = property(_PySpin._SWIG_CamPtr_SensorWidth_get, _PySpin._SWIG_CamPtr_SensorWidth_set, doc=r"""SensorWidth""")
    DecimationVerticalMode = property(_PySpin._SWIG_CamPtr_DecimationVerticalMode_get, _PySpin._SWIG_CamPtr_DecimationVerticalMode_set, doc=r"""DecimationVerticalMode""")
    TestEventGenerate = property(_PySpin._SWIG_CamPtr_TestEventGenerate_get, _PySpin._SWIG_CamPtr_TestEventGenerate_set, doc=r"""TestEventGenerate""")
    TriggerEventTest = property(_PySpin._SWIG_CamPtr_TriggerEventTest_get, _PySpin._SWIG_CamPtr_TriggerEventTest_set, doc=r"""TriggerEventTest""")
    GuiXmlManifestAddress = property(_PySpin._SWIG_CamPtr_GuiXmlManifestAddress_get, _PySpin._SWIG_CamPtr_GuiXmlManifestAddress_set, doc=r"""GuiXmlManifestAddress""")
    Test0001 = property(_PySpin._SWIG_CamPtr_Test0001_get, _PySpin._SWIG_CamPtr_Test0001_set, doc=r"""Test0001""")
    V3_3Enable = property(_PySpin._SWIG_CamPtr_V3_3Enable_get, _PySpin._SWIG_CamPtr_V3_3Enable_set, doc=r"""V3_3Enable""")
    LineMode = property(_PySpin._SWIG_CamPtr_LineMode_get, _PySpin._SWIG_CamPtr_LineMode_set, doc=r"""LineMode""")
    LineSource = property(_PySpin._SWIG_CamPtr_LineSource_get, _PySpin._SWIG_CamPtr_LineSource_set, doc=r"""LineSource""")
    LineInputFilterSelector = property(_PySpin._SWIG_CamPtr_LineInputFilterSelector_get, _PySpin._SWIG_CamPtr_LineInputFilterSelector_set, doc=r"""LineInputFilterSelector""")
    UserOutputValue = property(_PySpin._SWIG_CamPtr_UserOutputValue_get, _PySpin._SWIG_CamPtr_UserOutputValue_set, doc=r"""UserOutputValue""")
    UserOutputValueAll = property(_PySpin._SWIG_CamPtr_UserOutputValueAll_get, _PySpin._SWIG_CamPtr_UserOutputValueAll_set, doc=r"""UserOutputValueAll""")
    UserOutputSelector = property(_PySpin._SWIG_CamPtr_UserOutputSelector_get, _PySpin._SWIG_CamPtr_UserOutputSelector_set, doc=r"""UserOutputSelector""")
    LineStatus = property(_PySpin._SWIG_CamPtr_LineStatus_get, _PySpin._SWIG_CamPtr_LineStatus_set, doc=r"""LineStatus""")
    LineFormat = property(_PySpin._SWIG_CamPtr_LineFormat_get, _PySpin._SWIG_CamPtr_LineFormat_set, doc=r"""LineFormat""")
    LineStatusAll = property(_PySpin._SWIG_CamPtr_LineStatusAll_get, _PySpin._SWIG_CamPtr_LineStatusAll_set, doc=r"""LineStatusAll""")
    LineSelector = property(_PySpin._SWIG_CamPtr_LineSelector_get, _PySpin._SWIG_CamPtr_LineSelector_set, doc=r"""LineSelector""")
    ExposureActiveMode = property(_PySpin._SWIG_CamPtr_ExposureActiveMode_get, _PySpin._SWIG_CamPtr_ExposureActiveMode_set, doc=r"""ExposureActiveMode""")
    LineInverter = property(_PySpin._SWIG_CamPtr_LineInverter_get, _PySpin._SWIG_CamPtr_LineInverter_set, doc=r"""LineInverter""")
    LineFilterWidth = property(_PySpin._SWIG_CamPtr_LineFilterWidth_get, _PySpin._SWIG_CamPtr_LineFilterWidth_set, doc=r"""LineFilterWidth""")
    CounterTriggerActivation = property(_PySpin._SWIG_CamPtr_CounterTriggerActivation_get, _PySpin._SWIG_CamPtr_CounterTriggerActivation_set, doc=r"""CounterTriggerActivation""")
    CounterValue = property(_PySpin._SWIG_CamPtr_CounterValue_get, _PySpin._SWIG_CamPtr_CounterValue_set, doc=r"""CounterValue""")
    CounterSelector = property(_PySpin._SWIG_CamPtr_CounterSelector_get, _PySpin._SWIG_CamPtr_CounterSelector_set, doc=r"""CounterSelector""")
    CounterValueAtReset = property(_PySpin._SWIG_CamPtr_CounterValueAtReset_get, _PySpin._SWIG_CamPtr_CounterValueAtReset_set, doc=r"""CounterValueAtReset""")
    CounterStatus = property(_PySpin._SWIG_CamPtr_CounterStatus_get, _PySpin._SWIG_CamPtr_CounterStatus_set, doc=r"""CounterStatus""")
    CounterTriggerSource = property(_PySpin._SWIG_CamPtr_CounterTriggerSource_get, _PySpin._SWIG_CamPtr_CounterTriggerSource_set, doc=r"""CounterTriggerSource""")
    CounterDelay = property(_PySpin._SWIG_CamPtr_CounterDelay_get, _PySpin._SWIG_CamPtr_CounterDelay_set, doc=r"""CounterDelay""")
    CounterResetSource = property(_PySpin._SWIG_CamPtr_CounterResetSource_get, _PySpin._SWIG_CamPtr_CounterResetSource_set, doc=r"""CounterResetSource""")
    CounterEventSource = property(_PySpin._SWIG_CamPtr_CounterEventSource_get, _PySpin._SWIG_CamPtr_CounterEventSource_set, doc=r"""CounterEventSource""")
    CounterEventActivation = property(_PySpin._SWIG_CamPtr_CounterEventActivation_get, _PySpin._SWIG_CamPtr_CounterEventActivation_set, doc=r"""CounterEventActivation""")
    CounterDuration = property(_PySpin._SWIG_CamPtr_CounterDuration_get, _PySpin._SWIG_CamPtr_CounterDuration_set, doc=r"""CounterDuration""")
    CounterResetActivation = property(_PySpin._SWIG_CamPtr_CounterResetActivation_get, _PySpin._SWIG_CamPtr_CounterResetActivation_set, doc=r"""CounterResetActivation""")
    DeviceType = property(_PySpin._SWIG_CamPtr_DeviceType_get, _PySpin._SWIG_CamPtr_DeviceType_set, doc=r"""DeviceType""")
    DeviceFamilyName = property(_PySpin._SWIG_CamPtr_DeviceFamilyName_get, _PySpin._SWIG_CamPtr_DeviceFamilyName_set, doc=r"""DeviceFamilyName""")
    DeviceSFNCVersionMajor = property(_PySpin._SWIG_CamPtr_DeviceSFNCVersionMajor_get, _PySpin._SWIG_CamPtr_DeviceSFNCVersionMajor_set, doc=r"""DeviceSFNCVersionMajor""")
    DeviceSFNCVersionMinor = property(_PySpin._SWIG_CamPtr_DeviceSFNCVersionMinor_get, _PySpin._SWIG_CamPtr_DeviceSFNCVersionMinor_set, doc=r"""DeviceSFNCVersionMinor""")
    DeviceSFNCVersionSubMinor = property(_PySpin._SWIG_CamPtr_DeviceSFNCVersionSubMinor_get, _PySpin._SWIG_CamPtr_DeviceSFNCVersionSubMinor_set, doc=r"""DeviceSFNCVersionSubMinor""")
    DeviceManifestEntrySelector = property(_PySpin._SWIG_CamPtr_DeviceManifestEntrySelector_get, _PySpin._SWIG_CamPtr_DeviceManifestEntrySelector_set, doc=r"""DeviceManifestEntrySelector""")
    DeviceManifestXMLMajorVersion = property(_PySpin._SWIG_CamPtr_DeviceManifestXMLMajorVersion_get, _PySpin._SWIG_CamPtr_DeviceManifestXMLMajorVersion_set, doc=r"""DeviceManifestXMLMajorVersion""")
    DeviceManifestXMLMinorVersion = property(_PySpin._SWIG_CamPtr_DeviceManifestXMLMinorVersion_get, _PySpin._SWIG_CamPtr_DeviceManifestXMLMinorVersion_set, doc=r"""DeviceManifestXMLMinorVersion""")
    DeviceManifestXMLSubMinorVersion = property(_PySpin._SWIG_CamPtr_DeviceManifestXMLSubMinorVersion_get, _PySpin._SWIG_CamPtr_DeviceManifestXMLSubMinorVersion_set, doc=r"""DeviceManifestXMLSubMinorVersion""")
    DeviceManifestSchemaMajorVersion = property(_PySpin._SWIG_CamPtr_DeviceManifestSchemaMajorVersion_get, _PySpin._SWIG_CamPtr_DeviceManifestSchemaMajorVersion_set, doc=r"""DeviceManifestSchemaMajorVersion""")
    DeviceManifestSchemaMinorVersion = property(_PySpin._SWIG_CamPtr_DeviceManifestSchemaMinorVersion_get, _PySpin._SWIG_CamPtr_DeviceManifestSchemaMinorVersion_set, doc=r"""DeviceManifestSchemaMinorVersion""")
    DeviceManifestPrimaryURL = property(_PySpin._SWIG_CamPtr_DeviceManifestPrimaryURL_get, _PySpin._SWIG_CamPtr_DeviceManifestPrimaryURL_set, doc=r"""DeviceManifestPrimaryURL""")
    DeviceManifestSecondaryURL = property(_PySpin._SWIG_CamPtr_DeviceManifestSecondaryURL_get, _PySpin._SWIG_CamPtr_DeviceManifestSecondaryURL_set, doc=r"""DeviceManifestSecondaryURL""")
    DeviceTLVersionSubMinor = property(_PySpin._SWIG_CamPtr_DeviceTLVersionSubMinor_get, _PySpin._SWIG_CamPtr_DeviceTLVersionSubMinor_set, doc=r"""DeviceTLVersionSubMinor""")
    DeviceGenCPVersionMajor = property(_PySpin._SWIG_CamPtr_DeviceGenCPVersionMajor_get, _PySpin._SWIG_CamPtr_DeviceGenCPVersionMajor_set, doc=r"""DeviceGenCPVersionMajor""")
    DeviceGenCPVersionMinor = property(_PySpin._SWIG_CamPtr_DeviceGenCPVersionMinor_get, _PySpin._SWIG_CamPtr_DeviceGenCPVersionMinor_set, doc=r"""DeviceGenCPVersionMinor""")
    DeviceConnectionSelector = property(_PySpin._SWIG_CamPtr_DeviceConnectionSelector_get, _PySpin._SWIG_CamPtr_DeviceConnectionSelector_set, doc=r"""DeviceConnectionSelector""")
    DeviceConnectionSpeed = property(_PySpin._SWIG_CamPtr_DeviceConnectionSpeed_get, _PySpin._SWIG_CamPtr_DeviceConnectionSpeed_set, doc=r"""DeviceConnectionSpeed""")
    DeviceConnectionStatus = property(_PySpin._SWIG_CamPtr_DeviceConnectionStatus_get, _PySpin._SWIG_CamPtr_DeviceConnectionStatus_set, doc=r"""DeviceConnectionStatus""")
    DeviceLinkSelector = property(_PySpin._SWIG_CamPtr_DeviceLinkSelector_get, _PySpin._SWIG_CamPtr_DeviceLinkSelector_set, doc=r"""DeviceLinkSelector""")
    DeviceLinkThroughputLimitMode = property(_PySpin._SWIG_CamPtr_DeviceLinkThroughputLimitMode_get, _PySpin._SWIG_CamPtr_DeviceLinkThroughputLimitMode_set, doc=r"""DeviceLinkThroughputLimitMode""")
    DeviceLinkConnectionCount = property(_PySpin._SWIG_CamPtr_DeviceLinkConnectionCount_get, _PySpin._SWIG_CamPtr_DeviceLinkConnectionCount_set, doc=r"""DeviceLinkConnectionCount""")
    DeviceLinkHeartbeatMode = property(_PySpin._SWIG_CamPtr_DeviceLinkHeartbeatMode_get, _PySpin._SWIG_CamPtr_DeviceLinkHeartbeatMode_set, doc=r"""DeviceLinkHeartbeatMode""")
    DeviceLinkHeartbeatTimeout = property(_PySpin._SWIG_CamPtr_DeviceLinkHeartbeatTimeout_get, _PySpin._SWIG_CamPtr_DeviceLinkHeartbeatTimeout_set, doc=r"""DeviceLinkHeartbeatTimeout""")
    DeviceLinkCommandTimeout = property(_PySpin._SWIG_CamPtr_DeviceLinkCommandTimeout_get, _PySpin._SWIG_CamPtr_DeviceLinkCommandTimeout_set, doc=r"""DeviceLinkCommandTimeout""")
    DeviceStreamChannelSelector = property(_PySpin._SWIG_CamPtr_DeviceStreamChannelSelector_get, _PySpin._SWIG_CamPtr_DeviceStreamChannelSelector_set, doc=r"""DeviceStreamChannelSelector""")
    DeviceStreamChannelType = property(_PySpin._SWIG_CamPtr_DeviceStreamChannelType_get, _PySpin._SWIG_CamPtr_DeviceStreamChannelType_set, doc=r"""DeviceStreamChannelType""")
    DeviceStreamChannelLink = property(_PySpin._SWIG_CamPtr_DeviceStreamChannelLink_get, _PySpin._SWIG_CamPtr_DeviceStreamChannelLink_set, doc=r"""DeviceStreamChannelLink""")
    DeviceStreamChannelEndianness = property(_PySpin._SWIG_CamPtr_DeviceStreamChannelEndianness_get, _PySpin._SWIG_CamPtr_DeviceStreamChannelEndianness_set, doc=r"""DeviceStreamChannelEndianness""")
    DeviceStreamChannelPacketSize = property(_PySpin._SWIG_CamPtr_DeviceStreamChannelPacketSize_get, _PySpin._SWIG_CamPtr_DeviceStreamChannelPacketSize_set, doc=r"""DeviceStreamChannelPacketSize""")
    DeviceFeaturePersistenceStart = property(_PySpin._SWIG_CamPtr_DeviceFeaturePersistenceStart_get, _PySpin._SWIG_CamPtr_DeviceFeaturePersistenceStart_set, doc=r"""DeviceFeaturePersistenceStart""")
    DeviceFeaturePersistenceEnd = property(_PySpin._SWIG_CamPtr_DeviceFeaturePersistenceEnd_get, _PySpin._SWIG_CamPtr_DeviceFeaturePersistenceEnd_set, doc=r"""DeviceFeaturePersistenceEnd""")
    DeviceRegistersStreamingStart = property(_PySpin._SWIG_CamPtr_DeviceRegistersStreamingStart_get, _PySpin._SWIG_CamPtr_DeviceRegistersStreamingStart_set, doc=r"""DeviceRegistersStreamingStart""")
    DeviceRegistersStreamingEnd = property(_PySpin._SWIG_CamPtr_DeviceRegistersStreamingEnd_get, _PySpin._SWIG_CamPtr_DeviceRegistersStreamingEnd_set, doc=r"""DeviceRegistersStreamingEnd""")
    DeviceRegistersCheck = property(_PySpin._SWIG_CamPtr_DeviceRegistersCheck_get, _PySpin._SWIG_CamPtr_DeviceRegistersCheck_set, doc=r"""DeviceRegistersCheck""")
    DeviceRegistersValid = property(_PySpin._SWIG_CamPtr_DeviceRegistersValid_get, _PySpin._SWIG_CamPtr_DeviceRegistersValid_set, doc=r"""DeviceRegistersValid""")
    DeviceClockSelector = property(_PySpin._SWIG_CamPtr_DeviceClockSelector_get, _PySpin._SWIG_CamPtr_DeviceClockSelector_set, doc=r"""DeviceClockSelector""")
    DeviceClockFrequency = property(_PySpin._SWIG_CamPtr_DeviceClockFrequency_get, _PySpin._SWIG_CamPtr_DeviceClockFrequency_set, doc=r"""DeviceClockFrequency""")
    DeviceSerialPortSelector = property(_PySpin._SWIG_CamPtr_DeviceSerialPortSelector_get, _PySpin._SWIG_CamPtr_DeviceSerialPortSelector_set, doc=r"""DeviceSerialPortSelector""")
    DeviceSerialPortBaudRate = property(_PySpin._SWIG_CamPtr_DeviceSerialPortBaudRate_get, _PySpin._SWIG_CamPtr_DeviceSerialPortBaudRate_set, doc=r"""DeviceSerialPortBaudRate""")
    Timestamp = property(_PySpin._SWIG_CamPtr_Timestamp_get, _PySpin._SWIG_CamPtr_Timestamp_set, doc=r"""Timestamp""")
    SensorTaps = property(_PySpin._SWIG_CamPtr_SensorTaps_get, _PySpin._SWIG_CamPtr_SensorTaps_set, doc=r"""SensorTaps""")
    SensorDigitizationTaps = property(_PySpin._SWIG_CamPtr_SensorDigitizationTaps_get, _PySpin._SWIG_CamPtr_SensorDigitizationTaps_set, doc=r"""SensorDigitizationTaps""")
    RegionSelector = property(_PySpin._SWIG_CamPtr_RegionSelector_get, _PySpin._SWIG_CamPtr_RegionSelector_set, doc=r"""RegionSelector""")
    RegionMode = property(_PySpin._SWIG_CamPtr_RegionMode_get, _PySpin._SWIG_CamPtr_RegionMode_set, doc=r"""RegionMode""")
    RegionDestination = property(_PySpin._SWIG_CamPtr_RegionDestination_get, _PySpin._SWIG_CamPtr_RegionDestination_set, doc=r"""RegionDestination""")
    ImageComponentSelector = property(_PySpin._SWIG_CamPtr_ImageComponentSelector_get, _PySpin._SWIG_CamPtr_ImageComponentSelector_set, doc=r"""ImageComponentSelector""")
    ImageComponentEnable = property(_PySpin._SWIG_CamPtr_ImageComponentEnable_get, _PySpin._SWIG_CamPtr_ImageComponentEnable_set, doc=r"""ImageComponentEnable""")
    LinePitch = property(_PySpin._SWIG_CamPtr_LinePitch_get, _PySpin._SWIG_CamPtr_LinePitch_set, doc=r"""LinePitch""")
    PixelFormatInfoSelector = property(_PySpin._SWIG_CamPtr_PixelFormatInfoSelector_get, _PySpin._SWIG_CamPtr_PixelFormatInfoSelector_set, doc=r"""PixelFormatInfoSelector""")
    PixelFormatInfoID = property(_PySpin._SWIG_CamPtr_PixelFormatInfoID_get, _PySpin._SWIG_CamPtr_PixelFormatInfoID_set, doc=r"""PixelFormatInfoID""")
    Deinterlacing = property(_PySpin._SWIG_CamPtr_Deinterlacing_get, _PySpin._SWIG_CamPtr_Deinterlacing_set, doc=r"""Deinterlacing""")
    ImageCompressionRateOption = property(_PySpin._SWIG_CamPtr_ImageCompressionRateOption_get, _PySpin._SWIG_CamPtr_ImageCompressionRateOption_set, doc=r"""ImageCompressionRateOption""")
    ImageCompressionQuality = property(_PySpin._SWIG_CamPtr_ImageCompressionQuality_get, _PySpin._SWIG_CamPtr_ImageCompressionQuality_set, doc=r"""ImageCompressionQuality""")
    ImageCompressionBitrate = property(_PySpin._SWIG_CamPtr_ImageCompressionBitrate_get, _PySpin._SWIG_CamPtr_ImageCompressionBitrate_set, doc=r"""ImageCompressionBitrate""")
    ImageCompressionJPEGFormatOption = property(_PySpin._SWIG_CamPtr_ImageCompressionJPEGFormatOption_get, _PySpin._SWIG_CamPtr_ImageCompressionJPEGFormatOption_set, doc=r"""ImageCompressionJPEGFormatOption""")
    AcquisitionAbort = property(_PySpin._SWIG_CamPtr_AcquisitionAbort_get, _PySpin._SWIG_CamPtr_AcquisitionAbort_set, doc=r"""AcquisitionAbort""")
    AcquisitionArm = property(_PySpin._SWIG_CamPtr_AcquisitionArm_get, _PySpin._SWIG_CamPtr_AcquisitionArm_set, doc=r"""AcquisitionArm""")
    AcquisitionStatusSelector = property(_PySpin._SWIG_CamPtr_AcquisitionStatusSelector_get, _PySpin._SWIG_CamPtr_AcquisitionStatusSelector_set, doc=r"""AcquisitionStatusSelector""")
    AcquisitionStatus = property(_PySpin._SWIG_CamPtr_AcquisitionStatus_get, _PySpin._SWIG_CamPtr_AcquisitionStatus_set, doc=r"""AcquisitionStatus""")
    TriggerDivider = property(_PySpin._SWIG_CamPtr_TriggerDivider_get, _PySpin._SWIG_CamPtr_TriggerDivider_set, doc=r"""TriggerDivider""")
    TriggerMultiplier = property(_PySpin._SWIG_CamPtr_TriggerMultiplier_get, _PySpin._SWIG_CamPtr_TriggerMultiplier_set, doc=r"""TriggerMultiplier""")
    ExposureTimeMode = property(_PySpin._SWIG_CamPtr_ExposureTimeMode_get, _PySpin._SWIG_CamPtr_ExposureTimeMode_set, doc=r"""ExposureTimeMode""")
    ExposureTimeSelector = property(_PySpin._SWIG_CamPtr_ExposureTimeSelector_get, _PySpin._SWIG_CamPtr_ExposureTimeSelector_set, doc=r"""ExposureTimeSelector""")
    GainAutoBalance = property(_PySpin._SWIG_CamPtr_GainAutoBalance_get, _PySpin._SWIG_CamPtr_GainAutoBalance_set, doc=r"""GainAutoBalance""")
    BlackLevelAuto = property(_PySpin._SWIG_CamPtr_BlackLevelAuto_get, _PySpin._SWIG_CamPtr_BlackLevelAuto_set, doc=r"""BlackLevelAuto""")
    BlackLevelAutoBalance = property(_PySpin._SWIG_CamPtr_BlackLevelAutoBalance_get, _PySpin._SWIG_CamPtr_BlackLevelAutoBalance_set, doc=r"""BlackLevelAutoBalance""")
    WhiteClipSelector = property(_PySpin._SWIG_CamPtr_WhiteClipSelector_get, _PySpin._SWIG_CamPtr_WhiteClipSelector_set, doc=r"""WhiteClipSelector""")
    WhiteClip = property(_PySpin._SWIG_CamPtr_WhiteClip_get, _PySpin._SWIG_CamPtr_WhiteClip_set, doc=r"""WhiteClip""")
    LUTValueAll = property(_PySpin._SWIG_CamPtr_LUTValueAll_get, _PySpin._SWIG_CamPtr_LUTValueAll_set, doc=r"""LUTValueAll""")
    UserOutputValueAllMask = property(_PySpin._SWIG_CamPtr_UserOutputValueAllMask_get, _PySpin._SWIG_CamPtr_UserOutputValueAllMask_set, doc=r"""UserOutputValueAllMask""")
    CounterReset = property(_PySpin._SWIG_CamPtr_CounterReset_get, _PySpin._SWIG_CamPtr_CounterReset_set, doc=r"""CounterReset""")
    TimerSelector = property(_PySpin._SWIG_CamPtr_TimerSelector_get, _PySpin._SWIG_CamPtr_TimerSelector_set, doc=r"""TimerSelector""")
    TimerDuration = property(_PySpin._SWIG_CamPtr_TimerDuration_get, _PySpin._SWIG_CamPtr_TimerDuration_set, doc=r"""TimerDuration""")
    TimerDelay = property(_PySpin._SWIG_CamPtr_TimerDelay_get, _PySpin._SWIG_CamPtr_TimerDelay_set, doc=r"""TimerDelay""")
    TimerReset = property(_PySpin._SWIG_CamPtr_TimerReset_get, _PySpin._SWIG_CamPtr_TimerReset_set, doc=r"""TimerReset""")
    TimerValue = property(_PySpin._SWIG_CamPtr_TimerValue_get, _PySpin._SWIG_CamPtr_TimerValue_set, doc=r"""TimerValue""")
    TimerStatus = property(_PySpin._SWIG_CamPtr_TimerStatus_get, _PySpin._SWIG_CamPtr_TimerStatus_set, doc=r"""TimerStatus""")
    TimerTriggerSource = property(_PySpin._SWIG_CamPtr_TimerTriggerSource_get, _PySpin._SWIG_CamPtr_TimerTriggerSource_set, doc=r"""TimerTriggerSource""")
    TimerTriggerActivation = property(_PySpin._SWIG_CamPtr_TimerTriggerActivation_get, _PySpin._SWIG_CamPtr_TimerTriggerActivation_set, doc=r"""TimerTriggerActivation""")
    EncoderSelector = property(_PySpin._SWIG_CamPtr_EncoderSelector_get, _PySpin._SWIG_CamPtr_EncoderSelector_set, doc=r"""EncoderSelector""")
    EncoderSourceA = property(_PySpin._SWIG_CamPtr_EncoderSourceA_get, _PySpin._SWIG_CamPtr_EncoderSourceA_set, doc=r"""EncoderSourceA""")
    EncoderSourceB = property(_PySpin._SWIG_CamPtr_EncoderSourceB_get, _PySpin._SWIG_CamPtr_EncoderSourceB_set, doc=r"""EncoderSourceB""")
    EncoderMode = property(_PySpin._SWIG_CamPtr_EncoderMode_get, _PySpin._SWIG_CamPtr_EncoderMode_set, doc=r"""EncoderMode""")
    EncoderDivider = property(_PySpin._SWIG_CamPtr_EncoderDivider_get, _PySpin._SWIG_CamPtr_EncoderDivider_set, doc=r"""EncoderDivider""")
    EncoderOutputMode = property(_PySpin._SWIG_CamPtr_EncoderOutputMode_get, _PySpin._SWIG_CamPtr_EncoderOutputMode_set, doc=r"""EncoderOutputMode""")
    EncoderStatus = property(_PySpin._SWIG_CamPtr_EncoderStatus_get, _PySpin._SWIG_CamPtr_EncoderStatus_set, doc=r"""EncoderStatus""")
    EncoderTimeout = property(_PySpin._SWIG_CamPtr_EncoderTimeout_get, _PySpin._SWIG_CamPtr_EncoderTimeout_set, doc=r"""EncoderTimeout""")
    EncoderResetSource = property(_PySpin._SWIG_CamPtr_EncoderResetSource_get, _PySpin._SWIG_CamPtr_EncoderResetSource_set, doc=r"""EncoderResetSource""")
    EncoderResetActivation = property(_PySpin._SWIG_CamPtr_EncoderResetActivation_get, _PySpin._SWIG_CamPtr_EncoderResetActivation_set, doc=r"""EncoderResetActivation""")
    EncoderReset = property(_PySpin._SWIG_CamPtr_EncoderReset_get, _PySpin._SWIG_CamPtr_EncoderReset_set, doc=r"""EncoderReset""")
    EncoderValue = property(_PySpin._SWIG_CamPtr_EncoderValue_get, _PySpin._SWIG_CamPtr_EncoderValue_set, doc=r"""EncoderValue""")
    EncoderValueAtReset = property(_PySpin._SWIG_CamPtr_EncoderValueAtReset_get, _PySpin._SWIG_CamPtr_EncoderValueAtReset_set, doc=r"""EncoderValueAtReset""")
    SoftwareSignalSelector = property(_PySpin._SWIG_CamPtr_SoftwareSignalSelector_get, _PySpin._SWIG_CamPtr_SoftwareSignalSelector_set, doc=r"""SoftwareSignalSelector""")
    SoftwareSignalPulse = property(_PySpin._SWIG_CamPtr_SoftwareSignalPulse_get, _PySpin._SWIG_CamPtr_SoftwareSignalPulse_set, doc=r"""SoftwareSignalPulse""")
    ActionUnconditionalMode = property(_PySpin._SWIG_CamPtr_ActionUnconditionalMode_get, _PySpin._SWIG_CamPtr_ActionUnconditionalMode_set, doc=r"""ActionUnconditionalMode""")
    ActionDeviceKey = property(_PySpin._SWIG_CamPtr_ActionDeviceKey_get, _PySpin._SWIG_CamPtr_ActionDeviceKey_set, doc=r"""ActionDeviceKey""")
    ActionQueueSize = property(_PySpin._SWIG_CamPtr_ActionQueueSize_get, _PySpin._SWIG_CamPtr_ActionQueueSize_set, doc=r"""ActionQueueSize""")
    ActionSelector = property(_PySpin._SWIG_CamPtr_ActionSelector_get, _PySpin._SWIG_CamPtr_ActionSelector_set, doc=r"""ActionSelector""")
    ActionGroupMask = property(_PySpin._SWIG_CamPtr_ActionGroupMask_get, _PySpin._SWIG_CamPtr_ActionGroupMask_set, doc=r"""ActionGroupMask""")
    ActionGroupKey = property(_PySpin._SWIG_CamPtr_ActionGroupKey_get, _PySpin._SWIG_CamPtr_ActionGroupKey_set, doc=r"""ActionGroupKey""")
    EventAcquisitionTrigger = property(_PySpin._SWIG_CamPtr_EventAcquisitionTrigger_get, _PySpin._SWIG_CamPtr_EventAcquisitionTrigger_set, doc=r"""EventAcquisitionTrigger""")
    EventAcquisitionTriggerTimestamp = property(_PySpin._SWIG_CamPtr_EventAcquisitionTriggerTimestamp_get, _PySpin._SWIG_CamPtr_EventAcquisitionTriggerTimestamp_set, doc=r"""EventAcquisitionTriggerTimestamp""")
    EventAcquisitionTriggerFrameID = property(_PySpin._SWIG_CamPtr_EventAcquisitionTriggerFrameID_get, _PySpin._SWIG_CamPtr_EventAcquisitionTriggerFrameID_set, doc=r"""EventAcquisitionTriggerFrameID""")
    EventAcquisitionStart = property(_PySpin._SWIG_CamPtr_EventAcquisitionStart_get, _PySpin._SWIG_CamPtr_EventAcquisitionStart_set, doc=r"""EventAcquisitionStart""")
    EventAcquisitionStartTimestamp = property(_PySpin._SWIG_CamPtr_EventAcquisitionStartTimestamp_get, _PySpin._SWIG_CamPtr_EventAcquisitionStartTimestamp_set, doc=r"""EventAcquisitionStartTimestamp""")
    EventAcquisitionStartFrameID = property(_PySpin._SWIG_CamPtr_EventAcquisitionStartFrameID_get, _PySpin._SWIG_CamPtr_EventAcquisitionStartFrameID_set, doc=r"""EventAcquisitionStartFrameID""")
    EventAcquisitionEnd = property(_PySpin._SWIG_CamPtr_EventAcquisitionEnd_get, _PySpin._SWIG_CamPtr_EventAcquisitionEnd_set, doc=r"""EventAcquisitionEnd""")
    EventAcquisitionEndTimestamp = property(_PySpin._SWIG_CamPtr_EventAcquisitionEndTimestamp_get, _PySpin._SWIG_CamPtr_EventAcquisitionEndTimestamp_set, doc=r"""EventAcquisitionEndTimestamp""")
    EventAcquisitionEndFrameID = property(_PySpin._SWIG_CamPtr_EventAcquisitionEndFrameID_get, _PySpin._SWIG_CamPtr_EventAcquisitionEndFrameID_set, doc=r"""EventAcquisitionEndFrameID""")
    EventAcquisitionTransferStart = property(_PySpin._SWIG_CamPtr_EventAcquisitionTransferStart_get, _PySpin._SWIG_CamPtr_EventAcquisitionTransferStart_set, doc=r"""EventAcquisitionTransferStart""")
    EventAcquisitionTransferStartTimestamp = property(_PySpin._SWIG_CamPtr_EventAcquisitionTransferStartTimestamp_get, _PySpin._SWIG_CamPtr_EventAcquisitionTransferStartTimestamp_set, doc=r"""EventAcquisitionTransferStartTimestamp""")
    EventAcquisitionTransferStartFrameID = property(_PySpin._SWIG_CamPtr_EventAcquisitionTransferStartFrameID_get, _PySpin._SWIG_CamPtr_EventAcquisitionTransferStartFrameID_set, doc=r"""EventAcquisitionTransferStartFrameID""")
    EventAcquisitionTransferEnd = property(_PySpin._SWIG_CamPtr_EventAcquisitionTransferEnd_get, _PySpin._SWIG_CamPtr_EventAcquisitionTransferEnd_set, doc=r"""EventAcquisitionTransferEnd""")
    EventAcquisitionTransferEndTimestamp = property(_PySpin._SWIG_CamPtr_EventAcquisitionTransferEndTimestamp_get, _PySpin._SWIG_CamPtr_EventAcquisitionTransferEndTimestamp_set, doc=r"""EventAcquisitionTransferEndTimestamp""")
    EventAcquisitionTransferEndFrameID = property(_PySpin._SWIG_CamPtr_EventAcquisitionTransferEndFrameID_get, _PySpin._SWIG_CamPtr_EventAcquisitionTransferEndFrameID_set, doc=r"""EventAcquisitionTransferEndFrameID""")
    EventAcquisitionError = property(_PySpin._SWIG_CamPtr_EventAcquisitionError_get, _PySpin._SWIG_CamPtr_EventAcquisitionError_set, doc=r"""EventAcquisitionError""")
    EventAcquisitionErrorTimestamp = property(_PySpin._SWIG_CamPtr_EventAcquisitionErrorTimestamp_get, _PySpin._SWIG_CamPtr_EventAcquisitionErrorTimestamp_set, doc=r"""EventAcquisitionErrorTimestamp""")
    EventAcquisitionErrorFrameID = property(_PySpin._SWIG_CamPtr_EventAcquisitionErrorFrameID_get, _PySpin._SWIG_CamPtr_EventAcquisitionErrorFrameID_set, doc=r"""EventAcquisitionErrorFrameID""")
    EventFrameTrigger = property(_PySpin._SWIG_CamPtr_EventFrameTrigger_get, _PySpin._SWIG_CamPtr_EventFrameTrigger_set, doc=r"""EventFrameTrigger""")
    EventFrameTriggerTimestamp = property(_PySpin._SWIG_CamPtr_EventFrameTriggerTimestamp_get, _PySpin._SWIG_CamPtr_EventFrameTriggerTimestamp_set, doc=r"""EventFrameTriggerTimestamp""")
    EventFrameTriggerFrameID = property(_PySpin._SWIG_CamPtr_EventFrameTriggerFrameID_get, _PySpin._SWIG_CamPtr_EventFrameTriggerFrameID_set, doc=r"""EventFrameTriggerFrameID""")
    EventFrameStart = property(_PySpin._SWIG_CamPtr_EventFrameStart_get, _PySpin._SWIG_CamPtr_EventFrameStart_set, doc=r"""EventFrameStart""")
    EventFrameStartTimestamp = property(_PySpin._SWIG_CamPtr_EventFrameStartTimestamp_get, _PySpin._SWIG_CamPtr_EventFrameStartTimestamp_set, doc=r"""EventFrameStartTimestamp""")
    EventFrameStartFrameID = property(_PySpin._SWIG_CamPtr_EventFrameStartFrameID_get, _PySpin._SWIG_CamPtr_EventFrameStartFrameID_set, doc=r"""EventFrameStartFrameID""")
    EventFrameEnd = property(_PySpin._SWIG_CamPtr_EventFrameEnd_get, _PySpin._SWIG_CamPtr_EventFrameEnd_set, doc=r"""EventFrameEnd""")
    EventFrameEndTimestamp = property(_PySpin._SWIG_CamPtr_EventFrameEndTimestamp_get, _PySpin._SWIG_CamPtr_EventFrameEndTimestamp_set, doc=r"""EventFrameEndTimestamp""")
    EventFrameEndFrameID = property(_PySpin._SWIG_CamPtr_EventFrameEndFrameID_get, _PySpin._SWIG_CamPtr_EventFrameEndFrameID_set, doc=r"""EventFrameEndFrameID""")
    EventFrameBurstStart = property(_PySpin._SWIG_CamPtr_EventFrameBurstStart_get, _PySpin._SWIG_CamPtr_EventFrameBurstStart_set, doc=r"""EventFrameBurstStart""")
    EventFrameBurstStartTimestamp = property(_PySpin._SWIG_CamPtr_EventFrameBurstStartTimestamp_get, _PySpin._SWIG_CamPtr_EventFrameBurstStartTimestamp_set, doc=r"""EventFrameBurstStartTimestamp""")
    EventFrameBurstStartFrameID = property(_PySpin._SWIG_CamPtr_EventFrameBurstStartFrameID_get, _PySpin._SWIG_CamPtr_EventFrameBurstStartFrameID_set, doc=r"""EventFrameBurstStartFrameID""")
    EventFrameBurstEnd = property(_PySpin._SWIG_CamPtr_EventFrameBurstEnd_get, _PySpin._SWIG_CamPtr_EventFrameBurstEnd_set, doc=r"""EventFrameBurstEnd""")
    EventFrameBurstEndTimestamp = property(_PySpin._SWIG_CamPtr_EventFrameBurstEndTimestamp_get, _PySpin._SWIG_CamPtr_EventFrameBurstEndTimestamp_set, doc=r"""EventFrameBurstEndTimestamp""")
    EventFrameBurstEndFrameID = property(_PySpin._SWIG_CamPtr_EventFrameBurstEndFrameID_get, _PySpin._SWIG_CamPtr_EventFrameBurstEndFrameID_set, doc=r"""EventFrameBurstEndFrameID""")
    EventFrameTransferStart = property(_PySpin._SWIG_CamPtr_EventFrameTransferStart_get, _PySpin._SWIG_CamPtr_EventFrameTransferStart_set, doc=r"""EventFrameTransferStart""")
    EventFrameTransferStartTimestamp = property(_PySpin._SWIG_CamPtr_EventFrameTransferStartTimestamp_get, _PySpin._SWIG_CamPtr_EventFrameTransferStartTimestamp_set, doc=r"""EventFrameTransferStartTimestamp""")
    EventFrameTransferStartFrameID = property(_PySpin._SWIG_CamPtr_EventFrameTransferStartFrameID_get, _PySpin._SWIG_CamPtr_EventFrameTransferStartFrameID_set, doc=r"""EventFrameTransferStartFrameID""")
    EventFrameTransferEnd = property(_PySpin._SWIG_CamPtr_EventFrameTransferEnd_get, _PySpin._SWIG_CamPtr_EventFrameTransferEnd_set, doc=r"""EventFrameTransferEnd""")
    EventFrameTransferEndTimestamp = property(_PySpin._SWIG_CamPtr_EventFrameTransferEndTimestamp_get, _PySpin._SWIG_CamPtr_EventFrameTransferEndTimestamp_set, doc=r"""EventFrameTransferEndTimestamp""")
    EventFrameTransferEndFrameID = property(_PySpin._SWIG_CamPtr_EventFrameTransferEndFrameID_get, _PySpin._SWIG_CamPtr_EventFrameTransferEndFrameID_set, doc=r"""EventFrameTransferEndFrameID""")
    EventExposureStart = property(_PySpin._SWIG_CamPtr_EventExposureStart_get, _PySpin._SWIG_CamPtr_EventExposureStart_set, doc=r"""EventExposureStart""")
    EventExposureStartTimestamp = property(_PySpin._SWIG_CamPtr_EventExposureStartTimestamp_get, _PySpin._SWIG_CamPtr_EventExposureStartTimestamp_set, doc=r"""EventExposureStartTimestamp""")
    EventExposureStartFrameID = property(_PySpin._SWIG_CamPtr_EventExposureStartFrameID_get, _PySpin._SWIG_CamPtr_EventExposureStartFrameID_set, doc=r"""EventExposureStartFrameID""")
    EventStream0TransferStart = property(_PySpin._SWIG_CamPtr_EventStream0TransferStart_get, _PySpin._SWIG_CamPtr_EventStream0TransferStart_set, doc=r"""EventStream0TransferStart""")
    EventStream0TransferStartTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferStartTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferStartTimestamp_set, doc=r"""EventStream0TransferStartTimestamp""")
    EventStream0TransferStartFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferStartFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferStartFrameID_set, doc=r"""EventStream0TransferStartFrameID""")
    EventStream0TransferEnd = property(_PySpin._SWIG_CamPtr_EventStream0TransferEnd_get, _PySpin._SWIG_CamPtr_EventStream0TransferEnd_set, doc=r"""EventStream0TransferEnd""")
    EventStream0TransferEndTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferEndTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferEndTimestamp_set, doc=r"""EventStream0TransferEndTimestamp""")
    EventStream0TransferEndFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferEndFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferEndFrameID_set, doc=r"""EventStream0TransferEndFrameID""")
    EventStream0TransferPause = property(_PySpin._SWIG_CamPtr_EventStream0TransferPause_get, _PySpin._SWIG_CamPtr_EventStream0TransferPause_set, doc=r"""EventStream0TransferPause""")
    EventStream0TransferPauseTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferPauseTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferPauseTimestamp_set, doc=r"""EventStream0TransferPauseTimestamp""")
    EventStream0TransferPauseFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferPauseFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferPauseFrameID_set, doc=r"""EventStream0TransferPauseFrameID""")
    EventStream0TransferResume = property(_PySpin._SWIG_CamPtr_EventStream0TransferResume_get, _PySpin._SWIG_CamPtr_EventStream0TransferResume_set, doc=r"""EventStream0TransferResume""")
    EventStream0TransferResumeTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferResumeTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferResumeTimestamp_set, doc=r"""EventStream0TransferResumeTimestamp""")
    EventStream0TransferResumeFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferResumeFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferResumeFrameID_set, doc=r"""EventStream0TransferResumeFrameID""")
    EventStream0TransferBlockStart = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockStart_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockStart_set, doc=r"""EventStream0TransferBlockStart""")
    EventStream0TransferBlockStartTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockStartTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockStartTimestamp_set, doc=r"""EventStream0TransferBlockStartTimestamp""")
    EventStream0TransferBlockStartFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockStartFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockStartFrameID_set, doc=r"""EventStream0TransferBlockStartFrameID""")
    EventStream0TransferBlockEnd = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockEnd_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockEnd_set, doc=r"""EventStream0TransferBlockEnd""")
    EventStream0TransferBlockEndTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockEndTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockEndTimestamp_set, doc=r"""EventStream0TransferBlockEndTimestamp""")
    EventStream0TransferBlockEndFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockEndFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockEndFrameID_set, doc=r"""EventStream0TransferBlockEndFrameID""")
    EventStream0TransferBlockTrigger = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockTrigger_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockTrigger_set, doc=r"""EventStream0TransferBlockTrigger""")
    EventStream0TransferBlockTriggerTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockTriggerTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockTriggerTimestamp_set, doc=r"""EventStream0TransferBlockTriggerTimestamp""")
    EventStream0TransferBlockTriggerFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferBlockTriggerFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferBlockTriggerFrameID_set, doc=r"""EventStream0TransferBlockTriggerFrameID""")
    EventStream0TransferBurstStart = property(_PySpin._SWIG_CamPtr_EventStream0TransferBurstStart_get, _PySpin._SWIG_CamPtr_EventStream0TransferBurstStart_set, doc=r"""EventStream0TransferBurstStart""")
    EventStream0TransferBurstStartTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferBurstStartTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferBurstStartTimestamp_set, doc=r"""EventStream0TransferBurstStartTimestamp""")
    EventStream0TransferBurstStartFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferBurstStartFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferBurstStartFrameID_set, doc=r"""EventStream0TransferBurstStartFrameID""")
    EventStream0TransferBurstEnd = property(_PySpin._SWIG_CamPtr_EventStream0TransferBurstEnd_get, _PySpin._SWIG_CamPtr_EventStream0TransferBurstEnd_set, doc=r"""EventStream0TransferBurstEnd""")
    EventStream0TransferBurstEndTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferBurstEndTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferBurstEndTimestamp_set, doc=r"""EventStream0TransferBurstEndTimestamp""")
    EventStream0TransferBurstEndFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferBurstEndFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferBurstEndFrameID_set, doc=r"""EventStream0TransferBurstEndFrameID""")
    EventStream0TransferOverflow = property(_PySpin._SWIG_CamPtr_EventStream0TransferOverflow_get, _PySpin._SWIG_CamPtr_EventStream0TransferOverflow_set, doc=r"""EventStream0TransferOverflow""")
    EventStream0TransferOverflowTimestamp = property(_PySpin._SWIG_CamPtr_EventStream0TransferOverflowTimestamp_get, _PySpin._SWIG_CamPtr_EventStream0TransferOverflowTimestamp_set, doc=r"""EventStream0TransferOverflowTimestamp""")
    EventStream0TransferOverflowFrameID = property(_PySpin._SWIG_CamPtr_EventStream0TransferOverflowFrameID_get, _PySpin._SWIG_CamPtr_EventStream0TransferOverflowFrameID_set, doc=r"""EventStream0TransferOverflowFrameID""")
    EventSequencerSetChange = property(_PySpin._SWIG_CamPtr_EventSequencerSetChange_get, _PySpin._SWIG_CamPtr_EventSequencerSetChange_set, doc=r"""EventSequencerSetChange""")
    EventSequencerSetChangeTimestamp = property(_PySpin._SWIG_CamPtr_EventSequencerSetChangeTimestamp_get, _PySpin._SWIG_CamPtr_EventSequencerSetChangeTimestamp_set, doc=r"""EventSequencerSetChangeTimestamp""")
    EventSequencerSetChangeFrameID = property(_PySpin._SWIG_CamPtr_EventSequencerSetChangeFrameID_get, _PySpin._SWIG_CamPtr_EventSequencerSetChangeFrameID_set, doc=r"""EventSequencerSetChangeFrameID""")
    EventCounter0Start = property(_PySpin._SWIG_CamPtr_EventCounter0Start_get, _PySpin._SWIG_CamPtr_EventCounter0Start_set, doc=r"""EventCounter0Start""")
    EventCounter0StartTimestamp = property(_PySpin._SWIG_CamPtr_EventCounter0StartTimestamp_get, _PySpin._SWIG_CamPtr_EventCounter0StartTimestamp_set, doc=r"""EventCounter0StartTimestamp""")
    EventCounter0StartFrameID = property(_PySpin._SWIG_CamPtr_EventCounter0StartFrameID_get, _PySpin._SWIG_CamPtr_EventCounter0StartFrameID_set, doc=r"""EventCounter0StartFrameID""")
    EventCounter1Start = property(_PySpin._SWIG_CamPtr_EventCounter1Start_get, _PySpin._SWIG_CamPtr_EventCounter1Start_set, doc=r"""EventCounter1Start""")
    EventCounter1StartTimestamp = property(_PySpin._SWIG_CamPtr_EventCounter1StartTimestamp_get, _PySpin._SWIG_CamPtr_EventCounter1StartTimestamp_set, doc=r"""EventCounter1StartTimestamp""")
    EventCounter1StartFrameID = property(_PySpin._SWIG_CamPtr_EventCounter1StartFrameID_get, _PySpin._SWIG_CamPtr_EventCounter1StartFrameID_set, doc=r"""EventCounter1StartFrameID""")
    EventCounter0End = property(_PySpin._SWIG_CamPtr_EventCounter0End_get, _PySpin._SWIG_CamPtr_EventCounter0End_set, doc=r"""EventCounter0End""")
    EventCounter0EndTimestamp = property(_PySpin._SWIG_CamPtr_EventCounter0EndTimestamp_get, _PySpin._SWIG_CamPtr_EventCounter0EndTimestamp_set, doc=r"""EventCounter0EndTimestamp""")
    EventCounter0EndFrameID = property(_PySpin._SWIG_CamPtr_EventCounter0EndFrameID_get, _PySpin._SWIG_CamPtr_EventCounter0EndFrameID_set, doc=r"""EventCounter0EndFrameID""")
    EventCounter1End = property(_PySpin._SWIG_CamPtr_EventCounter1End_get, _PySpin._SWIG_CamPtr_EventCounter1End_set, doc=r"""EventCounter1End""")
    EventCounter1EndTimestamp = property(_PySpin._SWIG_CamPtr_EventCounter1EndTimestamp_get, _PySpin._SWIG_CamPtr_EventCounter1EndTimestamp_set, doc=r"""EventCounter1EndTimestamp""")
    EventCounter1EndFrameID = property(_PySpin._SWIG_CamPtr_EventCounter1EndFrameID_get, _PySpin._SWIG_CamPtr_EventCounter1EndFrameID_set, doc=r"""EventCounter1EndFrameID""")
    EventTimer0Start = property(_PySpin._SWIG_CamPtr_EventTimer0Start_get, _PySpin._SWIG_CamPtr_EventTimer0Start_set, doc=r"""EventTimer0Start""")
    EventTimer0StartTimestamp = property(_PySpin._SWIG_CamPtr_EventTimer0StartTimestamp_get, _PySpin._SWIG_CamPtr_EventTimer0StartTimestamp_set, doc=r"""EventTimer0StartTimestamp""")
    EventTimer0StartFrameID = property(_PySpin._SWIG_CamPtr_EventTimer0StartFrameID_get, _PySpin._SWIG_CamPtr_EventTimer0StartFrameID_set, doc=r"""EventTimer0StartFrameID""")
    EventTimer1Start = property(_PySpin._SWIG_CamPtr_EventTimer1Start_get, _PySpin._SWIG_CamPtr_EventTimer1Start_set, doc=r"""EventTimer1Start""")
    EventTimer1StartTimestamp = property(_PySpin._SWIG_CamPtr_EventTimer1StartTimestamp_get, _PySpin._SWIG_CamPtr_EventTimer1StartTimestamp_set, doc=r"""EventTimer1StartTimestamp""")
    EventTimer1StartFrameID = property(_PySpin._SWIG_CamPtr_EventTimer1StartFrameID_get, _PySpin._SWIG_CamPtr_EventTimer1StartFrameID_set, doc=r"""EventTimer1StartFrameID""")
    EventTimer0End = property(_PySpin._SWIG_CamPtr_EventTimer0End_get, _PySpin._SWIG_CamPtr_EventTimer0End_set, doc=r"""EventTimer0End""")
    EventTimer0EndTimestamp = property(_PySpin._SWIG_CamPtr_EventTimer0EndTimestamp_get, _PySpin._SWIG_CamPtr_EventTimer0EndTimestamp_set, doc=r"""EventTimer0EndTimestamp""")
    EventTimer0EndFrameID = property(_PySpin._SWIG_CamPtr_EventTimer0EndFrameID_get, _PySpin._SWIG_CamPtr_EventTimer0EndFrameID_set, doc=r"""EventTimer0EndFrameID""")
    EventTimer1End = property(_PySpin._SWIG_CamPtr_EventTimer1End_get, _PySpin._SWIG_CamPtr_EventTimer1End_set, doc=r"""EventTimer1End""")
    EventTimer1EndTimestamp = property(_PySpin._SWIG_CamPtr_EventTimer1EndTimestamp_get, _PySpin._SWIG_CamPtr_EventTimer1EndTimestamp_set, doc=r"""EventTimer1EndTimestamp""")
    EventTimer1EndFrameID = property(_PySpin._SWIG_CamPtr_EventTimer1EndFrameID_get, _PySpin._SWIG_CamPtr_EventTimer1EndFrameID_set, doc=r"""EventTimer1EndFrameID""")
    EventEncoder0Stopped = property(_PySpin._SWIG_CamPtr_EventEncoder0Stopped_get, _PySpin._SWIG_CamPtr_EventEncoder0Stopped_set, doc=r"""EventEncoder0Stopped""")
    EventEncoder0StoppedTimestamp = property(_PySpin._SWIG_CamPtr_EventEncoder0StoppedTimestamp_get, _PySpin._SWIG_CamPtr_EventEncoder0StoppedTimestamp_set, doc=r"""EventEncoder0StoppedTimestamp""")
    EventEncoder0StoppedFrameID = property(_PySpin._SWIG_CamPtr_EventEncoder0StoppedFrameID_get, _PySpin._SWIG_CamPtr_EventEncoder0StoppedFrameID_set, doc=r"""EventEncoder0StoppedFrameID""")
    EventEncoder1Stopped = property(_PySpin._SWIG_CamPtr_EventEncoder1Stopped_get, _PySpin._SWIG_CamPtr_EventEncoder1Stopped_set, doc=r"""EventEncoder1Stopped""")
    EventEncoder1StoppedTimestamp = property(_PySpin._SWIG_CamPtr_EventEncoder1StoppedTimestamp_get, _PySpin._SWIG_CamPtr_EventEncoder1StoppedTimestamp_set, doc=r"""EventEncoder1StoppedTimestamp""")
    EventEncoder1StoppedFrameID = property(_PySpin._SWIG_CamPtr_EventEncoder1StoppedFrameID_get, _PySpin._SWIG_CamPtr_EventEncoder1StoppedFrameID_set, doc=r"""EventEncoder1StoppedFrameID""")
    EventEncoder0Restarted = property(_PySpin._SWIG_CamPtr_EventEncoder0Restarted_get, _PySpin._SWIG_CamPtr_EventEncoder0Restarted_set, doc=r"""EventEncoder0Restarted""")
    EventEncoder0RestartedTimestamp = property(_PySpin._SWIG_CamPtr_EventEncoder0RestartedTimestamp_get, _PySpin._SWIG_CamPtr_EventEncoder0RestartedTimestamp_set, doc=r"""EventEncoder0RestartedTimestamp""")
    EventEncoder0RestartedFrameID = property(_PySpin._SWIG_CamPtr_EventEncoder0RestartedFrameID_get, _PySpin._SWIG_CamPtr_EventEncoder0RestartedFrameID_set, doc=r"""EventEncoder0RestartedFrameID""")
    EventEncoder1Restarted = property(_PySpin._SWIG_CamPtr_EventEncoder1Restarted_get, _PySpin._SWIG_CamPtr_EventEncoder1Restarted_set, doc=r"""EventEncoder1Restarted""")
    EventEncoder1RestartedTimestamp = property(_PySpin._SWIG_CamPtr_EventEncoder1RestartedTimestamp_get, _PySpin._SWIG_CamPtr_EventEncoder1RestartedTimestamp_set, doc=r"""EventEncoder1RestartedTimestamp""")
    EventEncoder1RestartedFrameID = property(_PySpin._SWIG_CamPtr_EventEncoder1RestartedFrameID_get, _PySpin._SWIG_CamPtr_EventEncoder1RestartedFrameID_set, doc=r"""EventEncoder1RestartedFrameID""")
    EventLine0RisingEdge = property(_PySpin._SWIG_CamPtr_EventLine0RisingEdge_get, _PySpin._SWIG_CamPtr_EventLine0RisingEdge_set, doc=r"""EventLine0RisingEdge""")
    EventLine0RisingEdgeTimestamp = property(_PySpin._SWIG_CamPtr_EventLine0RisingEdgeTimestamp_get, _PySpin._SWIG_CamPtr_EventLine0RisingEdgeTimestamp_set, doc=r"""EventLine0RisingEdgeTimestamp""")
    EventLine0RisingEdgeFrameID = property(_PySpin._SWIG_CamPtr_EventLine0RisingEdgeFrameID_get, _PySpin._SWIG_CamPtr_EventLine0RisingEdgeFrameID_set, doc=r"""EventLine0RisingEdgeFrameID""")
    EventLine1RisingEdge = property(_PySpin._SWIG_CamPtr_EventLine1RisingEdge_get, _PySpin._SWIG_CamPtr_EventLine1RisingEdge_set, doc=r"""EventLine1RisingEdge""")
    EventLine1RisingEdgeTimestamp = property(_PySpin._SWIG_CamPtr_EventLine1RisingEdgeTimestamp_get, _PySpin._SWIG_CamPtr_EventLine1RisingEdgeTimestamp_set, doc=r"""EventLine1RisingEdgeTimestamp""")
    EventLine1RisingEdgeFrameID = property(_PySpin._SWIG_CamPtr_EventLine1RisingEdgeFrameID_get, _PySpin._SWIG_CamPtr_EventLine1RisingEdgeFrameID_set, doc=r"""EventLine1RisingEdgeFrameID""")
    EventLine0FallingEdge = property(_PySpin._SWIG_CamPtr_EventLine0FallingEdge_get, _PySpin._SWIG_CamPtr_EventLine0FallingEdge_set, doc=r"""EventLine0FallingEdge""")
    EventLine0FallingEdgeTimestamp = property(_PySpin._SWIG_CamPtr_EventLine0FallingEdgeTimestamp_get, _PySpin._SWIG_CamPtr_EventLine0FallingEdgeTimestamp_set, doc=r"""EventLine0FallingEdgeTimestamp""")
    EventLine0FallingEdgeFrameID = property(_PySpin._SWIG_CamPtr_EventLine0FallingEdgeFrameID_get, _PySpin._SWIG_CamPtr_EventLine0FallingEdgeFrameID_set, doc=r"""EventLine0FallingEdgeFrameID""")
    EventLine1FallingEdge = property(_PySpin._SWIG_CamPtr_EventLine1FallingEdge_get, _PySpin._SWIG_CamPtr_EventLine1FallingEdge_set, doc=r"""EventLine1FallingEdge""")
    EventLine1FallingEdgeTimestamp = property(_PySpin._SWIG_CamPtr_EventLine1FallingEdgeTimestamp_get, _PySpin._SWIG_CamPtr_EventLine1FallingEdgeTimestamp_set, doc=r"""EventLine1FallingEdgeTimestamp""")
    EventLine1FallingEdgeFrameID = property(_PySpin._SWIG_CamPtr_EventLine1FallingEdgeFrameID_get, _PySpin._SWIG_CamPtr_EventLine1FallingEdgeFrameID_set, doc=r"""EventLine1FallingEdgeFrameID""")
    EventLine0AnyEdge = property(_PySpin._SWIG_CamPtr_EventLine0AnyEdge_get, _PySpin._SWIG_CamPtr_EventLine0AnyEdge_set, doc=r"""EventLine0AnyEdge""")
    EventLine0AnyEdgeTimestamp = property(_PySpin._SWIG_CamPtr_EventLine0AnyEdgeTimestamp_get, _PySpin._SWIG_CamPtr_EventLine0AnyEdgeTimestamp_set, doc=r"""EventLine0AnyEdgeTimestamp""")
    EventLine0AnyEdgeFrameID = property(_PySpin._SWIG_CamPtr_EventLine0AnyEdgeFrameID_get, _PySpin._SWIG_CamPtr_EventLine0AnyEdgeFrameID_set, doc=r"""EventLine0AnyEdgeFrameID""")
    EventLine1AnyEdge = property(_PySpin._SWIG_CamPtr_EventLine1AnyEdge_get, _PySpin._SWIG_CamPtr_EventLine1AnyEdge_set, doc=r"""EventLine1AnyEdge""")
    EventLine1AnyEdgeTimestamp = property(_PySpin._SWIG_CamPtr_EventLine1AnyEdgeTimestamp_get, _PySpin._SWIG_CamPtr_EventLine1AnyEdgeTimestamp_set, doc=r"""EventLine1AnyEdgeTimestamp""")
    EventLine1AnyEdgeFrameID = property(_PySpin._SWIG_CamPtr_EventLine1AnyEdgeFrameID_get, _PySpin._SWIG_CamPtr_EventLine1AnyEdgeFrameID_set, doc=r"""EventLine1AnyEdgeFrameID""")
    EventLinkTrigger0 = property(_PySpin._SWIG_CamPtr_EventLinkTrigger0_get, _PySpin._SWIG_CamPtr_EventLinkTrigger0_set, doc=r"""EventLinkTrigger0""")
    EventLinkTrigger0Timestamp = property(_PySpin._SWIG_CamPtr_EventLinkTrigger0Timestamp_get, _PySpin._SWIG_CamPtr_EventLinkTrigger0Timestamp_set, doc=r"""EventLinkTrigger0Timestamp""")
    EventLinkTrigger0FrameID = property(_PySpin._SWIG_CamPtr_EventLinkTrigger0FrameID_get, _PySpin._SWIG_CamPtr_EventLinkTrigger0FrameID_set, doc=r"""EventLinkTrigger0FrameID""")
    EventLinkTrigger1 = property(_PySpin._SWIG_CamPtr_EventLinkTrigger1_get, _PySpin._SWIG_CamPtr_EventLinkTrigger1_set, doc=r"""EventLinkTrigger1""")
    EventLinkTrigger1Timestamp = property(_PySpin._SWIG_CamPtr_EventLinkTrigger1Timestamp_get, _PySpin._SWIG_CamPtr_EventLinkTrigger1Timestamp_set, doc=r"""EventLinkTrigger1Timestamp""")
    EventLinkTrigger1FrameID = property(_PySpin._SWIG_CamPtr_EventLinkTrigger1FrameID_get, _PySpin._SWIG_CamPtr_EventLinkTrigger1FrameID_set, doc=r"""EventLinkTrigger1FrameID""")
    EventActionLate = property(_PySpin._SWIG_CamPtr_EventActionLate_get, _PySpin._SWIG_CamPtr_EventActionLate_set, doc=r"""EventActionLate""")
    EventActionLateTimestamp = property(_PySpin._SWIG_CamPtr_EventActionLateTimestamp_get, _PySpin._SWIG_CamPtr_EventActionLateTimestamp_set, doc=r"""EventActionLateTimestamp""")
    EventActionLateFrameID = property(_PySpin._SWIG_CamPtr_EventActionLateFrameID_get, _PySpin._SWIG_CamPtr_EventActionLateFrameID_set, doc=r"""EventActionLateFrameID""")
    EventLinkSpeedChange = property(_PySpin._SWIG_CamPtr_EventLinkSpeedChange_get, _PySpin._SWIG_CamPtr_EventLinkSpeedChange_set, doc=r"""EventLinkSpeedChange""")
    EventLinkSpeedChangeTimestamp = property(_PySpin._SWIG_CamPtr_EventLinkSpeedChangeTimestamp_get, _PySpin._SWIG_CamPtr_EventLinkSpeedChangeTimestamp_set, doc=r"""EventLinkSpeedChangeTimestamp""")
    EventLinkSpeedChangeFrameID = property(_PySpin._SWIG_CamPtr_EventLinkSpeedChangeFrameID_get, _PySpin._SWIG_CamPtr_EventLinkSpeedChangeFrameID_set, doc=r"""EventLinkSpeedChangeFrameID""")
    FileAccessBuffer = property(_PySpin._SWIG_CamPtr_FileAccessBuffer_get, _PySpin._SWIG_CamPtr_FileAccessBuffer_set, doc=r"""FileAccessBuffer""")
    SourceCount = property(_PySpin._SWIG_CamPtr_SourceCount_get, _PySpin._SWIG_CamPtr_SourceCount_set, doc=r"""SourceCount""")
    SourceSelector = property(_PySpin._SWIG_CamPtr_SourceSelector_get, _PySpin._SWIG_CamPtr_SourceSelector_set, doc=r"""SourceSelector""")
    TransferSelector = property(_PySpin._SWIG_CamPtr_TransferSelector_get, _PySpin._SWIG_CamPtr_TransferSelector_set, doc=r"""TransferSelector""")
    TransferBurstCount = property(_PySpin._SWIG_CamPtr_TransferBurstCount_get, _PySpin._SWIG_CamPtr_TransferBurstCount_set, doc=r"""TransferBurstCount""")
    TransferAbort = property(_PySpin._SWIG_CamPtr_TransferAbort_get, _PySpin._SWIG_CamPtr_TransferAbort_set, doc=r"""TransferAbort""")
    TransferPause = property(_PySpin._SWIG_CamPtr_TransferPause_get, _PySpin._SWIG_CamPtr_TransferPause_set, doc=r"""TransferPause""")
    TransferResume = property(_PySpin._SWIG_CamPtr_TransferResume_get, _PySpin._SWIG_CamPtr_TransferResume_set, doc=r"""TransferResume""")
    TransferTriggerSelector = property(_PySpin._SWIG_CamPtr_TransferTriggerSelector_get, _PySpin._SWIG_CamPtr_TransferTriggerSelector_set, doc=r"""TransferTriggerSelector""")
    TransferTriggerMode = property(_PySpin._SWIG_CamPtr_TransferTriggerMode_get, _PySpin._SWIG_CamPtr_TransferTriggerMode_set, doc=r"""TransferTriggerMode""")
    TransferTriggerSource = property(_PySpin._SWIG_CamPtr_TransferTriggerSource_get, _PySpin._SWIG_CamPtr_TransferTriggerSource_set, doc=r"""TransferTriggerSource""")
    TransferTriggerActivation = property(_PySpin._SWIG_CamPtr_TransferTriggerActivation_get, _PySpin._SWIG_CamPtr_TransferTriggerActivation_set, doc=r"""TransferTriggerActivation""")
    TransferStatusSelector = property(_PySpin._SWIG_CamPtr_TransferStatusSelector_get, _PySpin._SWIG_CamPtr_TransferStatusSelector_set, doc=r"""TransferStatusSelector""")
    TransferStatus = property(_PySpin._SWIG_CamPtr_TransferStatus_get, _PySpin._SWIG_CamPtr_TransferStatus_set, doc=r"""TransferStatus""")
    TransferComponentSelector = property(_PySpin._SWIG_CamPtr_TransferComponentSelector_get, _PySpin._SWIG_CamPtr_TransferComponentSelector_set, doc=r"""TransferComponentSelector""")
    TransferStreamChannel = property(_PySpin._SWIG_CamPtr_TransferStreamChannel_get, _PySpin._SWIG_CamPtr_TransferStreamChannel_set, doc=r"""TransferStreamChannel""")
    Scan3dDistanceUnit = property(_PySpin._SWIG_CamPtr_Scan3dDistanceUnit_get, _PySpin._SWIG_CamPtr_Scan3dDistanceUnit_set, doc=r"""Scan3dDistanceUnit""")
    Scan3dCoordinateSystem = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateSystem_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateSystem_set, doc=r"""Scan3dCoordinateSystem""")
    Scan3dOutputMode = property(_PySpin._SWIG_CamPtr_Scan3dOutputMode_get, _PySpin._SWIG_CamPtr_Scan3dOutputMode_set, doc=r"""Scan3dOutputMode""")
    Scan3dCoordinateSystemReference = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateSystemReference_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateSystemReference_set, doc=r"""Scan3dCoordinateSystemReference""")
    Scan3dCoordinateSelector = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateSelector_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateSelector_set, doc=r"""Scan3dCoordinateSelector""")
    Scan3dCoordinateScale = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateScale_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateScale_set, doc=r"""Scan3dCoordinateScale""")
    Scan3dCoordinateOffset = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateOffset_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateOffset_set, doc=r"""Scan3dCoordinateOffset""")
    Scan3dInvalidDataFlag = property(_PySpin._SWIG_CamPtr_Scan3dInvalidDataFlag_get, _PySpin._SWIG_CamPtr_Scan3dInvalidDataFlag_set, doc=r"""Scan3dInvalidDataFlag""")
    Scan3dInvalidDataValue = property(_PySpin._SWIG_CamPtr_Scan3dInvalidDataValue_get, _PySpin._SWIG_CamPtr_Scan3dInvalidDataValue_set, doc=r"""Scan3dInvalidDataValue""")
    Scan3dAxisMin = property(_PySpin._SWIG_CamPtr_Scan3dAxisMin_get, _PySpin._SWIG_CamPtr_Scan3dAxisMin_set, doc=r"""Scan3dAxisMin""")
    Scan3dAxisMax = property(_PySpin._SWIG_CamPtr_Scan3dAxisMax_get, _PySpin._SWIG_CamPtr_Scan3dAxisMax_set, doc=r"""Scan3dAxisMax""")
    Scan3dCoordinateTransformSelector = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateTransformSelector_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateTransformSelector_set, doc=r"""Scan3dCoordinateTransformSelector""")
    Scan3dTransformValue = property(_PySpin._SWIG_CamPtr_Scan3dTransformValue_get, _PySpin._SWIG_CamPtr_Scan3dTransformValue_set, doc=r"""Scan3dTransformValue""")
    Scan3dCoordinateReferenceSelector = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateReferenceSelector_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateReferenceSelector_set, doc=r"""Scan3dCoordinateReferenceSelector""")
    Scan3dCoordinateReferenceValue = property(_PySpin._SWIG_CamPtr_Scan3dCoordinateReferenceValue_get, _PySpin._SWIG_CamPtr_Scan3dCoordinateReferenceValue_set, doc=r"""Scan3dCoordinateReferenceValue""")
    ChunkPartSelector = property(_PySpin._SWIG_CamPtr_ChunkPartSelector_get, _PySpin._SWIG_CamPtr_ChunkPartSelector_set, doc=r"""ChunkPartSelector""")
    ChunkImageComponent = property(_PySpin._SWIG_CamPtr_ChunkImageComponent_get, _PySpin._SWIG_CamPtr_ChunkImageComponent_set, doc=r"""ChunkImageComponent""")
    ChunkPixelDynamicRangeMin = property(_PySpin._SWIG_CamPtr_ChunkPixelDynamicRangeMin_get, _PySpin._SWIG_CamPtr_ChunkPixelDynamicRangeMin_set, doc=r"""ChunkPixelDynamicRangeMin""")
    ChunkPixelDynamicRangeMax = property(_PySpin._SWIG_CamPtr_ChunkPixelDynamicRangeMax_get, _PySpin._SWIG_CamPtr_ChunkPixelDynamicRangeMax_set, doc=r"""ChunkPixelDynamicRangeMax""")
    ChunkTimestampLatchValue = property(_PySpin._SWIG_CamPtr_ChunkTimestampLatchValue_get, _PySpin._SWIG_CamPtr_ChunkTimestampLatchValue_set, doc=r"""ChunkTimestampLatchValue""")
    ChunkLineStatusAll = property(_PySpin._SWIG_CamPtr_ChunkLineStatusAll_get, _PySpin._SWIG_CamPtr_ChunkLineStatusAll_set, doc=r"""ChunkLineStatusAll""")
    ChunkCounterSelector = property(_PySpin._SWIG_CamPtr_ChunkCounterSelector_get, _PySpin._SWIG_CamPtr_ChunkCounterSelector_set, doc=r"""ChunkCounterSelector""")
    ChunkCounterValue = property(_PySpin._SWIG_CamPtr_ChunkCounterValue_get, _PySpin._SWIG_CamPtr_ChunkCounterValue_set, doc=r"""ChunkCounterValue""")
    ChunkTimerSelector = property(_PySpin._SWIG_CamPtr_ChunkTimerSelector_get, _PySpin._SWIG_CamPtr_ChunkTimerSelector_set, doc=r"""ChunkTimerSelector""")
    ChunkTimerValue = property(_PySpin._SWIG_CamPtr_ChunkTimerValue_get, _PySpin._SWIG_CamPtr_ChunkTimerValue_set, doc=r"""ChunkTimerValue""")
    ChunkEncoderSelector = property(_PySpin._SWIG_CamPtr_ChunkEncoderSelector_get, _PySpin._SWIG_CamPtr_ChunkEncoderSelector_set, doc=r"""ChunkEncoderSelector""")
    ChunkScanLineSelector = property(_PySpin._SWIG_CamPtr_ChunkScanLineSelector_get, _PySpin._SWIG_CamPtr_ChunkScanLineSelector_set, doc=r"""ChunkScanLineSelector""")
    ChunkEncoderValue = property(_PySpin._SWIG_CamPtr_ChunkEncoderValue_get, _PySpin._SWIG_CamPtr_ChunkEncoderValue_set, doc=r"""ChunkEncoderValue""")
    ChunkEncoderStatus = property(_PySpin._SWIG_CamPtr_ChunkEncoderStatus_get, _PySpin._SWIG_CamPtr_ChunkEncoderStatus_set, doc=r"""ChunkEncoderStatus""")
    ChunkExposureTimeSelector = property(_PySpin._SWIG_CamPtr_ChunkExposureTimeSelector_get, _PySpin._SWIG_CamPtr_ChunkExposureTimeSelector_set, doc=r"""ChunkExposureTimeSelector""")
    ChunkLinePitch = property(_PySpin._SWIG_CamPtr_ChunkLinePitch_get, _PySpin._SWIG_CamPtr_ChunkLinePitch_set, doc=r"""ChunkLinePitch""")
    ChunkSourceID = property(_PySpin._SWIG_CamPtr_ChunkSourceID_get, _PySpin._SWIG_CamPtr_ChunkSourceID_set, doc=r"""ChunkSourceID""")
    ChunkRegionID = property(_PySpin._SWIG_CamPtr_ChunkRegionID_get, _PySpin._SWIG_CamPtr_ChunkRegionID_set, doc=r"""ChunkRegionID""")
    ChunkTransferBlockID = property(_PySpin._SWIG_CamPtr_ChunkTransferBlockID_get, _PySpin._SWIG_CamPtr_ChunkTransferBlockID_set, doc=r"""ChunkTransferBlockID""")
    ChunkTransferStreamID = property(_PySpin._SWIG_CamPtr_ChunkTransferStreamID_get, _PySpin._SWIG_CamPtr_ChunkTransferStreamID_set, doc=r"""ChunkTransferStreamID""")
    ChunkTransferQueueCurrentBlockCount = property(_PySpin._SWIG_CamPtr_ChunkTransferQueueCurrentBlockCount_get, _PySpin._SWIG_CamPtr_ChunkTransferQueueCurrentBlockCount_set, doc=r"""ChunkTransferQueueCurrentBlockCount""")
    ChunkStreamChannelID = property(_PySpin._SWIG_CamPtr_ChunkStreamChannelID_get, _PySpin._SWIG_CamPtr_ChunkStreamChannelID_set, doc=r"""ChunkStreamChannelID""")
    ChunkScan3dDistanceUnit = property(_PySpin._SWIG_CamPtr_ChunkScan3dDistanceUnit_get, _PySpin._SWIG_CamPtr_ChunkScan3dDistanceUnit_set, doc=r"""ChunkScan3dDistanceUnit""")
    ChunkScan3dOutputMode = property(_PySpin._SWIG_CamPtr_ChunkScan3dOutputMode_get, _PySpin._SWIG_CamPtr_ChunkScan3dOutputMode_set, doc=r"""ChunkScan3dOutputMode""")
    ChunkScan3dCoordinateSystem = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateSystem_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateSystem_set, doc=r"""ChunkScan3dCoordinateSystem""")
    ChunkScan3dCoordinateSystemReference = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateSystemReference_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateSystemReference_set, doc=r"""ChunkScan3dCoordinateSystemReference""")
    ChunkScan3dCoordinateSelector = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateSelector_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateSelector_set, doc=r"""ChunkScan3dCoordinateSelector""")
    ChunkScan3dCoordinateScale = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateScale_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateScale_set, doc=r"""ChunkScan3dCoordinateScale""")
    ChunkScan3dCoordinateOffset = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateOffset_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateOffset_set, doc=r"""ChunkScan3dCoordinateOffset""")
    ChunkScan3dInvalidDataFlag = property(_PySpin._SWIG_CamPtr_ChunkScan3dInvalidDataFlag_get, _PySpin._SWIG_CamPtr_ChunkScan3dInvalidDataFlag_set, doc=r"""ChunkScan3dInvalidDataFlag""")
    ChunkScan3dInvalidDataValue = property(_PySpin._SWIG_CamPtr_ChunkScan3dInvalidDataValue_get, _PySpin._SWIG_CamPtr_ChunkScan3dInvalidDataValue_set, doc=r"""ChunkScan3dInvalidDataValue""")
    ChunkScan3dAxisMin = property(_PySpin._SWIG_CamPtr_ChunkScan3dAxisMin_get, _PySpin._SWIG_CamPtr_ChunkScan3dAxisMin_set, doc=r"""ChunkScan3dAxisMin""")
    ChunkScan3dAxisMax = property(_PySpin._SWIG_CamPtr_ChunkScan3dAxisMax_get, _PySpin._SWIG_CamPtr_ChunkScan3dAxisMax_set, doc=r"""ChunkScan3dAxisMax""")
    ChunkScan3dCoordinateTransformSelector = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateTransformSelector_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateTransformSelector_set, doc=r"""ChunkScan3dCoordinateTransformSelector""")
    ChunkScan3dTransformValue = property(_PySpin._SWIG_CamPtr_ChunkScan3dTransformValue_get, _PySpin._SWIG_CamPtr_ChunkScan3dTransformValue_set, doc=r"""ChunkScan3dTransformValue""")
    ChunkScan3dCoordinateReferenceSelector = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateReferenceSelector_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateReferenceSelector_set, doc=r"""ChunkScan3dCoordinateReferenceSelector""")
    ChunkScan3dCoordinateReferenceValue = property(_PySpin._SWIG_CamPtr_ChunkScan3dCoordinateReferenceValue_get, _PySpin._SWIG_CamPtr_ChunkScan3dCoordinateReferenceValue_set, doc=r"""ChunkScan3dCoordinateReferenceValue""")
    TestPendingAck = property(_PySpin._SWIG_CamPtr_TestPendingAck_get, _PySpin._SWIG_CamPtr_TestPendingAck_set, doc=r"""TestPendingAck""")
    DeviceTapGeometry = property(_PySpin._SWIG_CamPtr_DeviceTapGeometry_get, _PySpin._SWIG_CamPtr_DeviceTapGeometry_set, doc=r"""DeviceTapGeometry""")
    GevPhysicalLinkConfiguration = property(_PySpin._SWIG_CamPtr_GevPhysicalLinkConfiguration_get, _PySpin._SWIG_CamPtr_GevPhysicalLinkConfiguration_set, doc=r"""GevPhysicalLinkConfiguration""")
    GevCurrentPhysicalLinkConfiguration = property(_PySpin._SWIG_CamPtr_GevCurrentPhysicalLinkConfiguration_get, _PySpin._SWIG_CamPtr_GevCurrentPhysicalLinkConfiguration_set, doc=r"""GevCurrentPhysicalLinkConfiguration""")
    GevActiveLinkCount = property(_PySpin._SWIG_CamPtr_GevActiveLinkCount_get, _PySpin._SWIG_CamPtr_GevActiveLinkCount_set, doc=r"""GevActiveLinkCount""")
    GevPAUSEFrameReception = property(_PySpin._SWIG_CamPtr_GevPAUSEFrameReception_get, _PySpin._SWIG_CamPtr_GevPAUSEFrameReception_set, doc=r"""GevPAUSEFrameReception""")
    GevPAUSEFrameTransmission = property(_PySpin._SWIG_CamPtr_GevPAUSEFrameTransmission_get, _PySpin._SWIG_CamPtr_GevPAUSEFrameTransmission_set, doc=r"""GevPAUSEFrameTransmission""")
    GevIPConfigurationStatus = property(_PySpin._SWIG_CamPtr_GevIPConfigurationStatus_get, _PySpin._SWIG_CamPtr_GevIPConfigurationStatus_set, doc=r"""GevIPConfigurationStatus""")
    GevDiscoveryAckDelay = property(_PySpin._SWIG_CamPtr_GevDiscoveryAckDelay_get, _PySpin._SWIG_CamPtr_GevDiscoveryAckDelay_set, doc=r"""GevDiscoveryAckDelay""")
    GevGVCPExtendedStatusCodesSelector = property(_PySpin._SWIG_CamPtr_GevGVCPExtendedStatusCodesSelector_get, _PySpin._SWIG_CamPtr_GevGVCPExtendedStatusCodesSelector_set, doc=r"""GevGVCPExtendedStatusCodesSelector""")
    GevGVCPExtendedStatusCodes = property(_PySpin._SWIG_CamPtr_GevGVCPExtendedStatusCodes_get, _PySpin._SWIG_CamPtr_GevGVCPExtendedStatusCodes_set, doc=r"""GevGVCPExtendedStatusCodes""")
    GevPrimaryApplicationSwitchoverKey = property(_PySpin._SWIG_CamPtr_GevPrimaryApplicationSwitchoverKey_get, _PySpin._SWIG_CamPtr_GevPrimaryApplicationSwitchoverKey_set, doc=r"""GevPrimaryApplicationSwitchoverKey""")
    GevGVSPExtendedIDMode = property(_PySpin._SWIG_CamPtr_GevGVSPExtendedIDMode_get, _PySpin._SWIG_CamPtr_GevGVSPExtendedIDMode_set, doc=r"""GevGVSPExtendedIDMode""")
    GevPrimaryApplicationSocket = property(_PySpin._SWIG_CamPtr_GevPrimaryApplicationSocket_get, _PySpin._SWIG_CamPtr_GevPrimaryApplicationSocket_set, doc=r"""GevPrimaryApplicationSocket""")
    GevPrimaryApplicationIPAddress = property(_PySpin._SWIG_CamPtr_GevPrimaryApplicationIPAddress_get, _PySpin._SWIG_CamPtr_GevPrimaryApplicationIPAddress_set, doc=r"""GevPrimaryApplicationIPAddress""")
    GevSCCFGPacketResendDestination = property(_PySpin._SWIG_CamPtr_GevSCCFGPacketResendDestination_get, _PySpin._SWIG_CamPtr_GevSCCFGPacketResendDestination_set, doc=r"""GevSCCFGPacketResendDestination""")
    GevSCCFGAllInTransmission = property(_PySpin._SWIG_CamPtr_GevSCCFGAllInTransmission_get, _PySpin._SWIG_CamPtr_GevSCCFGAllInTransmission_set, doc=r"""GevSCCFGAllInTransmission""")
    GevSCZoneCount = property(_PySpin._SWIG_CamPtr_GevSCZoneCount_get, _PySpin._SWIG_CamPtr_GevSCZoneCount_set, doc=r"""GevSCZoneCount""")
    GevSCZoneDirectionAll = property(_PySpin._SWIG_CamPtr_GevSCZoneDirectionAll_get, _PySpin._SWIG_CamPtr_GevSCZoneDirectionAll_set, doc=r"""GevSCZoneDirectionAll""")
    GevSCZoneConfigurationLock = property(_PySpin._SWIG_CamPtr_GevSCZoneConfigurationLock_get, _PySpin._SWIG_CamPtr_GevSCZoneConfigurationLock_set, doc=r"""GevSCZoneConfigurationLock""")
    aPAUSEMACCtrlFramesTransmitted = property(_PySpin._SWIG_CamPtr_aPAUSEMACCtrlFramesTransmitted_get, _PySpin._SWIG_CamPtr_aPAUSEMACCtrlFramesTransmitted_set, doc=r"""aPAUSEMACCtrlFramesTransmitted""")
    aPAUSEMACCtrlFramesReceived = property(_PySpin._SWIG_CamPtr_aPAUSEMACCtrlFramesReceived_get, _PySpin._SWIG_CamPtr_aPAUSEMACCtrlFramesReceived_set, doc=r"""aPAUSEMACCtrlFramesReceived""")
    ClConfiguration = property(_PySpin._SWIG_CamPtr_ClConfiguration_get, _PySpin._SWIG_CamPtr_ClConfiguration_set, doc=r"""ClConfiguration""")
    ClTimeSlotsCount = property(_PySpin._SWIG_CamPtr_ClTimeSlotsCount_get, _PySpin._SWIG_CamPtr_ClTimeSlotsCount_set, doc=r"""ClTimeSlotsCount""")
    CxpLinkConfigurationStatus = property(_PySpin._SWIG_CamPtr_CxpLinkConfigurationStatus_get, _PySpin._SWIG_CamPtr_CxpLinkConfigurationStatus_set, doc=r"""CxpLinkConfigurationStatus""")
    CxpLinkConfigurationPreferred = property(_PySpin._SWIG_CamPtr_CxpLinkConfigurationPreferred_get, _PySpin._SWIG_CamPtr_CxpLinkConfigurationPreferred_set, doc=r"""CxpLinkConfigurationPreferred""")
    CxpLinkConfiguration = property(_PySpin._SWIG_CamPtr_CxpLinkConfiguration_get, _PySpin._SWIG_CamPtr_CxpLinkConfiguration_set, doc=r"""CxpLinkConfiguration""")
    CxpConnectionSelector = property(_PySpin._SWIG_CamPtr_CxpConnectionSelector_get, _PySpin._SWIG_CamPtr_CxpConnectionSelector_set, doc=r"""CxpConnectionSelector""")
    CxpConnectionTestMode = property(_PySpin._SWIG_CamPtr_CxpConnectionTestMode_get, _PySpin._SWIG_CamPtr_CxpConnectionTestMode_set, doc=r"""CxpConnectionTestMode""")
    CxpConnectionTestErrorCount = property(_PySpin._SWIG_CamPtr_CxpConnectionTestErrorCount_get, _PySpin._SWIG_CamPtr_CxpConnectionTestErrorCount_set, doc=r"""CxpConnectionTestErrorCount""")
    CxpConnectionTestPacketCount = property(_PySpin._SWIG_CamPtr_CxpConnectionTestPacketCount_get, _PySpin._SWIG_CamPtr_CxpConnectionTestPacketCount_set, doc=r"""CxpConnectionTestPacketCount""")
    CxpPoCxpAuto = property(_PySpin._SWIG_CamPtr_CxpPoCxpAuto_get, _PySpin._SWIG_CamPtr_CxpPoCxpAuto_set, doc=r"""CxpPoCxpAuto""")
    CxpPoCxpTurnOff = property(_PySpin._SWIG_CamPtr_CxpPoCxpTurnOff_get, _PySpin._SWIG_CamPtr_CxpPoCxpTurnOff_set, doc=r"""CxpPoCxpTurnOff""")
    CxpPoCxpTripReset = property(_PySpin._SWIG_CamPtr_CxpPoCxpTripReset_get, _PySpin._SWIG_CamPtr_CxpPoCxpTripReset_set, doc=r"""CxpPoCxpTripReset""")
    CxpPoCxpStatus = property(_PySpin._SWIG_CamPtr_CxpPoCxpStatus_get, _PySpin._SWIG_CamPtr_CxpPoCxpStatus_set, doc=r"""CxpPoCxpStatus""")
    ChunkInferenceFrameId = property(_PySpin._SWIG_CamPtr_ChunkInferenceFrameId_get, _PySpin._SWIG_CamPtr_ChunkInferenceFrameId_set, doc=r"""ChunkInferenceFrameId""")
    ChunkInferenceResult = property(_PySpin._SWIG_CamPtr_ChunkInferenceResult_get, _PySpin._SWIG_CamPtr_ChunkInferenceResult_set, doc=r"""ChunkInferenceResult""")
    ChunkInferenceConfidence = property(_PySpin._SWIG_CamPtr_ChunkInferenceConfidence_get, _PySpin._SWIG_CamPtr_ChunkInferenceConfidence_set, doc=r"""ChunkInferenceConfidence""")
    ChunkInferenceBoundingBoxResult = property(_PySpin._SWIG_CamPtr_ChunkInferenceBoundingBoxResult_get, _PySpin._SWIG_CamPtr_ChunkInferenceBoundingBoxResult_set, doc=r"""ChunkInferenceBoundingBoxResult""")

    def DeInit(self):
        r"""
        DeInit(self)
        void
        Spinnaker::CameraBase::DeInit()

        Disconnect camera port and free GenICam node map and GUI XML. Do not
        call more functions that access the remote device such as
        WritePort/ReadPort after calling DeInit(); Events should also be
        unregistered before calling camera DeInit(). Otherwise an exception
        will be thrown in the DeInit() call and require the user to unregister
        events before the camera can be re-initialized again.

        See:   Init()

        See:   UnregisterEvent(Event & evtToUnregister) 
        """
        return _PySpin._SWIG_CamPtr_DeInit(self)

    def IsInitialized(self):
        r"""
        IsInitialized(self) -> bool
        bool
        Spinnaker::CameraBase::IsInitialized()

        Checks if camera is initialized. This function needs to return true in
        order to retrieve a valid NodeMap from the GetNodeMap() call.

        See:   GetNodeMap()

        If camera is initialized or not 
        """
        return _PySpin._SWIG_CamPtr_IsInitialized(self)

    def GetNodeMap(self):
        r"""
        GetNodeMap(self) -> INodeMap
        GenApi::INodeMap& Spinnaker::CameraBase::GetNodeMap() const

        Gets a reference to the node map that is generated from a GenICam XML
        file. The camera must be initialized by a call to Init() first before
        a node map reference can be successfully acquired.

        See:   Init()

        A reference to the INodeMap. 
        """
        return _PySpin._SWIG_CamPtr_GetNodeMap(self)

    def GetTLDeviceNodeMap(self):
        r"""
        GetTLDeviceNodeMap(self) -> INodeMap
        GenApi::INodeMap& Spinnaker::CameraBase::GetTLDeviceNodeMap() const

        Gets a reference to the node map that is generated from a GenICam XML
        file for the GenTL Device module. The camera does not need to be
        initialized before acquiring this node map.

        A reference to the INodeMap. 
        """
        return _PySpin._SWIG_CamPtr_GetTLDeviceNodeMap(self)

    def GetTLStreamNodeMap(self, streamIndex=0):
        r"""
        GetTLStreamNodeMap(self, streamIndex=0) -> INodeMap

        Parameters
        ----------
        streamIndex: uint64_t

        GenApi::INodeMap& Spinnaker::CameraBase::GetTLStreamNodeMap() const

        Gets a reference to the node map that is generated from a GenICam XML
        file for the GenTL Stream module. The camera does not need to be
        initialized before acquiring this node map.

        A reference to the INodeMap. 
        """
        return _PySpin._SWIG_CamPtr_GetTLStreamNodeMap(self, streamIndex)

    def GetAccessMode(self):
        r"""
        GetAccessMode(self) -> Spinnaker::GenApi::EAccessMode
        GenApi::EAccessMode Spinnaker::CameraBase::GetAccessMode() const

        Returns the access mode that the software has on the Camera. The
        camera does not need to be initialized before calling this function.

        See:   Init()

        An enumeration value indicating the access mode 
        """
        return _PySpin._SWIG_CamPtr_GetAccessMode(self)

    def BeginAcquisition(self):
        r"""
        BeginAcquisition(self)
        void
        Spinnaker::CameraBase::BeginAcquisition()

        Starts the image acquisition engine. The camera must be initialized
        via a call to Init() before starting an acquisition.

        See:   Init() 
        """
        return _PySpin._SWIG_CamPtr_BeginAcquisition(self)

    def EndAcquisition(self):
        r"""
        EndAcquisition(self)
        void
        Spinnaker::CameraBase::EndAcquisition()

        Stops the image acquisition engine. If EndAcquisition() is called
        without a prior call to BeginAcquisition() an error message "Camera
        is not started" will be thrown. All Images that were acquired using
        GetNextImage() need to be released first using image->Release() before
        calling EndAcquisition(). All buffers in the input pool and output
        queue will be discarded when EndAcquisition() is called.

        See:   Init()

        See:   BeginAcquisition()

        See:  GetNextImage( grabTimeout )

        See:  Image::Release() 
        """
        return _PySpin._SWIG_CamPtr_EndAcquisition(self)

    def GetBufferOwnership(self):
        r"""GetBufferOwnership(self) -> Spinnaker::BufferOwnership"""
        return _PySpin._SWIG_CamPtr_GetBufferOwnership(self)

    def SetBufferOwnership(self, mode):
        r"""
        SetBufferOwnership(self, mode)

        Parameters
        ----------
        mode: enum Spinnaker::BufferOwnership const

        """
        return _PySpin._SWIG_CamPtr_SetBufferOwnership(self, mode)

    def GetUserBufferCount(self):
        r"""GetUserBufferCount(self) -> uint64_t"""
        return _PySpin._SWIG_CamPtr_GetUserBufferCount(self)

    def GetUserBufferSize(self):
        r"""GetUserBufferSize(self) -> uint64_t"""
        return _PySpin._SWIG_CamPtr_GetUserBufferSize(self)

    def GetUserBufferTotalSize(self):
        r"""GetUserBufferTotalSize(self) -> uint64_t"""
        return _PySpin._SWIG_CamPtr_GetUserBufferTotalSize(self)

    def SetUserBuffers(self, *args):
        r"""
        SetUserBuffers(self, pMemBuffers, totalSize)

        Parameters
        ----------
        pMemBuffers: void *const
        totalSize: uint64_t

        SetUserBuffers(self, ppMemBuffers, bufferCount, bufferSize)

        Parameters
        ----------
        ppMemBuffers: void **const
        bufferCount: uint64_t const
        bufferSize: uint64_t const

        """
        return _PySpin._SWIG_CamPtr_SetUserBuffers(self, *args)

    def GetNextImage(self, *args):
        r"""
        GetNextImage(self, grabTimeout=EVENT_TIMEOUT_INFINITE, streamIndex=0) -> ImagePtr

        Parameters
        ----------
        grabTimeout: uint64_t
        streamIndex: uint64_t

        ImagePtr
        Spinnaker::CameraBase::GetNextImage(uint64_t
        grabTimeout=EVENT_TIMEOUT_INFINITE, uint64_t streamID=0)

        Gets the next image that was received by the transport layer. This
        function will block indefinitely until an image arrives. Most cameras
        support one stream so the default streamID is 0 but if a camera
        supports multiple streams the user can input the streamID to select
        from which stream to grab images

        See:   Init()

        See:   BeginAcquisition()

        See:   EndAcquisition()

        Parameters:
        -----------

        grabTimeout:  a 64bit value that represents a timeout in milliseconds

        streamID:  The stream to grab the image.

        pointer to an Image object 
        """
        return _PySpin._SWIG_CamPtr_GetNextImage(self, *args)

    def GetNextImageSync(self, *args):
        r"""
        GetNextImageSync(self, grabTimeout=EVENT_TIMEOUT_INFINITE) -> ImageList

        Parameters
        ----------
        grabTimeout: uint64_t

        """
        return _PySpin._SWIG_CamPtr_GetNextImageSync(self, *args)

    def GetUniqueID(self):
        r"""
        GetUniqueID(self) -> gcstring
        GenICam::gcstring Spinnaker::CameraBase::GetUniqueID()

        This returns a unique id string that identifies the camera. This is
        the camera serial number.

        string that uniquely identifies the camera (serial number) 
        """
        return _PySpin._SWIG_CamPtr_GetUniqueID(self)

    def IsStreaming(self):
        r"""
        IsStreaming(self) -> bool
        bool
        Spinnaker::CameraBase::IsStreaming() const

        Returns true if the camera is currently streaming or false if it is
        not.

        See:   Init()

        returns true if camera is streaming and false otherwise. 
        """
        return _PySpin._SWIG_CamPtr_IsStreaming(self)

    def GetGuiXml(self):
        r"""
        GetGuiXml(self) -> gcstring
        GenICam::gcstring Spinnaker::CameraBase::GetGuiXml() const

        Returns the GUI XML that can be passed into the Spinnaker GUI
        framework

        GenICam::gcstring that represents the uncompressed GUI XML file 
        """
        return _PySpin._SWIG_CamPtr_GetGuiXml(self)

    def RegisterEventHandler(self, *args):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &

        RegisterEventHandler(self, evtHandlerToRegister, eventName)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::DeviceEventHandler &
        eventName: Spinnaker::GenICam::gcstring const &

        RegisterEventHandler(self, evtHandlerToRegister, streamIndex)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::ImageEventHandler &
        streamIndex: uint64_t

        """
        return _PySpin._SWIG_CamPtr_RegisterEventHandler(self, *args)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin._SWIG_CamPtr_UnregisterEventHandler(self, evtHandlerToUnregister)

    def GetNumImagesInUse(self):
        r"""
        GetNumImagesInUse(self) -> unsigned int
        unsigned int Spinnaker::CameraBase::GetNumImagesInUse()

        Returns the number of images that are currently in use. Each of the
        images that are currently in use must be cleaned up with a call to
        image->Release() before calling system->ReleaseInstance().

        The number of images that needs to be cleaned up. 
        """
        return _PySpin._SWIG_CamPtr_GetNumImagesInUse(self)

    def GetNumDataStreams(self):
        r"""
        GetNumDataStreams(self) -> unsigned int
        unsigned int Spinnaker::CameraBase::GetNumDataStreams()

        Returns the number of streams that a device supports.

        The number of data streams 
        """
        return _PySpin._SWIG_CamPtr_GetNumDataStreams(self)

    def DiscoverMaxPacketSize(self):
        r"""
        DiscoverMaxPacketSize(self) -> unsigned int
        unsigned int Spinnaker::CameraBase::DiscoverMaxPacketSize()

        Returns the largest packet size that can be safely used on the
        interface that device is connected to

        The maximum packet size returned. 
        """
        return _PySpin._SWIG_CamPtr_DiscoverMaxPacketSize(self)

    def ForceIP(self):
        r"""ForceIP(self)"""
        return _PySpin._SWIG_CamPtr_ForceIP(self)
    TLDevice = property(_PySpin._SWIG_CamPtr_TLDevice_get, doc=r"""TLDevice""")
    TLStream = property(_PySpin._SWIG_CamPtr_TLStream_get, doc=r"""TLStream""")

    def ReadPort(self, iAddress):
        r"""
        ReadPort(self, iAddress) -> PyObject *

        Parameters
        ----------
        iAddress: uint64_t

        """
        return _PySpin._SWIG_CamPtr_ReadPort(self, iAddress)

    def WritePort(self, iAddress, pBuffer):
        r"""
        WritePort(self, iAddress, pBuffer)

        Parameters
        ----------
        iAddress: uint64_t
        pBuffer: uint32_t

        """
        return _PySpin._SWIG_CamPtr_WritePort(self, iAddress, pBuffer)

# Register _SWIG_CamPtr in _PySpin:
_PySpin._SWIG_CamPtr_swigregister(_SWIG_CamPtr)

class CameraPtr(_SWIG_CamPtr):
    r"""


    A reference tracked pointer to a camera object.

    C++ includes: CameraPtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> CameraPtr
        __init__(self, arg2) -> CameraPtr

        Parameters
        ----------
        arg2: int const

        __init__(self, arg2) -> CameraPtr

        Parameters
        ----------
        arg2: long const

        __init__(self, arg2) -> CameraPtr

        Parameters
        ----------
        arg2: std::nullptr_t const

        Spinnaker::CameraPtr::CameraPtr(const int)  throw () Default
        constructor. 
        """
        _PySpin.CameraPtr_swiginit(self, _PySpin.new_CameraPtr(*args))
    __swig_destroy__ = _PySpin.delete_CameraPtr

# Register CameraPtr in _PySpin:
_PySpin.CameraPtr_swigregister(CameraPtr)

class IImageList(object):
    r"""Proxy of C++ Spinnaker::IImageList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IImageList

    def GetSize(self):
        r"""GetSize(self) -> unsigned int"""
        return _PySpin.IImageList_GetSize(self)

    def GetByIndex(self, index):
        r"""
        GetByIndex(self, index) -> ImagePtr

        Parameters
        ----------
        index: unsigned int

        """
        return _PySpin.IImageList_GetByIndex(self, index)

    def GetByPixelFormat(self, pixelFormat):
        r"""
        GetByPixelFormat(self, pixelFormat) -> ImagePtr

        Parameters
        ----------
        pixelFormat: enum Spinnaker::PixelFormatEnums

        """
        return _PySpin.IImageList_GetByPixelFormat(self, pixelFormat)

    def Clear(self):
        r"""Clear(self)"""
        return _PySpin.IImageList_Clear(self)

    def RemoveByIndex(self, index):
        r"""
        RemoveByIndex(self, index)

        Parameters
        ----------
        index: unsigned int

        """
        return _PySpin.IImageList_RemoveByIndex(self, index)

    def RemoveByPixelFormat(self, pixelFormat):
        r"""
        RemoveByPixelFormat(self, pixelFormat)

        Parameters
        ----------
        pixelFormat: enum Spinnaker::PixelFormatEnums

        """
        return _PySpin.IImageList_RemoveByPixelFormat(self, pixelFormat)

    def Append(self, list):
        r"""
        Append(self, list)

        Parameters
        ----------
        list: Spinnaker::ImageList const &

        """
        return _PySpin.IImageList_Append(self, list)

    def Add(self, image):
        r"""
        Add(self, image)

        Parameters
        ----------
        image: Spinnaker::ImagePtr

        """
        return _PySpin.IImageList_Add(self, image)

    def Release(self):
        r"""Release(self)"""
        return _PySpin.IImageList_Release(self)

    def Save(self, filename):
        r"""
        Save(self, filename)

        Parameters
        ----------
        filename: char const *

        """
        return _PySpin.IImageList_Save(self, filename)

    def __getitem__(self, i):
        r"""
        __getitem__(self, i) -> ImagePtr

        Parameters
        ----------
        i: size_t

        """
        return _PySpin.IImageList___getitem__(self, i)

    def __len__(self):
        r"""__len__(self) -> size_t"""
        return _PySpin.IImageList___len__(self)

# Register IImageList in _PySpin:
_PySpin.IImageList_swigregister(IImageList)

class ImageList(IImageList):
    r"""Proxy of C++ Spinnaker::ImageList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ImageList

    def __init__(self, *args):
        r"""
        __init__(self) -> ImageList
        __init__(self, iface) -> ImageList

        Parameters
        ----------
        iface: Spinnaker::ImageList const &

        """
        if self.__class__ == ImageList:
            _self = None
        else:
            _self = self
        _PySpin.ImageList_swiginit(self, _PySpin.new_ImageList(_self, *args))

    def Release(self):
        r"""Release(self)"""
        return _PySpin.ImageList_Release(self)

    def GetSize(self):
        r"""GetSize(self) -> unsigned int"""
        return _PySpin.ImageList_GetSize(self)

    def GetByIndex(self, index):
        r"""
        GetByIndex(self, index) -> ImagePtr

        Parameters
        ----------
        index: unsigned int

        """
        return _PySpin.ImageList_GetByIndex(self, index)

    def GetByPixelFormat(self, pixelFormat):
        r"""
        GetByPixelFormat(self, pixelFormat) -> ImagePtr

        Parameters
        ----------
        pixelFormat: enum Spinnaker::PixelFormatEnums

        """
        return _PySpin.ImageList_GetByPixelFormat(self, pixelFormat)

    def Clear(self):
        r"""Clear(self)"""
        return _PySpin.ImageList_Clear(self)

    def Add(self, image):
        r"""
        Add(self, image)

        Parameters
        ----------
        image: Spinnaker::ImagePtr

        """
        return _PySpin.ImageList_Add(self, image)

    def RemoveByIndex(self, index):
        r"""
        RemoveByIndex(self, index)

        Parameters
        ----------
        index: unsigned int

        """
        return _PySpin.ImageList_RemoveByIndex(self, index)

    def RemoveByPixelFormat(self, pixelFormat):
        r"""
        RemoveByPixelFormat(self, pixelFormat)

        Parameters
        ----------
        pixelFormat: enum Spinnaker::PixelFormatEnums

        """
        return _PySpin.ImageList_RemoveByPixelFormat(self, pixelFormat)

    def Append(self, list):
        r"""
        Append(self, list)

        Parameters
        ----------
        list: Spinnaker::ImageList const &

        """
        return _PySpin.ImageList_Append(self, list)

    def Save(self, filename):
        r"""
        Save(self, filename)

        Parameters
        ----------
        filename: char const *

        """
        return _PySpin.ImageList_Save(self, filename)

    @staticmethod
    def Load(filename):
        r"""
        Load(filename) -> ImageList

        Parameters
        ----------
        filename: char const *

        """
        return _PySpin.ImageList_Load(filename)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_ImageList(self)
        return weakref.proxy(self)

# Register ImageList in _PySpin:
_PySpin.ImageList_swigregister(ImageList)

def ImageList_Load(filename):
    r"""
    ImageList_Load(filename) -> ImageList

    Parameters
    ----------
    filename: char const *

    """
    return _PySpin.ImageList_Load(filename)

class ICameraList(object):
    r"""Proxy of C++ Spinnaker::ICameraList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ICameraList

    def GetSize(self):
        r"""GetSize(self) -> unsigned int"""
        return _PySpin.ICameraList_GetSize(self)

    def GetByIndex(self, index):
        r"""
        GetByIndex(self, index) -> CameraPtr

        Parameters
        ----------
        index: unsigned int

        """
        return _PySpin.ICameraList_GetByIndex(self, index)

    def GetBySerial(self, serialNumber):
        r"""
        GetBySerial(self, serialNumber) -> CameraPtr

        Parameters
        ----------
        serialNumber: std::string

        """
        return _PySpin.ICameraList_GetBySerial(self, serialNumber)

    def GetByDeviceID(self, deviceID):
        r"""
        GetByDeviceID(self, deviceID) -> CameraPtr

        Parameters
        ----------
        deviceID: std::string

        """
        return _PySpin.ICameraList_GetByDeviceID(self, deviceID)

    def Clear(self):
        r"""Clear(self)"""
        return _PySpin.ICameraList_Clear(self)

    def Add(self, camera):
        r"""
        Add(self, camera)

        Parameters
        ----------
        camera: Spinnaker::CameraPtr

        """
        return _PySpin.ICameraList_Add(self, camera)

    def Remove(self, camera):
        r"""
        Remove(self, camera)

        Parameters
        ----------
        camera: Spinnaker::CameraPtr

        """
        return _PySpin.ICameraList_Remove(self, camera)

    def RemoveBySerial(self, serialNumber):
        r"""
        RemoveBySerial(self, serialNumber)

        Parameters
        ----------
        serialNumber: std::string

        """
        return _PySpin.ICameraList_RemoveBySerial(self, serialNumber)

    def RemoveByIndex(self, index):
        r"""
        RemoveByIndex(self, index)

        Parameters
        ----------
        index: unsigned int

        """
        return _PySpin.ICameraList_RemoveByIndex(self, index)

    def RemoveByDeviceID(self, deviceID):
        r"""
        RemoveByDeviceID(self, deviceID)

        Parameters
        ----------
        deviceID: std::string

        """
        return _PySpin.ICameraList_RemoveByDeviceID(self, deviceID)

    def Append(self, list):
        r"""
        Append(self, list)

        Parameters
        ----------
        list: Spinnaker::CameraList const &

        """
        return _PySpin.ICameraList_Append(self, list)

    def __getitem__(self, i):
        r"""
        __getitem__(self, i) -> CameraPtr

        Parameters
        ----------
        i: size_t

        """
        return _PySpin.ICameraList___getitem__(self, i)

    def __len__(self):
        r"""__len__(self) -> size_t"""
        return _PySpin.ICameraList___len__(self)

# Register ICameraList in _PySpin:
_PySpin.ICameraList_swigregister(ICameraList)

class CameraList(ICameraList):
    r"""


    Used to hold a list of camera objects.

    C++ includes: CameraList.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_CameraList

    def __init__(self, *args):
        r"""
        __init__(self) -> CameraList
        __init__(self, iface) -> CameraList

        Parameters
        ----------
        iface: Spinnaker::CameraList const &

        Spinnaker::CameraList::CameraList(const CameraList &iface)

        Copy constructor 
        """
        if self.__class__ == CameraList:
            _self = None
        else:
            _self = self
        _PySpin.CameraList_swiginit(self, _PySpin.new_CameraList(_self, *args))

    def GetSize(self):
        r"""
        GetSize(self) -> unsigned int
        int
        Spinnaker::CameraList::GetSize() const

        Returns the size of the camera list. The size is the number of Camera
        objects stored in the list.

        An integer that represents the list size. 
        """
        return _PySpin.CameraList_GetSize(self)

    def GetByIndex(self, index):
        r"""
        GetByIndex(self, index) -> CameraPtr

        Parameters
        ----------
        index: unsigned int

        CameraPtr
        Spinnaker::CameraList::GetByIndex(int index) const

        Returns a pointer to a camera object at the "index".

        Parameters:
        -----------

        index:  The index at which to retrieve the camera object

        A pointer to an camera object. 
        """
        return _PySpin.CameraList_GetByIndex(self, index)

    def GetBySerial(self, serialNumber):
        r"""
        GetBySerial(self, serialNumber) -> CameraPtr

        Parameters
        ----------
        serialNumber: std::string

        CameraPtr
        Spinnaker::CameraList::GetBySerial(std::string serialNumber) const

        Returns a pointer to a camera object with the specified serial number.

        Parameters:
        -----------

        serialNumber:  The serial number of the camera object to retrieve

        A pointer to an camera object. 
        """
        return _PySpin.CameraList_GetBySerial(self, serialNumber)

    def GetByDeviceID(self, deviceID):
        r"""
        GetByDeviceID(self, deviceID) -> CameraPtr

        Parameters
        ----------
        deviceID: std::string

        """
        return _PySpin.CameraList_GetByDeviceID(self, deviceID)

    def Clear(self):
        r"""
        Clear(self)
        void
        Spinnaker::CameraList::Clear()

        Clears the list of cameras and destroys their corresponding reference
        counted objects. This is necessary in order to clean up the parent
        interface. It is important that the camera list is destroyed or is
        cleared before calling system->ReleaseInstance() or else the call to
        system->ReleaseInstance() will result in an error message thrown that
        a reference to the camera is still held.

        See:   System:ReleaseInstance() 
        """
        return _PySpin.CameraList_Clear(self)

    def Add(self, camera):
        r"""
        Add(self, camera)

        Parameters
        ----------
        camera: Spinnaker::CameraPtr

        """
        return _PySpin.CameraList_Add(self, camera)

    def Remove(self, camera):
        r"""
        Remove(self, camera)

        Parameters
        ----------
        camera: Spinnaker::CameraPtr

        """
        return _PySpin.CameraList_Remove(self, camera)

    def RemoveByIndex(self, index):
        r"""
        RemoveByIndex(self, index)

        Parameters
        ----------
        index: unsigned int

        void
        Spinnaker::CameraList::RemoveByIndex(int index)

        Removes a camera at "index" and destroys its corresponding reference
        counted object.

        Parameters:
        -----------

        index:  The index at which to remove the Camera object 
        """
        return _PySpin.CameraList_RemoveByIndex(self, index)

    def RemoveBySerial(self, serialNumber):
        r"""
        RemoveBySerial(self, serialNumber)

        Parameters
        ----------
        serialNumber: std::string

        void
        Spinnaker::CameraList::RemoveBySerial(std::string serialNumber)

        Removes a camera using its serial number and destroys its
        corresponding reference counted object.

        Parameters:
        -----------

        serialNumber:  The serial number of the Camera object to remove 
        """
        return _PySpin.CameraList_RemoveBySerial(self, serialNumber)

    def RemoveByDeviceID(self, deviceID):
        r"""
        RemoveByDeviceID(self, deviceID)

        Parameters
        ----------
        deviceID: std::string

        """
        return _PySpin.CameraList_RemoveByDeviceID(self, deviceID)

    def Append(self, list):
        r"""
        Append(self, list)

        Parameters
        ----------
        list: Spinnaker::CameraList const &

        void
        Spinnaker::CameraList::Append(CameraList &otherList)

        Appends a camera list to the current list.

        Parameters:
        -----------

        otherList:  The other list to append to this list 
        """
        return _PySpin.CameraList_Append(self, list)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_CameraList(self)
        return weakref.proxy(self)

# Register CameraList in _PySpin:
_PySpin.CameraList_swigregister(CameraList)

class IInterface(object):
    r"""Proxy of C++ Spinnaker::IInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IInterface

    def GetCameras(self, updateCameras=True):
        r"""
        GetCameras(self, updateCameras=True) -> CameraList

        Parameters
        ----------
        updateCameras: bool

        """
        return _PySpin.IInterface_GetCameras(self, updateCameras)

    def UpdateCameras(self):
        r"""UpdateCameras(self) -> bool"""
        return _PySpin.IInterface_UpdateCameras(self)

    def GetTLNodeMap(self):
        r"""GetTLNodeMap(self) -> INodeMap"""
        return _PySpin.IInterface_GetTLNodeMap(self)

    def RegisterEventHandler(self, evtHandlerToRegister):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &

        """
        return _PySpin.IInterface_RegisterEventHandler(self, evtHandlerToRegister)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin.IInterface_UnregisterEventHandler(self, evtHandlerToUnregister)

    def IsInUse(self):
        r"""IsInUse(self) -> bool"""
        return _PySpin.IInterface_IsInUse(self)

    def SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0):
        r"""
        SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0)

        Parameters
        ----------
        deviceKey: unsigned int
        groupKey: unsigned int
        groupMask: unsigned int
        actionTime: unsigned long long
        pResultSize: unsigned int *
        results: Spinnaker::ActionCommandResult []

        """
        return _PySpin.IInterface_SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime, pResultSize, results)

    def IsValid(self):
        r"""IsValid(self) -> bool"""
        return _PySpin.IInterface_IsValid(self)
    TLInterface = property(_PySpin.IInterface_TLInterface_get, doc=r"""TLInterface""")

# Register IInterface in _PySpin:
_PySpin.IInterface_swigregister(IInterface)

class _SWIG_IFacePtr(object):
    r"""


    The base class of the SystemPtr, CameraPtr, InterfacePtr, ImagePtr and
    LoggingEventDataPtr objects.

    C++ includes: BasePtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete__SWIG_IFacePtr

    def __init__(self, *args):
        r"""
        __init__(self) -> _SWIG_IFacePtr
        __init__(self, other) -> _SWIG_IFacePtr

        Parameters
        ----------
        other: Spinnaker::BasePtr< Spinnaker::IInterface > const &

        Spinnaker::BasePtr< T, B >::BasePtr(const BasePtr &other)  throw ()
        """
        _PySpin._SWIG_IFacePtr_swiginit(self, _PySpin.new__SWIG_IFacePtr(*args))

    def __deref__(self):
        r"""__deref__(self) -> IInterface"""
        return _PySpin._SWIG_IFacePtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        virtual bool
        Spinnaker::BasePtr< T, B >::IsValid() const  throw () true if the
        pointer is valid 
        """
        return _PySpin._SWIG_IFacePtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin._SWIG_IFacePtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::IInterface > const &

        __eq__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_IFacePtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::IInterface > const &

        __ne__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_IFacePtr___ne__(self, *args)

    def get(self):
        r"""get(self) -> IInterface"""
        return _PySpin._SWIG_IFacePtr_get(self)

    def GetCameras(self, updateCameras=True):
        r"""
        GetCameras(self, updateCameras=True) -> CameraList

        Parameters
        ----------
        updateCameras: bool

        """
        return _PySpin._SWIG_IFacePtr_GetCameras(self, updateCameras)

    def UpdateCameras(self):
        r"""UpdateCameras(self) -> bool"""
        return _PySpin._SWIG_IFacePtr_UpdateCameras(self)

    def GetTLNodeMap(self):
        r"""GetTLNodeMap(self) -> INodeMap"""
        return _PySpin._SWIG_IFacePtr_GetTLNodeMap(self)

    def RegisterEventHandler(self, evtHandlerToRegister):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &

        """
        return _PySpin._SWIG_IFacePtr_RegisterEventHandler(self, evtHandlerToRegister)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin._SWIG_IFacePtr_UnregisterEventHandler(self, evtHandlerToUnregister)

    def IsInUse(self):
        r"""IsInUse(self) -> bool"""
        return _PySpin._SWIG_IFacePtr_IsInUse(self)

    def SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0):
        r"""
        SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0)

        Parameters
        ----------
        deviceKey: unsigned int
        groupKey: unsigned int
        groupMask: unsigned int
        actionTime: unsigned long long
        pResultSize: unsigned int *
        results: Spinnaker::ActionCommandResult []

        """
        return _PySpin._SWIG_IFacePtr_SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime, pResultSize, results)
    TLInterface = property(_PySpin._SWIG_IFacePtr_TLInterface_get, doc=r"""TLInterface""")

# Register _SWIG_IFacePtr in _PySpin:
_PySpin._SWIG_IFacePtr_swigregister(_SWIG_IFacePtr)

class InterfacePtr(_SWIG_IFacePtr):
    r"""


    A reference tracked pointer to the interface object.

    C++ includes: InterfacePtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> InterfacePtr
        __init__(self, arg2) -> InterfacePtr

        Parameters
        ----------
        arg2: int const

        __init__(self, arg2) -> InterfacePtr

        Parameters
        ----------
        arg2: long const

        __init__(self, arg2) -> InterfacePtr

        Parameters
        ----------
        arg2: std::nullptr_t const

        Spinnaker::InterfacePtr::InterfacePtr(const int)  throw () Default
        Constructor 
        """
        _PySpin.InterfacePtr_swiginit(self, _PySpin.new_InterfacePtr(*args))
    __swig_destroy__ = _PySpin.delete_InterfacePtr

# Register InterfacePtr in _PySpin:
_PySpin.InterfacePtr_swigregister(InterfacePtr)

class IInterfaceList(object):
    r"""Proxy of C++ Spinnaker::IInterfaceList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IInterfaceList

    def GetSize(self):
        r"""GetSize(self) -> unsigned int"""
        return _PySpin.IInterfaceList_GetSize(self)

    def GetByIndex(self, index):
        r"""
        GetByIndex(self, index) -> InterfacePtr

        Parameters
        ----------
        index: unsigned int

        """
        return _PySpin.IInterfaceList_GetByIndex(self, index)

    def Clear(self):
        r"""Clear(self)"""
        return _PySpin.IInterfaceList_Clear(self)

    def Add(self, iface):
        r"""
        Add(self, iface)

        Parameters
        ----------
        iface: Spinnaker::InterfacePtr

        """
        return _PySpin.IInterfaceList_Add(self, iface)

    def Remove(self, iface):
        r"""
        Remove(self, iface)

        Parameters
        ----------
        iface: Spinnaker::InterfacePtr

        """
        return _PySpin.IInterfaceList_Remove(self, iface)

    def Append(self, list):
        r"""
        Append(self, list)

        Parameters
        ----------
        list: Spinnaker::InterfaceList const *

        """
        return _PySpin.IInterfaceList_Append(self, list)

    def __getitem__(self, i):
        r"""
        __getitem__(self, i) -> InterfacePtr

        Parameters
        ----------
        i: size_t

        """
        return _PySpin.IInterfaceList___getitem__(self, i)

    def __len__(self):
        r"""__len__(self) -> size_t"""
        return _PySpin.IInterfaceList___len__(self)

# Register IInterfaceList in _PySpin:
_PySpin.IInterfaceList_swigregister(IInterfaceList)

class InterfaceList(IInterfaceList):
    r"""


    A list of the available interfaces on the system.

    C++ includes: InterfaceList.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_InterfaceList

    def __init__(self, *args):
        r"""
        __init__(self) -> InterfaceList
        __init__(self, iface) -> InterfaceList

        Parameters
        ----------
        iface: Spinnaker::InterfaceList const &

        Spinnaker::InterfaceList::InterfaceList(const InterfaceList &iface) 
        """
        if self.__class__ == InterfaceList:
            _self = None
        else:
            _self = self
        _PySpin.InterfaceList_swiginit(self, _PySpin.new_InterfaceList(_self, *args))

    def GetSize(self):
        r"""
        GetSize(self) -> unsigned int
        int
        Spinnaker::InterfaceList::GetSize() const

        Returns the size of the interface list. The size is the number of
        Interface objects stored in the list.

        An integer that represents the list size. 
        """
        return _PySpin.InterfaceList_GetSize(self)

    def GetByIndex(self, index):
        r"""
        GetByIndex(self, index) -> InterfacePtr

        Parameters
        ----------
        index: unsigned int

        InterfacePtr Spinnaker::InterfaceList::GetByIndex(int index) const

        Returns a pointer to an Interface object at the "index".

        Parameters:
        -----------

        index:  The index at which to retrieve the Interface object

        A pointer to an Interface object. 
        """
        return _PySpin.InterfaceList_GetByIndex(self, index)

    def GetByInterfaceID(self, interfaceID):
        r"""
        GetByInterfaceID(self, interfaceID) -> InterfacePtr

        Parameters
        ----------
        interfaceID: std::string

        """
        return _PySpin.InterfaceList_GetByInterfaceID(self, interfaceID)

    def Clear(self):
        r"""
        Clear(self)
        void
        Spinnaker::InterfaceList::Clear()

        Clears the list of interfaces and destroys their corresponding
        objects. It is important to first make sure there are no referenced
        cameras still in use before calling Clear(). If a camera on any of the
        interfaces is still in use this function will throw an exception. 
        """
        return _PySpin.InterfaceList_Clear(self)

    def Add(self, iface):
        r"""
        Add(self, iface)

        Parameters
        ----------
        iface: Spinnaker::InterfacePtr

        """
        return _PySpin.InterfaceList_Add(self, iface)

    def Remove(self, iface):
        r"""
        Remove(self, iface)

        Parameters
        ----------
        iface: Spinnaker::InterfacePtr

        """
        return _PySpin.InterfaceList_Remove(self, iface)

    def Append(self, list):
        r"""
        Append(self, list)

        Parameters
        ----------
        list: Spinnaker::InterfaceList const *

        """
        return _PySpin.InterfaceList_Append(self, list)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_InterfaceList(self)
        return weakref.proxy(self)

# Register InterfaceList in _PySpin:
_PySpin.InterfaceList_swigregister(InterfaceList)

class ISystem(object):
    r"""Proxy of C++ Spinnaker::ISystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ISystem

    def ReleaseInstance(self):
        r"""ReleaseInstance(self)"""
        return _PySpin.ISystem_ReleaseInstance(self)

    def GetInterfaces(self, updateInterface=True):
        r"""
        GetInterfaces(self, updateInterface=True) -> InterfaceList

        Parameters
        ----------
        updateInterface: bool

        """
        return _PySpin.ISystem_GetInterfaces(self, updateInterface)

    def UpdateInterfaceList(self):
        r"""UpdateInterfaceList(self)"""
        return _PySpin.ISystem_UpdateInterfaceList(self)

    def GetCameras(self, updateInterfaces=True, updateCameras=True):
        r"""
        GetCameras(self, updateInterfaces=True, updateCameras=True) -> CameraList

        Parameters
        ----------
        updateInterfaces: bool
        updateCameras: bool

        """
        return _PySpin.ISystem_GetCameras(self, updateInterfaces, updateCameras)

    def UpdateCameras(self, updateInterfaces=True):
        r"""
        UpdateCameras(self, updateInterfaces=True) -> bool

        Parameters
        ----------
        updateInterfaces: bool

        """
        return _PySpin.ISystem_UpdateCameras(self, updateInterfaces)

    def RegisterEventHandler(self, evtHandlerToRegister, updateInterface=False):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister, updateInterface=False)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &
        updateInterface: bool

        """
        return _PySpin.ISystem_RegisterEventHandler(self, evtHandlerToRegister, updateInterface)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin.ISystem_UnregisterEventHandler(self, evtHandlerToUnregister)

    def RegisterLoggingEventHandler(self, handler):
        r"""
        RegisterLoggingEventHandler(self, handler)

        Parameters
        ----------
        handler: Spinnaker::LoggingEventHandler &

        """
        return _PySpin.ISystem_RegisterLoggingEventHandler(self, handler)

    def UnregisterAllLoggingEventHandlers(self):
        r"""UnregisterAllLoggingEventHandlers(self)"""
        return _PySpin.ISystem_UnregisterAllLoggingEventHandlers(self)

    def UnregisterLoggingEventHandler(self, handler):
        r"""
        UnregisterLoggingEventHandler(self, handler)

        Parameters
        ----------
        handler: Spinnaker::LoggingEventHandler &

        """
        return _PySpin.ISystem_UnregisterLoggingEventHandler(self, handler)

    def SetLoggingEventPriorityLevel(self, level):
        r"""
        SetLoggingEventPriorityLevel(self, level)

        Parameters
        ----------
        level: enum Spinnaker::SpinnakerLogLevel

        """
        return _PySpin.ISystem_SetLoggingEventPriorityLevel(self, level)

    def GetLoggingEventPriorityLevel(self):
        r"""GetLoggingEventPriorityLevel(self) -> Spinnaker::SpinnakerLogLevel"""
        return _PySpin.ISystem_GetLoggingEventPriorityLevel(self)

    def IsInUse(self):
        r"""IsInUse(self) -> bool"""
        return _PySpin.ISystem_IsInUse(self)

    def SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0):
        r"""
        SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0)

        Parameters
        ----------
        deviceKey: unsigned int
        groupKey: unsigned int
        groupMask: unsigned int
        actionTime: unsigned long long
        pResultSize: unsigned int *
        results: Spinnaker::ActionCommandResult []

        """
        return _PySpin.ISystem_SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime, pResultSize, results)

    def GetLibraryVersion(self):
        r"""GetLibraryVersion(self) -> LibraryVersion"""
        return _PySpin.ISystem_GetLibraryVersion(self)

    def GetTLNodeMap(self):
        r"""GetTLNodeMap(self) -> INodeMap"""
        return _PySpin.ISystem_GetTLNodeMap(self)
    TLSystem = property(_PySpin.ISystem_TLSystem_get, doc=r"""TLSystem""")

# Register ISystem in _PySpin:
_PySpin.ISystem_swigregister(ISystem)

FLIR_SPINNAKER_VERSION_MAJOR = _PySpin.FLIR_SPINNAKER_VERSION_MAJOR

FLIR_SPINNAKER_VERSION_MINOR = _PySpin.FLIR_SPINNAKER_VERSION_MINOR

FLIR_SPINNAKER_VERSION_TYPE = _PySpin.FLIR_SPINNAKER_VERSION_TYPE

FLIR_SPINNAKER_VERSION_BUILD = _PySpin.FLIR_SPINNAKER_VERSION_BUILD

class System(ISystem):
    r"""


    The system object is used to retrieve the list of interfaces and
    cameras available.

    C++ includes: System.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetInstance():
        r"""GetInstance() -> SystemPtr"""
        return _PySpin.System_GetInstance()
    __swig_destroy__ = _PySpin.delete_System

    def ReleaseInstance(self):
        r"""
        ReleaseInstance(self)
        void
        Spinnaker::System::ReleaseInstance()

        This call releases the instance of the System Singleton for this
        process. After successfully releasing the System instance the pointer
        returned by GetInstance() will be invalid. Calling ReleaseInstance
        while a camera reference is still held will throw an error of type
        SPINNAKER_ERR_RESOURCE_IN_USE.

        See:  Error

        See:   GetInstance() 
        """
        return _PySpin.System_ReleaseInstance(self)

    def GetInterfaces(self, updateInterface=True):
        r"""
        GetInterfaces(self, updateInterface=True) -> InterfaceList

        Parameters
        ----------
        updateInterface: bool

        InterfaceList Spinnaker::System::GetInterfaces(bool
        updateInterface=true)

        Returns a list of interfaces available on the system. This call
        returns GigE and Usb2 and Usb3 interfaces.

        Parameters:
        -----------

        updateInterface:  Determines whether or not UpdateInterfaceList() is
        called before getting available interfaces

        An InterfaceList object that contains a list of all interfaces. 
        """
        return _PySpin.System_GetInterfaces(self, updateInterface)

    def UpdateInterfaceList(self):
        r"""UpdateInterfaceList(self)"""
        return _PySpin.System_UpdateInterfaceList(self)

    def GetCameras(self, updateInterfaces=True, updateCameras=True):
        r"""
        GetCameras(self, updateInterfaces=True, updateCameras=True) -> CameraList

        Parameters
        ----------
        updateInterfaces: bool
        updateCameras: bool

        CameraList
        Spinnaker::System::GetCameras(bool updateInterfaces=true, bool
        updateCameras=true)

        Returns a list of cameras that are available on the system. This call
        returns both GigE Vision and Usb3 Vision cameras from all interfaces.
        The camera list object will reference count the cameras it returns. It
        is important that the camera list is destroyed or is cleared before
        calling system-> ReleaseInstance() or else the call to system->
        ReleaseInstance() will result in an error message thrown that a
        reference to the camera is still held.

        See:   ReleaseInstance()

        See:   CameraList::Clear()

        Parameters:
        -----------

        updateInterfaces:  Determines whether or not updateInterfaceList() is
        called before getting cameras from available interfaces on the system

        updateCameras:  Determines whether or not UpdateCameras() is called
        before getting cameras from available interfaces on the system

        An CameraList object that contains a list of all cameras. 
        """
        return _PySpin.System_GetCameras(self, updateInterfaces, updateCameras)

    def UpdateCameras(self, updateInterfaces=True):
        r"""
        UpdateCameras(self, updateInterfaces=True) -> bool

        Parameters
        ----------
        updateInterfaces: bool

        bool
        Spinnaker::System::UpdateCameras(bool updateInterfaces=true)

        Updates the list of cameras on the system. Note that
        System::GetCameras() internally calls UpdateCameras() for each
        interface it enumerates. If the list changed between this call and the
        last time UpdateCameras was called then the return value will be true,
        otherwise it is false.

        See:   GetCameras()

        Parameters:
        -----------

        updateInterfaces:  Determines whether or not UpdateInterfaceList() is
        called before updating cameras for available interfaces on the system

        True if cameras changed on interface and false otherwise. 
        """
        return _PySpin.System_UpdateCameras(self, updateInterfaces)

    def RegisterEventHandler(self, evtHandlerToRegister, updateInterface=False):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister, updateInterface=False)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &
        updateInterface: bool

        """
        return _PySpin.System_RegisterEventHandler(self, evtHandlerToRegister, updateInterface)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin.System_UnregisterEventHandler(self, evtHandlerToUnregister)

    def RegisterLoggingEventHandler(self, handler):
        r"""
        RegisterLoggingEventHandler(self, handler)

        Parameters
        ----------
        handler: Spinnaker::LoggingEventHandler &

        """
        return _PySpin.System_RegisterLoggingEventHandler(self, handler)

    def UnregisterAllLoggingEventHandlers(self):
        r"""UnregisterAllLoggingEventHandlers(self)"""
        return _PySpin.System_UnregisterAllLoggingEventHandlers(self)

    def UnregisterLoggingEventHandler(self, handler):
        r"""
        UnregisterLoggingEventHandler(self, handler)

        Parameters
        ----------
        handler: Spinnaker::LoggingEventHandler &

        """
        return _PySpin.System_UnregisterLoggingEventHandler(self, handler)

    def SetLoggingEventPriorityLevel(self, level):
        r"""
        SetLoggingEventPriorityLevel(self, level)

        Parameters
        ----------
        level: enum Spinnaker::SpinnakerLogLevel

        void
        Spinnaker::System::SetLoggingEventPriorityLevel(SpinnakerLogLevel
        level)

        Sets a threshold priority level for logging event. Logging events
        below such level will not trigger callbacks.

        Spinnaker uses five levels of logging: Error - failures that are non-
        recoverable without user intervention.

        Warning - failures that are recoverable without user intervention.

        Notice - information about events such as camera arrival and removal,
        initialization and deinitialization, starting and stopping image
        acquisition, and feature modification.

        Info - information about recurring events that are generated regularly
        such as information on individual images.

        Debug - information that can be used to troubleshoot the system.

        See:  SpinnakerLogLevel

        Parameters:
        -----------

        level:  The threshold level 
        """
        return _PySpin.System_SetLoggingEventPriorityLevel(self, level)

    def GetLoggingEventPriorityLevel(self):
        r"""
        GetLoggingEventPriorityLevel(self) -> Spinnaker::SpinnakerLogLevel
        SpinnakerLogLevel Spinnaker::System::GetLoggingEventPriorityLevel()

        Retrieves the current logging event priority level.

        Spinnaker uses five levels of logging: Error - failures that are non-
        recoverable without user intervention.

        Warning - failures that are recoverable without user intervention.

        Notice - information about events such as camera arrival and removal,
        initialization and deinitialization, starting and stopping image
        acquisition, and feature modification.

        Info - information about recurring events that are generated regularly
        such as information on individual images.

        Debug - information that can be used to troubleshoot the system.

        See:  SpinnakerLogLevel

        Level The threshold level 
        """
        return _PySpin.System_GetLoggingEventPriorityLevel(self)

    def IsInUse(self):
        r"""
        IsInUse(self) -> bool
        bool
        Spinnaker::System::IsInUse()

        Checks if the system is in use by any interface or camera objects.

        Returns true if the system is in use and false otherwise. 
        """
        return _PySpin.System_IsInUse(self)

    def SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0):
        r"""
        SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0)

        Parameters
        ----------
        deviceKey: unsigned int
        groupKey: unsigned int
        groupMask: unsigned int
        actionTime: unsigned long long
        pResultSize: unsigned int *
        results: Spinnaker::ActionCommandResult []

        void
        Spinnaker::System::SendActionCommand(unsigned int deviceKey, unsigned
        int groupKey, unsigned int groupMask, unsigned long long actionTime=0,
        unsigned int *pResultSize=0, ActionCommandResult results[]=NULL)

        Broadcast an Action Command to all devices on system

        Parameters:
        -----------

        deviceKey:  The Action Command's device key

        groupKey:  The Action Command's group key

        groupMask:  The Action Command's group mask

        actionTime:  (Optional) Time when to assert a future action. Zero
        means immediate action.

        pResultSize:  (Optional) The number of results in the results array.
        The value passed should be equal to the expected number of devices
        that acknowledge the command. Returns the number of received results.

        results:  (Optional) An Array with *pResultSize elements to hold the
        action command result status. The buffer is filled starting from index
        0. If received results are less than expected number of devices that
        acknowledge the command, remaining results are not changed. If
        received results are more than expected number of devices that
        acknowledge the command, extra results are ignored and not appended to
        array. This parameter is ignored if pResultSize is 0. Thus this
        parameter can be NULL if pResultSize is 0 or NULL. 
        """
        return _PySpin.System_SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime, pResultSize, results)

    def GetLibraryVersion(self):
        r"""GetLibraryVersion(self) -> LibraryVersion"""
        return _PySpin.System_GetLibraryVersion(self)

    def GetTLNodeMap(self):
        r"""GetTLNodeMap(self) -> INodeMap"""
        return _PySpin.System_GetTLNodeMap(self)

# Register System in _PySpin:
_PySpin.System_swigregister(System)

def System_GetInstance():
    r"""System_GetInstance() -> SystemPtr"""
    return _PySpin.System_GetInstance()

class _SWIG_SysPtr(object):
    r"""


    The base class of the SystemPtr, CameraPtr, InterfacePtr, ImagePtr and
    LoggingEventDataPtr objects.

    C++ includes: BasePtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete__SWIG_SysPtr

    def __init__(self, *args):
        r"""
        __init__(self) -> _SWIG_SysPtr
        __init__(self, other) -> _SWIG_SysPtr

        Parameters
        ----------
        other: Spinnaker::BasePtr< Spinnaker::ISystem > const &

        Spinnaker::BasePtr< T, B >::BasePtr(const BasePtr &other)  throw ()
        """
        _PySpin._SWIG_SysPtr_swiginit(self, _PySpin.new__SWIG_SysPtr(*args))

    def __deref__(self):
        r"""__deref__(self) -> ISystem"""
        return _PySpin._SWIG_SysPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        virtual bool
        Spinnaker::BasePtr< T, B >::IsValid() const  throw () true if the
        pointer is valid 
        """
        return _PySpin._SWIG_SysPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin._SWIG_SysPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::ISystem > const &

        __eq__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_SysPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::ISystem > const &

        __ne__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_SysPtr___ne__(self, *args)

    def get(self):
        r"""get(self) -> ISystem"""
        return _PySpin._SWIG_SysPtr_get(self)

    def ReleaseInstance(self):
        r"""ReleaseInstance(self)"""
        return _PySpin._SWIG_SysPtr_ReleaseInstance(self)

    def GetInterfaces(self, updateInterface=True):
        r"""
        GetInterfaces(self, updateInterface=True) -> InterfaceList

        Parameters
        ----------
        updateInterface: bool

        """
        return _PySpin._SWIG_SysPtr_GetInterfaces(self, updateInterface)

    def UpdateInterfaceList(self):
        r"""UpdateInterfaceList(self)"""
        return _PySpin._SWIG_SysPtr_UpdateInterfaceList(self)

    def GetCameras(self, updateInterfaces=True, updateCameras=True):
        r"""
        GetCameras(self, updateInterfaces=True, updateCameras=True) -> CameraList

        Parameters
        ----------
        updateInterfaces: bool
        updateCameras: bool

        """
        return _PySpin._SWIG_SysPtr_GetCameras(self, updateInterfaces, updateCameras)

    def UpdateCameras(self, updateInterfaces=True):
        r"""
        UpdateCameras(self, updateInterfaces=True) -> bool

        Parameters
        ----------
        updateInterfaces: bool

        """
        return _PySpin._SWIG_SysPtr_UpdateCameras(self, updateInterfaces)

    def RegisterEventHandler(self, evtHandlerToRegister, updateInterface=False):
        r"""
        RegisterEventHandler(self, evtHandlerToRegister, updateInterface=False)

        Parameters
        ----------
        evtHandlerToRegister: Spinnaker::EventHandler &
        updateInterface: bool

        """
        return _PySpin._SWIG_SysPtr_RegisterEventHandler(self, evtHandlerToRegister, updateInterface)

    def UnregisterEventHandler(self, evtHandlerToUnregister):
        r"""
        UnregisterEventHandler(self, evtHandlerToUnregister)

        Parameters
        ----------
        evtHandlerToUnregister: Spinnaker::EventHandler &

        """
        return _PySpin._SWIG_SysPtr_UnregisterEventHandler(self, evtHandlerToUnregister)

    def RegisterLoggingEventHandler(self, handler):
        r"""
        RegisterLoggingEventHandler(self, handler)

        Parameters
        ----------
        handler: Spinnaker::LoggingEventHandler &

        """
        return _PySpin._SWIG_SysPtr_RegisterLoggingEventHandler(self, handler)

    def UnregisterAllLoggingEventHandlers(self):
        r"""UnregisterAllLoggingEventHandlers(self)"""
        return _PySpin._SWIG_SysPtr_UnregisterAllLoggingEventHandlers(self)

    def UnregisterLoggingEventHandler(self, handler):
        r"""
        UnregisterLoggingEventHandler(self, handler)

        Parameters
        ----------
        handler: Spinnaker::LoggingEventHandler &

        """
        return _PySpin._SWIG_SysPtr_UnregisterLoggingEventHandler(self, handler)

    def SetLoggingEventPriorityLevel(self, level):
        r"""
        SetLoggingEventPriorityLevel(self, level)

        Parameters
        ----------
        level: enum Spinnaker::SpinnakerLogLevel

        """
        return _PySpin._SWIG_SysPtr_SetLoggingEventPriorityLevel(self, level)

    def GetLoggingEventPriorityLevel(self):
        r"""GetLoggingEventPriorityLevel(self) -> Spinnaker::SpinnakerLogLevel"""
        return _PySpin._SWIG_SysPtr_GetLoggingEventPriorityLevel(self)

    def IsInUse(self):
        r"""IsInUse(self) -> bool"""
        return _PySpin._SWIG_SysPtr_IsInUse(self)

    def SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0):
        r"""
        SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime=0, pResultSize=None, results=0)

        Parameters
        ----------
        deviceKey: unsigned int
        groupKey: unsigned int
        groupMask: unsigned int
        actionTime: unsigned long long
        pResultSize: unsigned int *
        results: Spinnaker::ActionCommandResult []

        """
        return _PySpin._SWIG_SysPtr_SendActionCommand(self, deviceKey, groupKey, groupMask, actionTime, pResultSize, results)

    def GetLibraryVersion(self):
        r"""GetLibraryVersion(self) -> LibraryVersion"""
        return _PySpin._SWIG_SysPtr_GetLibraryVersion(self)

    def GetTLNodeMap(self):
        r"""GetTLNodeMap(self) -> INodeMap"""
        return _PySpin._SWIG_SysPtr_GetTLNodeMap(self)
    TLSystem = property(_PySpin._SWIG_SysPtr_TLSystem_get, doc=r"""TLSystem""")

# Register _SWIG_SysPtr in _PySpin:
_PySpin._SWIG_SysPtr_swigregister(_SWIG_SysPtr)

class SystemPtr(_SWIG_SysPtr):
    r"""


    A reference tracked pointer to a system object.

    C++ includes: SystemPtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> SystemPtr
        __init__(self, arg2) -> SystemPtr

        Parameters
        ----------
        arg2: int const

        __init__(self, arg2) -> SystemPtr

        Parameters
        ----------
        arg2: long const

        __init__(self, arg2) -> SystemPtr

        Parameters
        ----------
        arg2: std::nullptr_t const

        Spinnaker::SystemPtr::SystemPtr(const int)

        Copy constructor. 
        """
        _PySpin.SystemPtr_swiginit(self, _PySpin.new_SystemPtr(*args))
    __swig_destroy__ = _PySpin.delete_SystemPtr

# Register SystemPtr in _PySpin:
_PySpin.SystemPtr_swigregister(SystemPtr)

class _SWIG_ImgPtr(object):
    r"""


    The base class of the SystemPtr, CameraPtr, InterfacePtr, ImagePtr and
    LoggingEventDataPtr objects.

    C++ includes: BasePtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete__SWIG_ImgPtr

    def __init__(self, *args):
        r"""
        __init__(self) -> _SWIG_ImgPtr
        __init__(self, other) -> _SWIG_ImgPtr

        Parameters
        ----------
        other: Spinnaker::BasePtr< Spinnaker::IImage > const &

        Spinnaker::BasePtr< T, B >::BasePtr(const BasePtr &other)  throw ()
        """
        _PySpin._SWIG_ImgPtr_swiginit(self, _PySpin.new__SWIG_ImgPtr(*args))

    def __deref__(self):
        r"""__deref__(self) -> IImage"""
        return _PySpin._SWIG_ImgPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        virtual bool
        Spinnaker::BasePtr< T, B >::IsValid() const  throw () true if the
        pointer is valid 
        """
        return _PySpin._SWIG_ImgPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin._SWIG_ImgPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::IImage > const &

        __eq__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_ImgPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::IImage > const &

        __ne__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_ImgPtr___ne__(self, *args)

    def get(self):
        r"""get(self) -> IImage"""
        return _PySpin._SWIG_ImgPtr_get(self)

    def GetColorProcessing(self):
        r"""GetColorProcessing(self) -> Spinnaker::ColorProcessingAlgorithm"""
        return _PySpin._SWIG_ImgPtr_GetColorProcessing(self)

    def ResetImage(self, *args):
        r"""
        ResetImage(self, width, height, offsetX, offsetY, pixelFormat)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums

        ResetImage(self, width, height, offsetX, offsetY, pixelFormat, pData)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *

        ResetImage(self, width, height, offsetX, offsetY, pixelFormat, pData, dataPayloadType, dataSize)

        Parameters
        ----------
        width: size_t
        height: size_t
        offsetX: size_t
        offsetY: size_t
        pixelFormat: enum Spinnaker::PixelFormatEnums
        pData: void *
        dataPayloadType: enum Spinnaker::TLPayloadType
        dataSize: size_t

        """
        return _PySpin._SWIG_ImgPtr_ResetImage(self, *args)

    def Release(self):
        r"""Release(self)"""
        return _PySpin._SWIG_ImgPtr_Release(self)

    def GetID(self):
        r"""GetID(self) -> uint64_t"""
        return _PySpin._SWIG_ImgPtr_GetID(self)

    def GetStreamIndex(self):
        r"""GetStreamIndex(self) -> uint64_t"""
        return _PySpin._SWIG_ImgPtr_GetStreamIndex(self)

    def GetData(self, *args):
        r"""
        GetData(self)
        GetData(self) -> PyObject *
        """
        return _PySpin._SWIG_ImgPtr_GetData(self, *args)

    def GetPrivateData(self):
        r"""GetPrivateData(self) -> void *"""
        return _PySpin._SWIG_ImgPtr_GetPrivateData(self)

    def GetDataAbsoluteMax(self):
        r"""GetDataAbsoluteMax(self) -> float"""
        return _PySpin._SWIG_ImgPtr_GetDataAbsoluteMax(self)

    def GetDataAbsoluteMin(self):
        r"""GetDataAbsoluteMin(self) -> float"""
        return _PySpin._SWIG_ImgPtr_GetDataAbsoluteMin(self)

    def GetBufferSize(self):
        r"""GetBufferSize(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetBufferSize(self)

    def DeepCopy(self, pSrcImage):
        r"""
        DeepCopy(self, pSrcImage)

        Parameters
        ----------
        pSrcImage: Spinnaker::ImagePtr const

        """
        return _PySpin._SWIG_ImgPtr_DeepCopy(self, pSrcImage)

    def GetWidth(self):
        r"""GetWidth(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetWidth(self)

    def GetHeight(self):
        r"""GetHeight(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetHeight(self)

    def GetStride(self):
        r"""GetStride(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetStride(self)

    def GetBitsPerPixel(self):
        r"""GetBitsPerPixel(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetBitsPerPixel(self)

    def GetNumChannels(self):
        r"""GetNumChannels(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetNumChannels(self)

    def GetXOffset(self):
        r"""GetXOffset(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetXOffset(self)

    def GetYOffset(self):
        r"""GetYOffset(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetYOffset(self)

    def GetXPadding(self):
        r"""GetXPadding(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetXPadding(self)

    def GetYPadding(self):
        r"""GetYPadding(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetYPadding(self)

    def GetFrameID(self):
        r"""GetFrameID(self) -> uint64_t"""
        return _PySpin._SWIG_ImgPtr_GetFrameID(self)

    def GetPayloadType(self):
        r"""GetPayloadType(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetPayloadType(self)

    def GetTLPayloadType(self):
        r"""GetTLPayloadType(self) -> Spinnaker::TLPayloadType"""
        return _PySpin._SWIG_ImgPtr_GetTLPayloadType(self)

    def GetTLPixelFormat(self):
        r"""GetTLPixelFormat(self) -> uint64_t"""
        return _PySpin._SWIG_ImgPtr_GetTLPixelFormat(self)

    def GetTLPixelFormatNamespace(self):
        r"""GetTLPixelFormatNamespace(self) -> Spinnaker::TLPixelFormatNamespace"""
        return _PySpin._SWIG_ImgPtr_GetTLPixelFormatNamespace(self)

    def GetPixelFormatName(self):
        r"""GetPixelFormatName(self) -> gcstring"""
        return _PySpin._SWIG_ImgPtr_GetPixelFormatName(self)

    def GetPixelFormat(self):
        r"""GetPixelFormat(self) -> Spinnaker::PixelFormatEnums"""
        return _PySpin._SWIG_ImgPtr_GetPixelFormat(self)

    def GetPixelFormatIntType(self):
        r"""GetPixelFormatIntType(self) -> Spinnaker::PixelFormatIntType"""
        return _PySpin._SWIG_ImgPtr_GetPixelFormatIntType(self)

    def IsIncomplete(self):
        r"""IsIncomplete(self) -> bool"""
        return _PySpin._SWIG_ImgPtr_IsIncomplete(self)

    def GetValidPayloadSize(self):
        r"""GetValidPayloadSize(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetValidPayloadSize(self)

    def GetChunkLayoutId(self):
        r"""GetChunkLayoutId(self) -> uint64_t"""
        return _PySpin._SWIG_ImgPtr_GetChunkLayoutId(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> uint64_t"""
        return _PySpin._SWIG_ImgPtr_GetTimeStamp(self)

    def Save(self, *args):
        r"""
        Save(self, pFilename, format=SPINNAKER_IMAGE_FILE_FORMAT_FROM_FILE_EXT)

        Parameters
        ----------
        pFilename: char const *
        format: enum Spinnaker::ImageFileFormat

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PNGOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PPMOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::PGMOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::TIFFOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::JPEGOption &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::JPG2Option &

        Save(self, pFilename, pOption)

        Parameters
        ----------
        pFilename: char const *
        pOption: Spinnaker::BMPOption &

        Save(self, pFilename, option)

        Parameters
        ----------
        pFilename: char const *
        option: Spinnaker::SIOption &

        """
        return _PySpin._SWIG_ImgPtr_Save(self, *args)

    def GetChunkData(self):
        r"""GetChunkData(self) -> ChunkData"""
        return _PySpin._SWIG_ImgPtr_GetChunkData(self)

    def CalculateStatistics(self, pStatistics):
        r"""
        CalculateStatistics(self, pStatistics)

        Parameters
        ----------
        pStatistics: Spinnaker::ImageStatistics &

        """
        return _PySpin._SWIG_ImgPtr_CalculateStatistics(self, pStatistics)

    def HasCRC(self):
        r"""HasCRC(self) -> bool"""
        return _PySpin._SWIG_ImgPtr_HasCRC(self)

    def HasChunkData(self):
        r"""HasChunkData(self) -> bool"""
        return _PySpin._SWIG_ImgPtr_HasChunkData(self)

    def CheckCRC(self):
        r"""CheckCRC(self) -> bool"""
        return _PySpin._SWIG_ImgPtr_CheckCRC(self)

    def GetImageSize(self):
        r"""GetImageSize(self) -> size_t"""
        return _PySpin._SWIG_ImgPtr_GetImageSize(self)

    def IsInUse(self):
        r"""IsInUse(self) -> bool"""
        return _PySpin._SWIG_ImgPtr_IsInUse(self)

    def GetImageStatus(self):
        r"""GetImageStatus(self) -> Spinnaker::ImageStatus"""
        return _PySpin._SWIG_ImgPtr_GetImageStatus(self)

    def IsCompressed(self):
        r"""IsCompressed(self) -> bool"""
        return _PySpin._SWIG_ImgPtr_IsCompressed(self)

    def CalculateChannelStatistics(self, channel):
        r"""
        CalculateChannelStatistics(self, channel) -> ChannelStatistics

        Parameters
        ----------
        channel: enum Spinnaker::StatisticsChannel

        """
        return _PySpin._SWIG_ImgPtr_CalculateChannelStatistics(self, channel)

    def GetNDArray(self):
        r"""GetNDArray(self) -> PyObject *"""
        return _PySpin._SWIG_ImgPtr_GetNDArray(self)

# Register _SWIG_ImgPtr in _PySpin:
_PySpin._SWIG_ImgPtr_swigregister(_SWIG_ImgPtr)

class ImagePtr(_SWIG_ImgPtr):
    r"""


    A reference tracked pointer to an image object. When the ImagePtr goes
    out of scope, it will trigger an auto release of the image from the
    stream.

    C++ includes: ImagePtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> ImagePtr
        __init__(self, arg2) -> ImagePtr

        Parameters
        ----------
        arg2: int const

        __init__(self, arg2) -> ImagePtr

        Parameters
        ----------
        arg2: long const

        __init__(self, arg2) -> ImagePtr

        Parameters
        ----------
        arg2: std::nullptr_t const

        Spinnaker::ImagePtr::ImagePtr(const int)

        Default constructor. 
        """
        _PySpin.ImagePtr_swiginit(self, _PySpin.new_ImagePtr(*args))
    __swig_destroy__ = _PySpin.delete_ImagePtr

# Register ImagePtr in _PySpin:
_PySpin.ImagePtr_swigregister(ImagePtr)

class _SWIG_LogPtr(object):
    r"""


    The base class of the SystemPtr, CameraPtr, InterfacePtr, ImagePtr and
    LoggingEventDataPtr objects.

    C++ includes: BasePtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete__SWIG_LogPtr

    def __init__(self, *args):
        r"""
        __init__(self) -> _SWIG_LogPtr
        __init__(self, other) -> _SWIG_LogPtr

        Parameters
        ----------
        other: Spinnaker::BasePtr< Spinnaker::LoggingEventData > const &

        Spinnaker::BasePtr< T, B >::BasePtr(const BasePtr &other)  throw ()
        """
        _PySpin._SWIG_LogPtr_swiginit(self, _PySpin.new__SWIG_LogPtr(*args))

    def __deref__(self):
        r"""__deref__(self) -> LoggingEventData"""
        return _PySpin._SWIG_LogPtr___deref__(self)

    def IsValid(self):
        r"""
        IsValid(self) -> bool
        virtual bool
        Spinnaker::BasePtr< T, B >::IsValid() const  throw () true if the
        pointer is valid 
        """
        return _PySpin._SWIG_LogPtr_IsValid(self)

    def __nonzero__(self):
        return _PySpin._SWIG_LogPtr___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, *args):
        r"""
        __eq__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::LoggingEventData > const &

        __eq__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __eq__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_LogPtr___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, rT) -> bool

        Parameters
        ----------
        rT: Spinnaker::BasePtr< Spinnaker::LoggingEventData > const &

        __ne__(self, arg2) -> bool

        Parameters
        ----------
        arg2: std::nullptr_t

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: int

        __ne__(self, nMustBeNull) -> bool

        Parameters
        ----------
        nMustBeNull: long

        """
        return _PySpin._SWIG_LogPtr___ne__(self, *args)

    def get(self):
        r"""get(self) -> LoggingEventData"""
        return _PySpin._SWIG_LogPtr_get(self)

    def GetCategoryName(self):
        r"""
        GetCategoryName(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetCategoryName()

        Gets the logging event category name.

        The category name 
        """
        return _PySpin._SWIG_LogPtr_GetCategoryName(self)

    def GetLogMessage(self):
        r"""
        GetLogMessage(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetLogMessage()

        Gets the logging event message.

        The log message 
        """
        return _PySpin._SWIG_LogPtr_GetLogMessage(self)

    def GetNDC(self):
        r"""
        GetNDC(self) -> char const *
        const
        char* Spinnaker::LoggingEventData::GetNDC()

        Gets the logging event's Nested Diagnostic Context (NDC).

        The log event's NDC 
        """
        return _PySpin._SWIG_LogPtr_GetNDC(self)

    def GetPriority(self):
        r"""
        GetPriority(self) -> int const
        const int Spinnaker::LoggingEventData::GetPriority()

        Gets the logging event priority.

        The log priority 
        """
        return _PySpin._SWIG_LogPtr_GetPriority(self)

    def GetThreadName(self):
        r"""
        GetThreadName(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetThreadName()

        Gets the logging event thread name.

        The thread name 
        """
        return _PySpin._SWIG_LogPtr_GetThreadName(self)

    def GetTimestamp(self):
        r"""
        GetTimestamp(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetTimestamp()

        Gets the logging event time stamp.

        The time stamp of the log 
        """
        return _PySpin._SWIG_LogPtr_GetTimestamp(self)

    def GetPriorityName(self):
        r"""
        GetPriorityName(self) -> char const *
        const char* Spinnaker::LoggingEventData::GetPriorityName()

        Gets the logging event priority name.

        The priority name of the log 
        """
        return _PySpin._SWIG_LogPtr_GetPriorityName(self)

# Register _SWIG_LogPtr in _PySpin:
_PySpin._SWIG_LogPtr_swigregister(_SWIG_LogPtr)

class LoggingEventDataPtr(_SWIG_LogPtr):
    r"""


    A reference tracked pointer to the LoggingEvent object.

    C++ includes: LoggingEventDataPtr.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> LoggingEventDataPtr
        __init__(self, arg2) -> LoggingEventDataPtr

        Parameters
        ----------
        arg2: int const

        __init__(self, arg2) -> LoggingEventDataPtr

        Parameters
        ----------
        arg2: long const

        __init__(self, arg2) -> LoggingEventDataPtr

        Parameters
        ----------
        arg2: std::nullptr_t const

        Spinnaker::LoggingEventDataPtr::LoggingEventDataPtr(const int)  throw
        () Default Constructor 
        """
        _PySpin.LoggingEventDataPtr_swiginit(self, _PySpin.new_LoggingEventDataPtr(*args))
    __swig_destroy__ = _PySpin.delete_LoggingEventDataPtr

# Register LoggingEventDataPtr in _PySpin:
_PySpin.LoggingEventDataPtr_swigregister(LoggingEventDataPtr)

class IDeviceArrivalEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::IDeviceArrivalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IDeviceArrivalEventHandler

    def OnDeviceArrival(self, pCamera):
        r"""
        OnDeviceArrival(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.IDeviceArrivalEventHandler_OnDeviceArrival(self, pCamera)

# Register IDeviceArrivalEventHandler in _PySpin:
_PySpin.IDeviceArrivalEventHandler_swigregister(IDeviceArrivalEventHandler)

class IDeviceEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::IDeviceEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IDeviceEventHandler

    def OnDeviceEvent(self, eventName):
        r"""
        OnDeviceEvent(self, eventName)

        Parameters
        ----------
        eventName: Spinnaker::GenICam::gcstring

        """
        return _PySpin.IDeviceEventHandler_OnDeviceEvent(self, eventName)

    def GetDeviceEventId(self):
        r"""GetDeviceEventId(self) -> uint64_t"""
        return _PySpin.IDeviceEventHandler_GetDeviceEventId(self)

    def GetDeviceEventName(self):
        r"""GetDeviceEventName(self) -> gcstring"""
        return _PySpin.IDeviceEventHandler_GetDeviceEventName(self)

# Register IDeviceEventHandler in _PySpin:
_PySpin.IDeviceEventHandler_swigregister(IDeviceEventHandler)

class IDeviceRemovalEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::IDeviceRemovalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IDeviceRemovalEventHandler

    def OnDeviceRemoval(self, pCamera):
        r"""
        OnDeviceRemoval(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.IDeviceRemovalEventHandler_OnDeviceRemoval(self, pCamera)

# Register IDeviceRemovalEventHandler in _PySpin:
_PySpin.IDeviceRemovalEventHandler_swigregister(IDeviceRemovalEventHandler)

class IImageEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::IImageEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IImageEventHandler

# Register IImageEventHandler in _PySpin:
_PySpin.IImageEventHandler_swigregister(IImageEventHandler)

class IImageListEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::IImageListEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IImageListEventHandler

# Register IImageListEventHandler in _PySpin:
_PySpin.IImageListEventHandler_swigregister(IImageListEventHandler)

class IInterfaceArrivalEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::IInterfaceArrivalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IInterfaceArrivalEventHandler

    def OnInterfaceArrival(self, pInterface):
        r"""
        OnInterfaceArrival(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.IInterfaceArrivalEventHandler_OnInterfaceArrival(self, pInterface)

# Register IInterfaceArrivalEventHandler in _PySpin:
_PySpin.IInterfaceArrivalEventHandler_swigregister(IInterfaceArrivalEventHandler)

class IInterfaceEventHandler(IDeviceArrivalEventHandler, IDeviceRemovalEventHandler):
    r"""Proxy of C++ Spinnaker::IInterfaceEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IInterfaceEventHandler

    def OnDeviceArrival(self, pCamera):
        r"""
        OnDeviceArrival(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.IInterfaceEventHandler_OnDeviceArrival(self, pCamera)

    def OnDeviceRemoval(self, pCamera):
        r"""
        OnDeviceRemoval(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.IInterfaceEventHandler_OnDeviceRemoval(self, pCamera)

# Register IInterfaceEventHandler in _PySpin:
_PySpin.IInterfaceEventHandler_swigregister(IInterfaceEventHandler)

class IInterfaceRemovalEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::IInterfaceRemovalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IInterfaceRemovalEventHandler

    def OnInterfaceRemoval(self, pInterface):
        r"""
        OnInterfaceRemoval(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.IInterfaceRemovalEventHandler_OnInterfaceRemoval(self, pInterface)

# Register IInterfaceRemovalEventHandler in _PySpin:
_PySpin.IInterfaceRemovalEventHandler_swigregister(IInterfaceRemovalEventHandler)

class ILoggingEventHandler(EventHandler):
    r"""Proxy of C++ Spinnaker::ILoggingEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ILoggingEventHandler

    def OnLogEvent(self, eventPtr):
        r"""
        OnLogEvent(self, eventPtr)

        Parameters
        ----------
        eventPtr: Spinnaker::LoggingEventDataPtr

        """
        return _PySpin.ILoggingEventHandler_OnLogEvent(self, eventPtr)

# Register ILoggingEventHandler in _PySpin:
_PySpin.ILoggingEventHandler_swigregister(ILoggingEventHandler)

class ISystemEventHandler(IInterfaceArrivalEventHandler, IInterfaceRemovalEventHandler):
    r"""Proxy of C++ Spinnaker::ISystemEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ISystemEventHandler

    def OnInterfaceArrival(self, pInterface):
        r"""
        OnInterfaceArrival(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.ISystemEventHandler_OnInterfaceArrival(self, pInterface)

    def OnInterfaceRemoval(self, pInterface):
        r"""
        OnInterfaceRemoval(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.ISystemEventHandler_OnInterfaceRemoval(self, pInterface)

# Register ISystemEventHandler in _PySpin:
_PySpin.ISystemEventHandler_swigregister(ISystemEventHandler)

class DeviceArrivalEventHandler(IDeviceArrivalEventHandler):
    r"""Proxy of C++ Spinnaker::DeviceArrivalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> DeviceArrivalEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == DeviceArrivalEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.DeviceArrivalEventHandler_swiginit(self, _PySpin.new_DeviceArrivalEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_DeviceArrivalEventHandler

    def OnDeviceArrival(self, pCamera):
        r"""
        OnDeviceArrival(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.DeviceArrivalEventHandler_OnDeviceArrival(self, pCamera)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_DeviceArrivalEventHandler(self)
        return weakref.proxy(self)

# Register DeviceArrivalEventHandler in _PySpin:
_PySpin.DeviceArrivalEventHandler_swigregister(DeviceArrivalEventHandler)

class DeviceEventHandler(IDeviceEventHandler):
    r"""Proxy of C++ Spinnaker::DeviceEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> DeviceEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == DeviceEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.DeviceEventHandler_swiginit(self, _PySpin.new_DeviceEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_DeviceEventHandler

    def OnDeviceEvent(self, eventName):
        r"""
        OnDeviceEvent(self, eventName)

        Parameters
        ----------
        eventName: Spinnaker::GenICam::gcstring

        """
        return _PySpin.DeviceEventHandler_OnDeviceEvent(self, eventName)

    def GetDeviceEventId(self):
        r"""GetDeviceEventId(self) -> uint64_t"""
        return _PySpin.DeviceEventHandler_GetDeviceEventId(self)

    def GetDeviceEventName(self):
        r"""GetDeviceEventName(self) -> gcstring"""
        return _PySpin.DeviceEventHandler_GetDeviceEventName(self)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_DeviceEventHandler(self)
        return weakref.proxy(self)

# Register DeviceEventHandler in _PySpin:
_PySpin.DeviceEventHandler_swigregister(DeviceEventHandler)

class DeviceRemovalEventHandler(IDeviceRemovalEventHandler):
    r"""Proxy of C++ Spinnaker::DeviceRemovalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> DeviceRemovalEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == DeviceRemovalEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.DeviceRemovalEventHandler_swiginit(self, _PySpin.new_DeviceRemovalEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_DeviceRemovalEventHandler

    def OnDeviceRemoval(self, pCamera):
        r"""
        OnDeviceRemoval(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.DeviceRemovalEventHandler_OnDeviceRemoval(self, pCamera)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_DeviceRemovalEventHandler(self)
        return weakref.proxy(self)

# Register DeviceRemovalEventHandler in _PySpin:
_PySpin.DeviceRemovalEventHandler_swigregister(DeviceRemovalEventHandler)

class ImageEventHandler(IImageEventHandler):
    r"""Proxy of C++ Spinnaker::ImageEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> ImageEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == ImageEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.ImageEventHandler_swiginit(self, _PySpin.new_ImageEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_ImageEventHandler

    def OnImageEvent(self, image):
        r"""
        OnImageEvent(self, image)

        Parameters
        ----------
        image: Spinnaker::ImagePtr

        """
        return _PySpin.ImageEventHandler_OnImageEvent(self, image)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_ImageEventHandler(self)
        return weakref.proxy(self)

# Register ImageEventHandler in _PySpin:
_PySpin.ImageEventHandler_swigregister(ImageEventHandler)

class ImageListEventHandler(IImageListEventHandler):
    r"""Proxy of C++ Spinnaker::ImageListEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> ImageListEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == ImageListEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.ImageListEventHandler_swiginit(self, _PySpin.new_ImageListEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_ImageListEventHandler

    def OnImageListEvent(self, imageList):
        r"""
        OnImageListEvent(self, imageList)

        Parameters
        ----------
        imageList: Spinnaker::ImageList

        """
        return _PySpin.ImageListEventHandler_OnImageListEvent(self, imageList)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_ImageListEventHandler(self)
        return weakref.proxy(self)

# Register ImageListEventHandler in _PySpin:
_PySpin.ImageListEventHandler_swigregister(ImageListEventHandler)

class InterfaceArrivalEventHandler(IInterfaceArrivalEventHandler):
    r"""Proxy of C++ Spinnaker::InterfaceArrivalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> InterfaceArrivalEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == InterfaceArrivalEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.InterfaceArrivalEventHandler_swiginit(self, _PySpin.new_InterfaceArrivalEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_InterfaceArrivalEventHandler

    def OnInterfaceArrival(self, pInterface):
        r"""
        OnInterfaceArrival(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.InterfaceArrivalEventHandler_OnInterfaceArrival(self, pInterface)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_InterfaceArrivalEventHandler(self)
        return weakref.proxy(self)

# Register InterfaceArrivalEventHandler in _PySpin:
_PySpin.InterfaceArrivalEventHandler_swigregister(InterfaceArrivalEventHandler)

class InterfaceEventHandler(IInterfaceEventHandler):
    r"""Proxy of C++ Spinnaker::InterfaceEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> InterfaceEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == InterfaceEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.InterfaceEventHandler_swiginit(self, _PySpin.new_InterfaceEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_InterfaceEventHandler

    def OnDeviceArrival(self, pCamera):
        r"""
        OnDeviceArrival(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.InterfaceEventHandler_OnDeviceArrival(self, pCamera)

    def OnDeviceRemoval(self, pCamera):
        r"""
        OnDeviceRemoval(self, pCamera)

        Parameters
        ----------
        pCamera: Spinnaker::CameraPtr

        """
        return _PySpin.InterfaceEventHandler_OnDeviceRemoval(self, pCamera)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_InterfaceEventHandler(self)
        return weakref.proxy(self)

# Register InterfaceEventHandler in _PySpin:
_PySpin.InterfaceEventHandler_swigregister(InterfaceEventHandler)

class InterfaceRemovalEventHandler(IInterfaceRemovalEventHandler):
    r"""Proxy of C++ Spinnaker::InterfaceRemovalEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> InterfaceRemovalEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == InterfaceRemovalEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.InterfaceRemovalEventHandler_swiginit(self, _PySpin.new_InterfaceRemovalEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_InterfaceRemovalEventHandler

    def OnInterfaceRemoval(self, pInterface):
        r"""
        OnInterfaceRemoval(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.InterfaceRemovalEventHandler_OnInterfaceRemoval(self, pInterface)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_InterfaceRemovalEventHandler(self)
        return weakref.proxy(self)

# Register InterfaceRemovalEventHandler in _PySpin:
_PySpin.InterfaceRemovalEventHandler_swigregister(InterfaceRemovalEventHandler)

class LoggingEventHandler(ILoggingEventHandler):
    r"""Proxy of C++ Spinnaker::LoggingEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> LoggingEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == LoggingEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.LoggingEventHandler_swiginit(self, _PySpin.new_LoggingEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_LoggingEventHandler

    def OnLogEvent(self, eventPtr):
        r"""
        OnLogEvent(self, eventPtr)

        Parameters
        ----------
        eventPtr: Spinnaker::LoggingEventDataPtr

        """
        return _PySpin.LoggingEventHandler_OnLogEvent(self, eventPtr)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_LoggingEventHandler(self)
        return weakref.proxy(self)

# Register LoggingEventHandler in _PySpin:
_PySpin.LoggingEventHandler_swigregister(LoggingEventHandler)

class SystemEventHandler(ISystemEventHandler):
    r"""Proxy of C++ Spinnaker::SystemEventHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> SystemEventHandler

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == SystemEventHandler:
            _self = None
        else:
            _self = self
        _PySpin.SystemEventHandler_swiginit(self, _PySpin.new_SystemEventHandler(_self, ))
    __swig_destroy__ = _PySpin.delete_SystemEventHandler

    def OnInterfaceArrival(self, pInterface):
        r"""
        OnInterfaceArrival(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.SystemEventHandler_OnInterfaceArrival(self, pInterface)

    def OnInterfaceRemoval(self, pInterface):
        r"""
        OnInterfaceRemoval(self, pInterface)

        Parameters
        ----------
        pInterface: Spinnaker::InterfacePtr

        """
        return _PySpin.SystemEventHandler_OnInterfaceRemoval(self, pInterface)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_SystemEventHandler(self)
        return weakref.proxy(self)

# Register SystemEventHandler in _PySpin:
_PySpin.SystemEventHandler_swigregister(SystemEventHandler)

class IImageProcessor(object):
    r"""Proxy of C++ Spinnaker::IImageProcessor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_IImageProcessor

    def SetColorProcessing(self, colorAlgorithm):
        r"""
        SetColorProcessing(self, colorAlgorithm)

        Parameters
        ----------
        colorAlgorithm: enum Spinnaker::ColorProcessingAlgorithm

        """
        return _PySpin.IImageProcessor_SetColorProcessing(self, colorAlgorithm)

    def GetColorProcessing(self):
        r"""GetColorProcessing(self) -> Spinnaker::ColorProcessingAlgorithm"""
        return _PySpin.IImageProcessor_GetColorProcessing(self)

    def SetNumDecompressionThreads(self, numThreads):
        r"""
        SetNumDecompressionThreads(self, numThreads)

        Parameters
        ----------
        numThreads: unsigned int

        """
        return _PySpin.IImageProcessor_SetNumDecompressionThreads(self, numThreads)

    def GetNumDecompressionThreads(self):
        r"""GetNumDecompressionThreads(self) -> unsigned int"""
        return _PySpin.IImageProcessor_GetNumDecompressionThreads(self)

    def Convert(self, *args):
        r"""
        Convert(self, srcImage, destFormat) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destFormat: enum Spinnaker::PixelFormatEnums

        Convert(self, srcImage, destImage, destFormat)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        destFormat: enum Spinnaker::PixelFormatEnums

        Convert(self, srcImageList, destFormat) -> ImagePtr

        Parameters
        ----------
        srcImageList: Spinnaker::ImageList const &
        destFormat: enum Spinnaker::PixelFormatEnums

        Convert(self, srcImageList, destImage, destFormat)

        Parameters
        ----------
        srcImageList: Spinnaker::ImageList const &
        destImage: Spinnaker::ImagePtr &
        destFormat: enum Spinnaker::PixelFormatEnums

        """
        return _PySpin.IImageProcessor_Convert(self, *args)

    def ApplyGamma(self, *args):
        r"""
        ApplyGamma(self, srcImage, gamma, isGammaInverse=False) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        gamma: float
        isGammaInverse: bool

        ApplyGamma(self, srcImage, destImage, gamma, isGammaInverse=False)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        gamma: float
        isGammaInverse: bool

        """
        return _PySpin.IImageProcessor_ApplyGamma(self, *args)

# Register IImageProcessor in _PySpin:
_PySpin.IImageProcessor_swigregister(IImageProcessor)

class ImageProcessor(IImageProcessor):
    r"""Proxy of C++ Spinnaker::ImageProcessor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PySpin.delete_ImageProcessor

    def __init__(self, *args):
        r"""
        __init__(self) -> ImageProcessor
        __init__(self, iface) -> ImageProcessor

        Parameters
        ----------
        iface: Spinnaker::ImageProcessor const &

        """
        if self.__class__ == ImageProcessor:
            _self = None
        else:
            _self = self
        _PySpin.ImageProcessor_swiginit(self, _PySpin.new_ImageProcessor(_self, *args))

    def SetColorProcessing(self, colorAlgorithm):
        r"""
        SetColorProcessing(self, colorAlgorithm)

        Parameters
        ----------
        colorAlgorithm: enum Spinnaker::ColorProcessingAlgorithm

        """
        return _PySpin.ImageProcessor_SetColorProcessing(self, colorAlgorithm)

    def GetColorProcessing(self):
        r"""GetColorProcessing(self) -> Spinnaker::ColorProcessingAlgorithm"""
        return _PySpin.ImageProcessor_GetColorProcessing(self)

    def SetNumDecompressionThreads(self, numThreads):
        r"""
        SetNumDecompressionThreads(self, numThreads)

        Parameters
        ----------
        numThreads: unsigned int

        """
        return _PySpin.ImageProcessor_SetNumDecompressionThreads(self, numThreads)

    def GetNumDecompressionThreads(self):
        r"""GetNumDecompressionThreads(self) -> unsigned int"""
        return _PySpin.ImageProcessor_GetNumDecompressionThreads(self)

    def Convert(self, *args):
        r"""
        Convert(self, srcImage, destFormat) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destFormat: enum Spinnaker::PixelFormatEnums

        Convert(self, srcImage, destImage, destFormat)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        destFormat: enum Spinnaker::PixelFormatEnums

        Convert(self, srcImageList, destFormat) -> ImagePtr

        Parameters
        ----------
        srcImageList: Spinnaker::ImageList const &
        destFormat: enum Spinnaker::PixelFormatEnums

        Convert(self, srcImageList, destImage, destFormat)

        Parameters
        ----------
        srcImageList: Spinnaker::ImageList const &
        destImage: Spinnaker::ImagePtr &
        destFormat: enum Spinnaker::PixelFormatEnums

        """
        return _PySpin.ImageProcessor_Convert(self, *args)

    def ApplyGamma(self, *args):
        r"""
        ApplyGamma(self, srcImage, gamma, applyGammaInverse=False) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        gamma: float
        applyGammaInverse: bool

        ApplyGamma(self, srcImage, destImage, gamma, applyGammaInverse=False)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        gamma: float
        applyGammaInverse: bool

        """
        return _PySpin.ImageProcessor_ApplyGamma(self, *args)
    def __disown__(self):
        self.this.disown()
        _PySpin.disown_ImageProcessor(self)
        return weakref.proxy(self)

# Register ImageProcessor in _PySpin:
_PySpin.ImageProcessor_swigregister(ImageProcessor)

class ImageUtility(object):
    r"""Proxy of C++ Spinnaker::ImageUtility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateScaled(*args):
        r"""
        CreateScaled(srcImage, scalingAlg, scalingFactor) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        scalingAlg: enum Spinnaker::ImageScalingAlgorithm
        scalingFactor: double

        CreateScaled(srcImage, destImage, scalingAlg, scalingFactor)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        scalingAlg: enum Spinnaker::ImageScalingAlgorithm
        scalingFactor: double

        """
        return _PySpin.ImageUtility_CreateScaled(*args)

    @staticmethod
    def CreateNormalized(*args):
        r"""
        CreateNormalized(srcImage, destPixelFormat, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destPixelFormat: enum Spinnaker::PixelFormatEnums const
        srcDataRange: enum Spinnaker::SourceDataRange

        CreateNormalized(srcImage, min, max, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        min: double const
        max: double const
        srcDataRange: enum Spinnaker::SourceDataRange

        CreateNormalized(srcImage, min, max, destPixelFormat, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        min: double const
        max: double const
        destPixelFormat: enum Spinnaker::PixelFormatEnums const
        srcDataRange: enum Spinnaker::SourceDataRange

        CreateNormalized(srcImage, destImage, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        srcDataRange: enum Spinnaker::SourceDataRange

        CreateNormalized(srcImage, destImage, min, max, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        min: double const
        max: double const
        srcDataRange: enum Spinnaker::SourceDataRange

        """
        return _PySpin.ImageUtility_CreateNormalized(*args)

    def __init__(self):
        r"""__init__(self) -> ImageUtility"""
        _PySpin.ImageUtility_swiginit(self, _PySpin.new_ImageUtility())
    __swig_destroy__ = _PySpin.delete_ImageUtility

# Register ImageUtility in _PySpin:
_PySpin.ImageUtility_swigregister(ImageUtility)

def ImageUtility_CreateScaled(*args):
    r"""
    ImageUtility_CreateScaled(srcImage, scalingAlg, scalingFactor) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    scalingAlg: enum Spinnaker::ImageScalingAlgorithm
    scalingFactor: double

    ImageUtility_CreateScaled(srcImage, destImage, scalingAlg, scalingFactor)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destImage: Spinnaker::ImagePtr &
    scalingAlg: enum Spinnaker::ImageScalingAlgorithm
    scalingFactor: double

    """
    return _PySpin.ImageUtility_CreateScaled(*args)

def ImageUtility_CreateNormalized(*args):
    r"""
    ImageUtility_CreateNormalized(srcImage, destPixelFormat, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destPixelFormat: enum Spinnaker::PixelFormatEnums const
    srcDataRange: enum Spinnaker::SourceDataRange

    ImageUtility_CreateNormalized(srcImage, min, max, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    min: double const
    max: double const
    srcDataRange: enum Spinnaker::SourceDataRange

    ImageUtility_CreateNormalized(srcImage, min, max, destPixelFormat, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    min: double const
    max: double const
    destPixelFormat: enum Spinnaker::PixelFormatEnums const
    srcDataRange: enum Spinnaker::SourceDataRange

    ImageUtility_CreateNormalized(srcImage, destImage, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destImage: Spinnaker::ImagePtr &
    srcDataRange: enum Spinnaker::SourceDataRange

    ImageUtility_CreateNormalized(srcImage, destImage, min, max, srcDataRange=SPINNAKER_SOURCE_DATA_RANGE_IMAGE_DATA_RANGE)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destImage: Spinnaker::ImagePtr &
    min: double const
    max: double const
    srcDataRange: enum Spinnaker::SourceDataRange

    """
    return _PySpin.ImageUtility_CreateNormalized(*args)

class ImageUtilityCCM(object):
    r"""Proxy of C++ Spinnaker::ImageUtilityCCM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateColorCorrected(*args):
        r"""
        CreateColorCorrected(srcImage, settings) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        settings: Spinnaker::CCMSettings const &

        CreateColorCorrected(srcImage, destImage, settings)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &
        settings: Spinnaker::CCMSettings const &

        """
        return _PySpin.ImageUtilityCCM_CreateColorCorrected(*args)

    def __init__(self):
        r"""__init__(self) -> ImageUtilityCCM"""
        _PySpin.ImageUtilityCCM_swiginit(self, _PySpin.new_ImageUtilityCCM())
    __swig_destroy__ = _PySpin.delete_ImageUtilityCCM

# Register ImageUtilityCCM in _PySpin:
_PySpin.ImageUtilityCCM_swigregister(ImageUtilityCCM)

def ImageUtilityCCM_CreateColorCorrected(*args):
    r"""
    ImageUtilityCCM_CreateColorCorrected(srcImage, settings) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    settings: Spinnaker::CCMSettings const &

    ImageUtilityCCM_CreateColorCorrected(srcImage, destImage, settings)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destImage: Spinnaker::ImagePtr &
    settings: Spinnaker::CCMSettings const &

    """
    return _PySpin.ImageUtilityCCM_CreateColorCorrected(*args)

class ImageUtilityHeatmap(object):
    r"""Proxy of C++ Spinnaker::ImageUtilityHeatmap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateHeatmap(*args):
        r"""
        CreateHeatmap(srcImage) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &

        CreateHeatmap(srcImage, destImage)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destImage: Spinnaker::ImagePtr &

        """
        return _PySpin.ImageUtilityHeatmap_CreateHeatmap(*args)

    @staticmethod
    def SetHeatmapColorGradient(newLowColor, newHighColor):
        r"""
        SetHeatmapColorGradient(newLowColor, newHighColor)

        Parameters
        ----------
        newLowColor: enum Spinnaker::HeatmapColor const
        newHighColor: enum Spinnaker::HeatmapColor const

        """
        return _PySpin.ImageUtilityHeatmap_SetHeatmapColorGradient(newLowColor, newHighColor)

    @staticmethod
    def GetHeatmapColorGradient(currentLowColor, currentHighColor):
        r"""
        GetHeatmapColorGradient(currentLowColor, currentHighColor)

        Parameters
        ----------
        currentLowColor: Spinnaker::HeatmapColor &
        currentHighColor: Spinnaker::HeatmapColor &

        """
        return _PySpin.ImageUtilityHeatmap_GetHeatmapColorGradient(currentLowColor, currentHighColor)

    @staticmethod
    def SetHeatmapRange(newLowValue, newHighValue):
        r"""
        SetHeatmapRange(newLowValue, newHighValue)

        Parameters
        ----------
        newLowValue: unsigned int const
        newHighValue: unsigned int const

        """
        return _PySpin.ImageUtilityHeatmap_SetHeatmapRange(newLowValue, newHighValue)

    @staticmethod
    def GetHeatmapRange(currentLowValue, currentHighValue):
        r"""
        GetHeatmapRange(currentLowValue, currentHighValue)

        Parameters
        ----------
        currentLowValue: unsigned int &
        currentHighValue: unsigned int &

        """
        return _PySpin.ImageUtilityHeatmap_GetHeatmapRange(currentLowValue, currentHighValue)

    def __init__(self):
        r"""__init__(self) -> ImageUtilityHeatmap"""
        _PySpin.ImageUtilityHeatmap_swiginit(self, _PySpin.new_ImageUtilityHeatmap())
    __swig_destroy__ = _PySpin.delete_ImageUtilityHeatmap

# Register ImageUtilityHeatmap in _PySpin:
_PySpin.ImageUtilityHeatmap_swigregister(ImageUtilityHeatmap)

def ImageUtilityHeatmap_CreateHeatmap(*args):
    r"""
    ImageUtilityHeatmap_CreateHeatmap(srcImage) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &

    ImageUtilityHeatmap_CreateHeatmap(srcImage, destImage)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destImage: Spinnaker::ImagePtr &

    """
    return _PySpin.ImageUtilityHeatmap_CreateHeatmap(*args)

def ImageUtilityHeatmap_SetHeatmapColorGradient(newLowColor, newHighColor):
    r"""
    ImageUtilityHeatmap_SetHeatmapColorGradient(newLowColor, newHighColor)

    Parameters
    ----------
    newLowColor: enum Spinnaker::HeatmapColor const
    newHighColor: enum Spinnaker::HeatmapColor const

    """
    return _PySpin.ImageUtilityHeatmap_SetHeatmapColorGradient(newLowColor, newHighColor)

def ImageUtilityHeatmap_GetHeatmapColorGradient(currentLowColor, currentHighColor):
    r"""
    ImageUtilityHeatmap_GetHeatmapColorGradient(currentLowColor, currentHighColor)

    Parameters
    ----------
    currentLowColor: Spinnaker::HeatmapColor &
    currentHighColor: Spinnaker::HeatmapColor &

    """
    return _PySpin.ImageUtilityHeatmap_GetHeatmapColorGradient(currentLowColor, currentHighColor)

def ImageUtilityHeatmap_SetHeatmapRange(newLowValue, newHighValue):
    r"""
    ImageUtilityHeatmap_SetHeatmapRange(newLowValue, newHighValue)

    Parameters
    ----------
    newLowValue: unsigned int const
    newHighValue: unsigned int const

    """
    return _PySpin.ImageUtilityHeatmap_SetHeatmapRange(newLowValue, newHighValue)

def ImageUtilityHeatmap_GetHeatmapRange(currentLowValue, currentHighValue):
    r"""
    ImageUtilityHeatmap_GetHeatmapRange(currentLowValue, currentHighValue)

    Parameters
    ----------
    currentLowValue: unsigned int &
    currentHighValue: unsigned int &

    """
    return _PySpin.ImageUtilityHeatmap_GetHeatmapRange(currentLowValue, currentHighValue)

class ImageUtilityPolarization(object):
    r"""Proxy of C++ Spinnaker::ImageUtilityPolarization class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ExtractPolarQuadrant(*args):
        r"""
        ExtractPolarQuadrant(srcImage, desiredQuadrant) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        desiredQuadrant: enum Spinnaker::PolarizationQuadrant const

        ExtractPolarQuadrant(srcImage, destQuadImage, desiredQuadrant)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destQuadImage: Spinnaker::ImagePtr &
        desiredQuadrant: enum Spinnaker::PolarizationQuadrant const

        """
        return _PySpin.ImageUtilityPolarization_ExtractPolarQuadrant(*args)

    @staticmethod
    def CreateGlareReduced(*args):
        r"""
        CreateGlareReduced(srcImage) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &

        CreateGlareReduced(srcImage, destGlareReducedImage)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destGlareReducedImage: Spinnaker::ImagePtr &

        """
        return _PySpin.ImageUtilityPolarization_CreateGlareReduced(*args)

    @staticmethod
    def CreateStokesS0(*args):
        r"""
        CreateStokesS0(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        CreateStokesS0(srcImage, destStokesS0Image, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destStokesS0Image: Spinnaker::ImagePtr &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        """
        return _PySpin.ImageUtilityPolarization_CreateStokesS0(*args)

    @staticmethod
    def CreateStokesS1(*args):
        r"""
        CreateStokesS1(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        CreateStokesS1(srcImage, destStokesS1Image, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destStokesS1Image: Spinnaker::ImagePtr &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        """
        return _PySpin.ImageUtilityPolarization_CreateStokesS1(*args)

    @staticmethod
    def CreateStokesS2(*args):
        r"""
        CreateStokesS2(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        CreateStokesS2(srcImage, destStokesS2Image, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destStokesS2Image: Spinnaker::ImagePtr &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        """
        return _PySpin.ImageUtilityPolarization_CreateStokesS2(*args)

    @staticmethod
    def CreateDolp(*args):
        r"""
        CreateDolp(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        CreateDolp(srcImage, destDolpImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destDolpImage: Spinnaker::ImagePtr &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        """
        return _PySpin.ImageUtilityPolarization_CreateDolp(*args)

    @staticmethod
    def CreateAolp(*args):
        r"""
        CreateAolp(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        CreateAolp(srcImage, destAolpImg, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

        Parameters
        ----------
        srcImage: Spinnaker::ImagePtr const &
        destAolpImg: Spinnaker::ImagePtr &
        colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

        """
        return _PySpin.ImageUtilityPolarization_CreateAolp(*args)

    def __init__(self):
        r"""__init__(self) -> ImageUtilityPolarization"""
        _PySpin.ImageUtilityPolarization_swiginit(self, _PySpin.new_ImageUtilityPolarization())
    __swig_destroy__ = _PySpin.delete_ImageUtilityPolarization

# Register ImageUtilityPolarization in _PySpin:
_PySpin.ImageUtilityPolarization_swigregister(ImageUtilityPolarization)

def ImageUtilityPolarization_ExtractPolarQuadrant(*args):
    r"""
    ImageUtilityPolarization_ExtractPolarQuadrant(srcImage, desiredQuadrant) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    desiredQuadrant: enum Spinnaker::PolarizationQuadrant const

    ImageUtilityPolarization_ExtractPolarQuadrant(srcImage, destQuadImage, desiredQuadrant)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destQuadImage: Spinnaker::ImagePtr &
    desiredQuadrant: enum Spinnaker::PolarizationQuadrant const

    """
    return _PySpin.ImageUtilityPolarization_ExtractPolarQuadrant(*args)

def ImageUtilityPolarization_CreateGlareReduced(*args):
    r"""
    ImageUtilityPolarization_CreateGlareReduced(srcImage) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &

    ImageUtilityPolarization_CreateGlareReduced(srcImage, destGlareReducedImage)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destGlareReducedImage: Spinnaker::ImagePtr &

    """
    return _PySpin.ImageUtilityPolarization_CreateGlareReduced(*args)

def ImageUtilityPolarization_CreateStokesS0(*args):
    r"""
    ImageUtilityPolarization_CreateStokesS0(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    ImageUtilityPolarization_CreateStokesS0(srcImage, destStokesS0Image, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destStokesS0Image: Spinnaker::ImagePtr &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    """
    return _PySpin.ImageUtilityPolarization_CreateStokesS0(*args)

def ImageUtilityPolarization_CreateStokesS1(*args):
    r"""
    ImageUtilityPolarization_CreateStokesS1(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    ImageUtilityPolarization_CreateStokesS1(srcImage, destStokesS1Image, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destStokesS1Image: Spinnaker::ImagePtr &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    """
    return _PySpin.ImageUtilityPolarization_CreateStokesS1(*args)

def ImageUtilityPolarization_CreateStokesS2(*args):
    r"""
    ImageUtilityPolarization_CreateStokesS2(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    ImageUtilityPolarization_CreateStokesS2(srcImage, destStokesS2Image, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destStokesS2Image: Spinnaker::ImagePtr &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    """
    return _PySpin.ImageUtilityPolarization_CreateStokesS2(*args)

def ImageUtilityPolarization_CreateDolp(*args):
    r"""
    ImageUtilityPolarization_CreateDolp(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    ImageUtilityPolarization_CreateDolp(srcImage, destDolpImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destDolpImage: Spinnaker::ImagePtr &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    """
    return _PySpin.ImageUtilityPolarization_CreateDolp(*args)

def ImageUtilityPolarization_CreateAolp(*args):
    r"""
    ImageUtilityPolarization_CreateAolp(srcImage, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR) -> ImagePtr

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    ImageUtilityPolarization_CreateAolp(srcImage, destAolpImg, colorProcessingAlg=SPINNAKER_COLOR_PROCESSING_ALGORITHM_NEAREST_NEIGHBOR)

    Parameters
    ----------
    srcImage: Spinnaker::ImagePtr const &
    destAolpImg: Spinnaker::ImagePtr &
    colorProcessingAlg: enum Spinnaker::ColorProcessingAlgorithm const

    """
    return _PySpin.ImageUtilityPolarization_CreateAolp(*args)

class SpinVideo(object):
    r"""


    Provides the functionality for the user to record images to an AVI
    file.

    C++ includes: SpinVideo.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> SpinVideo
        Spinnaker::Video::SpinVideo::SpinVideo()

        Default constructor. 
        """
        _PySpin.SpinVideo_swiginit(self, _PySpin.new_SpinVideo())
    __swig_destroy__ = _PySpin.delete_SpinVideo

    def Open(self, *args):
        r"""
        Open(self, pFileName, pOption)

        Parameters
        ----------
        pFileName: char const *
        pOption: Spinnaker::Video::AVIOption &

        Open(self, pFileName, pOption)

        Parameters
        ----------
        pFileName: char const *
        pOption: Spinnaker::Video::MJPGOption &

        Open(self, pFileName, pOption)

        Parameters
        ----------
        pFileName: char const *
        pOption: Spinnaker::Video::H264Option &

        virtual void
        Spinnaker::Video::SpinVideo::Open(const char *pFileName, Video::H264Option
        &pOption)

        Open an H264 MP4 file in preparation for writing Images to disk. The
        size of MP4 files is limited to 2GB. The filenames are automatically
        generated using the filename specified.

        Parameters:
        -----------

        pFileName:  The filename of the MP4 file.

        pOption:  H264 options to apply to the MP4 file.

        See:   Close()

        See:   H264Option 
        """
        return _PySpin.SpinVideo_Open(self, *args)

    def Append(self, pImage):
        r"""
        Append(self, pImage)

        Parameters
        ----------
        pImage: Spinnaker::ImagePtr

        virtual
        void Spinnaker::Video::SpinVideo::Append(ImagePtr pImage)

        Append an image to the AVI/MP4 file.

        Parameters:
        -----------

        pImage:  The image to append. 
        """
        return _PySpin.SpinVideo_Append(self, pImage)

    def Close(self):
        r"""
        Close(self)
        virtual void
        Spinnaker::Video::SpinVideo::Close()

        Close the AVI/MP4 file.

        See:   Open() 
        """
        return _PySpin.SpinVideo_Close(self)

    def SetMaximumFileSize(self, size):
        r"""
        SetMaximumFileSize(self, size)

        Parameters
        ----------
        size: unsigned int

        """
        return _PySpin.SpinVideo_SetMaximumFileSize(self, size)

# Register SpinVideo in _PySpin:
_PySpin.SpinVideo_swigregister(SpinVideo)


def UpdateFirmwareConsole(numArgs):
    r"""
    UpdateFirmwareConsole(numArgs) -> int

    Parameters
    ----------
    numArgs: unsigned int

    """
    return _PySpin.UpdateFirmwareConsole(numArgs)

def UpdateFirmwareGUI(args):
    r"""
    UpdateFirmwareGUI(args) -> int

    Parameters
    ----------
    args: std::string

    """
    return _PySpin.UpdateFirmwareGUI(args)

def UpdateFirmware(args):
    r"""
    UpdateFirmware(args) -> int

    Parameters
    ----------
    args: std::vector< std::string >

    """
    return _PySpin.UpdateFirmware(args)

def SpinUpdate_SetMsgCallback(messageCallbackFunction):
    r"""
    SpinUpdate_SetMsgCallback(messageCallbackFunction)

    Parameters
    ----------
    messageCallbackFunction: SpinUpdate::UpdatorMessageCallback

    """
    return _PySpin.SpinUpdate_SetMsgCallback(messageCallbackFunction)

def SpinUpdate_SetProgCallback(progressCallbackFunction):
    r"""
    SpinUpdate_SetProgCallback(progressCallbackFunction)

    Parameters
    ----------
    progressCallbackFunction: SpinUpdate::UpdatorProgressCallback

    """
    return _PySpin.SpinUpdate_SetProgCallback(progressCallbackFunction)

def GetErrorMessage():
    r"""GetErrorMessage() -> char const *"""
    return _PySpin.GetErrorMessage()

import ctypes

# ctypes representation of the callback function types
updatorprogress_callback_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_char_p, ctypes.c_uint, ctypes.c_int, ctypes.c_int)
updatormessage_callback_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_char_p)


def SetProgressCallback(cb):
    """
    Adds a callback to the updator to represent update progress.
    Only gets called if the -P switch is present in the arguments passed to UpdateFirmware[Console]!

    :param cb: Function to use as callback; this function must take exactly 4 arguments.
    """
    f = updatorprogress_callback_type(cb)
    pf = ctypes.cast(f, ctypes.c_void_p).value

    _PySpin.SpinUpdate_SetProgCallback(pf)


def SetMessageCallback(cb):
    """
    Adds a callback to the updator to handle messages from the updator.
    Only gets called if the -P switch is present in the arguments passed to UpdateFirmware[Console]!

    :param cb: Function to use as callback; this function must take exactly 1 argument.
    """

    f = updatormessage_callback_type(cb)
    pf = ctypes.cast(f, ctypes.c_void_p).value

    _PySpin.SpinUpdate_SetMsgCallback(pf)



